<?xml version="1.0"?>
<project name="splice_derby" default="buildsource" basedir=".">

  <!-- User settings -->
  <property environment="env"/>
  <property name="properties.dir" value="tools/ant/properties"/>
  <!-- Significant dirs -->
  <property file="${properties.dir}/dirs.properties"/>
  <!-- Compiler settings -->
  <property file="${properties.dir}/sane${sanity}.properties"/>


<!-- These properties are used by the Release build process. -->
  <condition property="isWindows">
    <os family="windows"/>
  </condition>

  <condition property="isUnix">
    <not>
      <os family="windows"/>
    </not>
  </condition>

<!-- Targets -->

  <target
      name="buildsource"
      depends="init,setCompilerProperties,engine,storeless,tools,drda,client,build,versioninfo,optlocaleinfo"
      description="Compile the product source (does not build the tests)."
  />
  <target
      name="all"
      depends="buildsource,testing,pptesting,runmessagecheck"
      description="Compile all of the source, including tests as well as production code."
  />

<!-- ==================================================================== -->
<!--                       Initialize targets                             -->
<!-- ==================================================================== -->

  <target name="init" unless="init.done" depends="setInitialProperties">

      <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      These properties were originally in release.properties which was included in every
      build.xml.  The properties that remain below are only used in THIS build file, and so
      it is ok if they are only defined here.  The version values are functionally significant; they
      get packaged with both client and server are compared on each connection.  Consequently
      care must be taken when/if we change versions defined here.
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
      <property name="eversion"   value="10.9"/>
      <property name="minor"      value="9"/>
      <property name="drdamaint"  value="0"/>
      <property name="major"      value="10"/>
      <property name="maint"      value="2000002"/>
      <property name="beta"       value="false"/>
      <property name="vendor"     value="Splice Machine"/>

    <antcall target="install_junit"/>
    <antcall target="install_joda-time"/>
    <antcall target="install_log4j"/>
  	<tstamp/>
    <mkdir dir="${out.dir}"/>
    <antcall target="make-generated-dirs"/>

    <!-- Create the emtpy dir that we put in the boot classpath to
         prevent the default Java runtime libraries from being loaded.
      -->
    <mkdir dir="${empty}"/>

    <!-- generate sanity state.properties if one does not exist -->
    <available property="state.available" file="${state.file}"/>
    <antcall target="ensuresanitystate"/>
    <property file="${state.file}"/>
    <property file="${properties.dir}/sane${sanity}.properties"/>
    <antcall target="setissane"/>
    <property name="init.done" value="true"/>
  </target>

   <target name="make-generated-dirs">

    <mkdir dir="${generated.dir}"/>
    <mkdir dir="${generated.bin.dir}"/>
    <mkdir dir="${generated.src.dir}"/>
    <mkdir dir="${generated.sanity.dir}"/>
    <mkdir dir="${generated.ij.dir}"/>
    <mkdir dir="${generated.sql.dir}"/>
    <mkdir dir="${generated.engine.locale.dir}"/>
    <mkdir dir="${generated.cache.dir}"/>

   </target>

  <target name="setissane">
    <condition property="is.sane">
      <equals arg1="${sanity}" arg2="true"/>
    </condition>
  </target>

  <target name="ensuresanitystate" unless="state.available">
    <antcall target="evaluate.sane"/>
  </target>
  <target name="evaluate.sane">
    <condition property="generate.sane">
      <or>
        <equals arg1="${sane}" arg2="true"/>
        <not>
          <isset property="sane"/>
        </not>
      </or>
    </condition>
    <antcall target="ensuresanitystate.sane"/>
    <antcall target="ensuresanitystate.insane"/>
  </target>
  <target name="ensuresanitystate.sane" if="generate.sane">
    <antcall target="sane"/>
  </target>
  <target name="ensuresanitystate.insane" unless="generate.sane">
    <antcall target="insane"/>
  </target>

  <target name="showenv" depends="init" unless="showenv.done">
    <echo level="info" message=""/>
    <echo level="info" message="Ant environment:"/>
    <echo level="info" message="  Base Directory: ${basedir}"/>
    <echo level="info" message="  Build output: ${out.dir}"/>
    <echo level="info" message="  Sane = ${sane}"/>
    <echo level="info" message="  Proceed = ${proceed}"/>
    <echo level="info" message=""/>
    <property name="showenv.done" value="true"/>
  </target>

<!-- ==================================================================== -->
<!--                     Download junit 3.8.2                             -->
<!-- ==================================================================== -->


   <!-- You can override this property in local.properties to fetch from an alternative location -->
   <property name="junit.url" value="http://repo1.maven.org/maven2/junit/junit/3.8.2/junit-3.8.2.jar"/>
      <target name="junit_check">
       <!-- check if junit is set, if set, if junit.jar is really there, if not, error out  -->
       <fail message="junit property is set to ${junit}, but there is no junit.jar there.">
           <condition>
               <and>
                   <isset property="junit"/>
                   <not>
                       <available file="${junit}"/>
                   </not>
               </and>
           </condition>
       </fail>
       <condition property="junitfile" value="${junit}">
           <and>
               <isset property="junit"/>
           </and>
       </condition>
       <condition property="junitfile" value="${basedir}/tools/java/junit.jar">
           <not>
               <isset property="junit"/>
           </not>
       </condition>
       <available file="${junitfile}" property="junit.exists"/>
   </target>

   <target name="install_junit" depends="junit_check" unless="junit.exists" description="installs junit.jar into derby">
       <get src="${junit.url}" dest="${basedir}/tools/java/junit.jar" verbose="true" ignoreerrors="true"/>
   </target>
	
	<!-- ==================================================================== -->
	<!--                     Install JODA-TIME		                          -->
	<!-- ==================================================================== -->


   <property name="joda-time.url" value="http://search.maven.org/remotecontent?filepath=joda-time/joda-time/2.3/joda-time-2.3.jar"/>
      <target name="joda-time_check">
       <!-- check if joda-time is set, if set, if junit.jar is really there, if not, error out  -->
       <fail message="joda-time property is set to ${joda-time}, but there is no joda-time.jar there.">
           <condition>
               <and>
                   <isset property="joda-time"/>
                   <not>
                       <available file="${joda-time}"/>
                   </not>
               </and>
           </condition>
       </fail>
       <condition property="joda-timefile" value="${joda-time}">
           <and>
               <isset property="joda-time"/>
           </and>
       </condition>
       <condition property="joda-timefile" value="${basedir}/tools/java/joda-time.jar">
           <not>
               <isset property="joda-time"/>
           </not>
       </condition>
       <available file="${joda-timefile}" property="joda-time.exists"/>
   </target>
	
   <target name="install_joda-time" depends="joda-time_check" unless="joda-time.exists"  description="installs joda-time.jar into derby">
       <get src="${joda-time.url}" dest="${basedir}/tools/java/joda-time.jar" verbose="true" ignoreerrors="true"/>
   </target>

	
	 <!-- ==================================================================== -->
	 <!--                     Download log4j 1.2.15                            -->
	 <!-- ==================================================================== -->
	 
	 	   <!-- You can override this property in local.properties to fetch from an alternative location -->
	 	   <property name="log4j.url" value="http://repo1.maven.org/maven2/log4j/log4j/1.2.15/log4j-1.2.15.jar"/>
	 	      <target name="log4j_check">
	 	       <!-- check if log4j is set, if set, if log4j.jar is really there, if not, error out  -->
	 	       <fail message="log4j property is set to ${log4j}, but there is no log4j.jar there.">
	 	           <condition>
	 	               <and>
	 	                   <isset property="log4j"/>
	 	                   <not>
	 	                       <available file="${log4j}"/>
	 	                   </not>
	 	               </and>
	 	           </condition>
	 	       </fail>
	 	       <condition property="log4jfile" value="${log4j}">
	 	           <and>
	 	               <isset property="log4j"/>
	 	           </and>
	 	       </condition>
	 	       <condition property="log4jfile" value="${basedir}/tools/java/log4j.jar">
	 	           <not>
	 	               <isset property="log4j"/>
	 	           </not>
	 	       </condition>
	 	       <available file="${log4jfile}" property="log4j.exists"/>
	 	   </target>
	 
	 	   <target name="install_log4j" depends="log4j_check" unless="log4j.exists" description="installs log4j.jar into derby">
	 	       <get src="${log4j.url}" dest="${basedir}/tools/java/log4j.jar" verbose="true" ignoreerrors="true"/>
	 	   </target>
	 
	
	
	
	
<!-- ==================================================================== -->
<!--                     Build version info files                         -->
<!-- ==================================================================== -->

  <target name="versioninfo" depends="ckversioninfo,writeversioninfo"/>

  <target name="ckversioninfo">
    <condition property="versioninfo.available">
      <and>
        <available file="${out.dir}/${splice.package}/info/DBMS.properties"/>
        <available file="${out.dir}/${splice.package}/info/tools.properties"/>
        <available file="${out.dir}/${splice.package}/info/net.properties"/>
        <available file="${out.dir}/${splice.package}/info/dnc.properties"/>
      </and>
    </condition>
  </target>

  <target name="writeversioninfo" unless="versioninfo.available">
    <mkdir dir="${out.dir}/${splice.package}/info/"/>

    <antcall target="infowriter">
      <param name="info.buildnumber" value="1"/>
      <param name="info.iname" value="Apache Derby Embedded Engine"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.productfile" value="codeline"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/DBMS.properties"/>
    </antcall>
    <antcall target="infowriter">
      <param name="info.buildnumber" value="1"/>
      <param name="info.iname" value="Apache Derby Tools"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.productfile" value="codeline"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/tools.properties"/>
    </antcall>
    <antcall target="infowriter">
      <param name="info.buildnumber" value="1"/>
      <param name="info.iname" value="Apache Derby Network Server"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.productfile" value="codeline"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/net.properties"/>
    </antcall>
    <antcall target="infowriter">
      <param name="info.buildnumber" value="1"/>
      <param name="info.iname" value="Apache Derby Network Client"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.productfile" value="codeline"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/dnc.properties"/>
    </antcall>
  </target>

  <target name="cleanversion">
    <delete file="${out.dir}/${splice.package}/info/DBMS.properties"/>
    <delete file="${out.dir}/${splice.package}/info/tools.properties"/>
    <delete file="${out.dir}/${splice.package}/info/net.properties"/>
    <delete file="${out.dir}/${splice.package}/info/dnc.properties"/>
  </target>

  <!-- Set the ant variables which identify the compiler classpaths. -->
  <target name="setCompilerProperties" unless="compilerPropsAlreadySet">

    <property file="${properties.dir}/modern.properties"/>
    <property file="${properties.dir}/extrapath.properties"/>

      <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Here I am doing what the custom ant task PropertySetter used to do.
      * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  -->
      <path id="currentJreLibClasspath">
          <fileset dir="${java.home}">
              <include name="**/*.jar" />
          </fileset>
      </path>

      <property name="main.classpath" refid="currentJreLibClasspath"/>
      <property name="compilerPropsAlreadySet" value="true"/>

  </target>

  <!-- Set the initial properties for this build script. This duplicates the property setting block in setCompilerProperties. Once we make setCompilerProperties mandatory, this target should be removed. -->
  <target name="setInitialProperties" if="dontAutosetProps">

    <property file="${properties.dir}/modern.properties"/>
    <!-- Compile-time classpath`< properties files -->
    <property file="${properties.dir}/extrapath.properties"/>

  </target>



<!-- ==================================================================== -->
<!--                         Info writer build target                     -->
<!-- ==================================================================== -->

    <target name="infowriter">
        <propertyfile file="${info.file}" comment="generated by infowriter target in build.xml">
            <entry key="derby.version.major"            value="${major}"/>
            <entry key="derby.version.minor"            value="${minor}"/>
            <entry key="derby.version.maint"            value="${maint}"/>
            <entry key="derby.version.drdamaint"        value="${drdamaint}"/>
            <entry key="derby.build.number"             value="${info.buildnumber}"/>
            <entry key="derby.product.technology.name"  value="${info.iname}"/>
            <entry key="derby.product.external.name"    value="${info.ename}"/>
            <entry key="derby.product.external.version" value="${eversion}"/>
            <entry key="derby.version.beta"             value="${beta}"/>
            <entry key="derby.product.vendor"           value="${vendor}"/>
            <entry key="splice.derby.version"           value="${splice.derby.version}"/>
            <entry key="derby.product.file"             value="${info.productfile}"/>
        </propertyfile>
    </target>

    <!-- ==================================================================== -->
<!--                   Locale info writer build target                    -->
<!-- ==================================================================== -->

  <target name="buildlocaleinfo" unless="skip.locale">
    <antcall target="localeinfowriter">
      <param name="info.buildnumber" value="1"/>
      <param name="info.iname" value="_${locale.iname}"/>
      <param name="info.ename" value="${locale.ename}"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/locale_${locale.iname}.properties"/>
    </antcall>
  </target>

    <target name="localeinfowriter">
        <propertyfile file="${info.file}" comment="Generated by localeinfowriter target in build.xml">
            <entry key="derby.locale.version.major"   value="${major}"/>
            <entry key="derby.locale.version.minor"   value="${minor}"/>
            <entry key="derby.locale.version.maint"   value="${maint}"/>
            <entry key="derby.locale.build.number"    value="${info.buildnumber}"/>
            <entry key="derby.locale.technology.name" value="${info.iname}"/>
            <entry key="derby.locale.external.name"   value="${info.ename}"/>
            <entry key="derby.version.beta"           value="${beta}"/>
            <entry key="derby.locale.vendor"          value="${vendor}"/>
            <entry key="derby.product.file"           value="${info.productfile}"/>
        </propertyfile>
    </target>

 
<!-- ==================================================================== -->
<!--                           Build Locale info                          -->
<!-- ==================================================================== -->

<target name="optlocaleinfo" depends="localeinfo" unless="skip.locale"/>

  <target name="localeinfo"
          depends="checklocaleinfo,checkmessages"
          unless="localeinfo.available">

    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="cs"/>
      <param name="locale.ename" value="Czech/International [cs]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="de_DE"/>
      <param name="locale.ename" value="German/Germany [de_DE]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="es"/>
      <param name="locale.ename" value="Spanish/International [es]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="fr"/>
      <param name="locale.ename" value="French/International [fr]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="hu"/>
      <param name="locale.ename" value="Hungarian/International [hu]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="it"/>
      <param name="locale.ename" value="Italian/International [it]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="ja_JP"/>
      <param name="locale.ename" value="Japanese/Japan [ja_JP]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="ko_KR"/>
      <param name="locale.ename" value="Korean/Korea [ko_KR]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="pl"/>
      <param name="locale.ename" value="Polish/International [pl]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="pt_BR"/>
      <param name="locale.ename" value="Portuguese/Brazil [pt_BR]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="ru"/>
      <param name="locale.ename" value="Russian/International [ru]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="zh_CN"/>
      <param name="locale.ename" value="Simplified_Chinese/PR_China [zh_CN]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
    <antcall target="buildlocaleinfo">
      <param name="locale.iname" value="zh_TW"/>
      <param name="locale.ename" value="Chinese/Taiwan_Traditional [zh_TW]"/>
      <param name="info.buildnumber" value="1"/>
      <param name="info.productfile" value="codeline"/>
    </antcall>
  </target>

  <target name="checklocaleinfo">
    <condition property="localeinfo.available">
      <and>
        <available file="${out.dir}/${splice.package}/info/locale_cs.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_de_DE.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_es.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_fr.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_hu.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_it.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_ja_JP.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_ko_KR.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_pl.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_pt_BR.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_ru.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_zh_CN.properties"/>
        <available file="${out.dir}/${splice.package}/info/locale_zh_TW.properties"/>
      </and>
    </condition>
  </target>

  <target name="cleanlocale">
    <delete file="${out.dir}/${splice.package}/info/locale_cs.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_de_DE.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_es.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_fr.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_hu.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_it.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_ja_JP.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_ko_KR.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_pl.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_pt_BR.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_ru.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_zh_CN.properties"/>
    <delete file="${out.dir}/${splice.package}/info/locale_zh_TW.properties"/>
  </target>

  <target name="checkmessages" depends="checkmessages-done"
          unless="checkmessages.done">
    <java classname="com.splicemachine.derbyBuild.MessageVetter"
          classpath="${out.dir}"
          failonerror="true">
      <arg file="${out.dir}/${splice.package}/loc"/>
      <arg file="${out.dir}/${splice.package}/loc/drda"/>
    </java>
    <touch file="${generated.dir}/checkmessages.done"/>
  </target>

  <target name="checkmessages-done">
    <uptodate property="checkmessages.done" targetfile="${generated.dir}/checkmessages.done">
      <srcresources>
        <fileset dir="${out.dir}/${splice.package}/loc" includes="*.properties"/>
        <fileset dir="${out.dir}/${splice.package}/loc/drda"  includes="*.properties"/>
      </srcresources>
    </uptodate>
  </target>

<!-- ==================================================================== -->
<!--                   Derby Engine build target                     -->
<!-- ==================================================================== -->

  <target name="engine" depends="shared,state">
    <ant dir="${derby.engine.src.dir}"/>
    <antcall target="build"/>
    <ant dir="${derby.engine.dir}/loc"/>
    <antcall target="class_size_catalog"/>
  </target>

  <target name="tools" depends="engine">
    <ant dir="${derby.tools.src.dir}"/>
  </target>
	
  <target name="storeless" depends="engine">
  	<ant dir="${derby.storeless.src.dir}"/>
  </target>
	
  <target name="shared" depends="init,state">
    <ant dir="${derby.shared.src.dir}"/>
  </target>
  
  <target name="drda" depends="engine">
    <ant dir="${derby.drda.src.dir}"/>
    <ant dir="${derby.tools.src.dir}" target="tools_run"/>
  </target>

  <target name="client" depends="engine,shared">
    <ant dir="${derby.client.src.dir}"/>
  </target>

  <target name="build">
    <ant dir="${derby.build.src.dir}"/>
  </target>

  <target name="testing" depends="buildsource">
    <ant dir="${derby.testing.src.dir}"/>
  </target>
	
  <target name="build-test-jars" description="Build jar files used in tests." depends="buildsource" >

    <ant dir="${derby.testing.src.dir}/${derby.testing.functest.dir}/tests/lang" target="build-test-jars" />

  </target>

  <!-- Build the package private tests -->
  <target name="pptesting" depends="testing">
    <ant dir="${derby.testing.src.dir}/${splice.package}"/>
  </target>

  <!-- Run the MessageBundleTest -->
  <target name="runmessagecheck">
    <java   fork="true" 
       classname="com.splicemachine.derbyBuild.MessageBundleTest"
     failonerror="true"
       classpath="${out.dir}"
     />
  </target>

<!-- ==================================================================== -->
<!--                     Build SanityState.java                           -->
<!-- ==================================================================== -->

  <target name="getstate">
    <condition property="needstate">
      <or>
        <not>
          <equals arg1="${sane}" arg2="${sanity}"/>
        </not>
        <not>
          <available file="${generated.sanity.dir}/SanityState.java"/>
        </not>
      </or>
    </condition>
  </target>

  <property name="state.file" value="${generated.sanity.dir}/state.properties"/>
  <property file="${state.file}"/>

  <!-- Build SanityState.java -->
  <target name="state" if="needstate" depends="showenv,getstate">
    <echo level="info" message="  Generating SanityState.java..."/>
    <property name="sane" value="true"/>
    <filter token="SANE" value="${sane}"/>
    <copy file="${sanity.dir}/SanityState.tmpl" tofile="${generated.sanity.dir}/SanityState.java"
          overwrite="yes" filtering="on"/>
    <property name="header" value="Generated file - do not modify!"/>
    <propertyfile file="${state.file}" comment="${header}">
      <entry key="sanity" value="${sane}" type="string"/>
    </propertyfile>
    <delete dir="${sanity.out.dir}"/>
  </target>

<!-- =================================================================== -->
<!--                     Remove SanityState.java file                    -->
<!-- =================================================================== -->
  <target name="cleanstate">
    <delete dir="${generated.sanity.dir}"/>
    <delete dir="${sanity.out.dir}"/>
  </target>

<!-- =================================================================== -->
<!--                 Remove all built objects (except jars)              -->
<!-- =================================================================== -->
  <target
      name="clobber"
      depends="clean,cleangenerated,cleanstate"
      description="Remove all build artifacts.">
  </target>

<!-- =================================================================== -->
<!--                       Remove the tree of generated intermediate sources                            -->
<!-- =================================================================== -->
  <target name="cleangenerated">
    <delete dir="${generated.dir}"/>
  </target>

<!-- =================================================================== -->
<!--                       Remove output tree                            -->
<!-- =================================================================== -->
  <target name="clean">
    <delete dir="${out.dir}"/>
    <delete dir="${generated.dir}"/>
  	<delete dir="${out.storeless.dir}"/>
  	<delete dir="${out.pptesting.dir}"/>
  </target>

<!-- ==================================================================== -->
<!--                         Build parsers                                -->
<!-- ==================================================================== -->

  <!-- Top level target for building both of the javacc parsers -->
  <target name="parsers">
    <ant dir="${derby.tools.dir}/impl/tools"  target="parser"/>
    <ant dir="${derby.engine.dir}/impl/sql"  target="parser"/>
  </target>

  <target name="genParser" depends="chkparser" unless="parser.done">
    <echo level="info" message="  ${msg}"/>
    <delete failonerror="false">
						<fileset dir="${generated.src.dir}/${baseDir}/${directory}" includes="${rmfiles}"/>
    </delete>
    <java classname="javacc"
          classpath="${javacc}"
                dir="${derbysrc.dir}/${srcroot}/${directory}"
               fork="yes"
        failonerror="true">
				<arg value="-OUTPUT_DIRECTORY=${generated.src.dir}/${baseDir}/${directory}"/>
      <arg value="${jjfile}"/>
    </java>
    <!-- Qualify reference to tokenImage to fix issue with inheritence -->
    <!-- IBM JDK 1.3.1. See DERBY-1078                                 -->
		<replaceregexp file="${generated.src.dir}/${baseDir}/${directory}/${chkfile}" match="tokenImage" 
                   replace="${constantsfile}.tokenImage"/>
  </target>

  <target name="chkparser">
    <uptodate property="parser.done"
						targetfile="${generated.src.dir}/${baseDir}/${directory}/${chkfile}" >
      <srcfiles dir="${derbysrc.dir}/${srcroot}/${directory}" includes="${jjfile}" />
    </uptodate>
  </target>


<!-- =================================================================== -->
<!--                     Remove generated message files                   -->
<!-- =================================================================== -->
  <target name="cleanmessages">
    <delete>
      <fileset dir="${generated.engine.locale.dir}" includes="messages_en.properties"/>
    </delete>
  </target>

<!-- =================================================================== -->
<!--                     Class Size Catalog build                        -->
<!-- =================================================================== -->

  <!--
      Create the class size catalog, a java file

      Note that checking the up-to-date status of the files scanned by
      ClassSizeCrawler will not always result in the ClassSizeCatalog
      being updated properly. We would have to be able to scan the full
      dependency tree. This does prevent recompilation in most cases,
      and requires it in the most obvious. If there is concern that
      the ClassSizeCatalog may have changed significantly since the
      last build, run clobber and rebuild to regenerate it.
  -->

  <target name="class_size_catalog" depends="cscuptodate" unless="csc.uptodate">
    <java classname="com.splicemachine.derbyBuild.ClassSizeCrawler"
          fork="yes"
          failonerror="yes">
      <classpath>
        <pathelement path="${out.dir}"/>
        <pathelement path="${main.classpath}"/>
      </classpath>
      <jvmarg value="-DWS=${workspace}"/>
      <jvmarg value="-DclassDir=${out.dir}"/>
      <jvmarg value="-Dout=${generated.cache.dir}/ClassSizeCatalog.java"/>
      <jvmarg value="-Dprefix.1=com.splicemachine.db.iapi.types"/>
      <jvmarg value="-Dprefix.2=com.splicemachine.db.impl"/>
      <arg value="com.splicemachine.db.iapi.types.DataValueDescriptor"/>
      <arg value="com.splicemachine.db.impl.services.cache.CachedItem"/>
      <arg value="com.splicemachine.db.impl.store.raw.data.RecordId"/>
      <arg value="com.splicemachine.db.iapi.store.raw.ContainerKey"/>
      <arg value="com.splicemachine.db.iapi.services.cache.SizedCacheable"/>
      <arg value="java.lang.ref.WeakReference"/>
      <arg value="java.math.BigDecimal"/>
      <arg value="java.util.ArrayList"/>
      <arg value="java.util.GregorianCalendar"/>
      <arg value="java.util.Vector"/>
    </java>

    <javac
      source="1.7"
      target="1.7"
      bootclasspath="${empty}"
      nowarn="on"
      debug="${debug}"
      depend="${depend}"
      deprecation="${deprecation}"
      optimize="${optimize}"
      proceed="${proceed}"
      verbose="${verbose}"
      srcdir="${generated.engine.dir}"
      destdir="${out.dir}">
      <classpath>
        <pathelement path="${main.classpath}"/>
      </classpath>
      <include name="${splice.package}/iapi/services/cache/ClassSizeCatalog.java"/>
    </javac>

  </target>

  <target name="cscuptodate">
    <condition property="csc.uptodate">
      <and>
        <uptodate srcfile="${derby.engine.dir}/iapi/types/DataValueDescriptor.java"
                  targetfile="${out.dir}/${splice.package}/iapi/types/DataValueDescriptor.class"/>
        <uptodate srcfile="${derby.engine.dir}/impl/services/cache/CachedItem.java"
                  targetfile="${out.dir}/${splice.package}/impl/services/cache/CachedItem.class"/>
        <uptodate srcfile="${derby.engine.dir}/impl/store/raw/data/RecordId.java"
                  targetfile="${out.dir}/${splice.package}/impl/store/raw/data/RecordId.class"/>
        <uptodate srcfile="${derby.engine.dir}/iapi/store/raw/ContainerKey.java"
                  targetfile="${out.dir}/${splice.package}/iapi/store/raw/ContainerKey.class"/>
        <uptodate srcfile="${derby.engine.dir}/iapi/services/cache/SizedCacheable.java"
                  targetfile="${out.dir}/${splice.package}/iapi/services/cache/SizedCacheable.class"/>

        <available file="${generated.src.dir}/${splice.package}/iapi/services/cache/ClassSizeCatalog.java"/>
      </and>
    </condition>
  </target>

<!-- =================================================================== -->
<!--                     Generate sanity.properties                      -->
<!-- =================================================================== -->

  <target name="sane" depends="make-generated-dirs">
    <propertyfile file="${state.file}" comment="${header}">
      <entry key="sanity" value="true" type="string"/>
    </propertyfile>
    <delete dir="${sanity.out.dir}"/>
  </target>
  <target name="insane" depends="make-generated-dirs">
    <propertyfile file="${state.file}" comment="${header}">
      <entry key="sanity" value="false" type="string"/>
    </propertyfile>
    <delete dir="${sanity.out.dir}"/>
  </target>


<!-- =================================================================== -->
<!--                               Jar targets                           -->
<!-- =================================================================== -->

  <target name="buildjarsclean" depends="cleanjars,buildjars"/>
  
  <target
      name="buildjars"
      depends="initjars,derbyjar,derbytoolsjar,derbynetjar,derbyclientjar,derbyrunjar,derbylocalejars,derbytestingjar"
      description="Build all of the Derby jar files."
  />

  <target name="initjars" depends="setsanityname,setCompilerProperties">
    <property name="derby.jar.dir" value="${jarsdist.dir}/${sanity.name}"/>
    <property name="derby.jar.topdir" value="${jarsdist.dir}"/>
    <property name="changenumber" value="1"/>
    <mkdir dir="${derby.jar.dir}"/>
    <mkdir dir="${derby.jar.dir}/lists"/>
  </target>


<!-- - - - - - - - - - - - - - - db.jar target - - - - - - - - - - - -->

  <target name="derbyjar" depends="initjars">

    <echo level="info" message="Beginning derby.jar ${sanity.name} build"/>

    <!-- purge lists directory to avoid unnecessary content from other jars -->
    <delete>
      <fileset dir="${derby.jar.dir}/lists" includes="**/*"/>
    </delete>
         
    <concat destfile="${derby.jar.dir}/lists/otherDerbyClasses.properties">
      <fileset dir="${basedir}/tools/jar" includes="*DBMS*.properties"/>
    </concat>

    <mkdir dir="${derby.jar.dir}/lists/${splice.package}"/>

    <java classname="com.splicemachine.derbyBuild.propertyconfig" fork="yes">
      <arg value="${out.dir}/${splice.package}/modules.properties"/>
      <arg value="derby"/>
      <arg value="${derby.jar.dir}/lists/${splice.package}/modules.properties"/>
      <classpath>
        <pathelement path="${out.dir}"/>
      </classpath>
    </java>

    <echo level="info" message=" creating derby.jar class list "/>

    <java classname="com.splicemachine.derbyBuild.classlister" fork="yes">
      <jvmarg value="-DcloudscapeOnly=true"/>
      <jvmarg value="-Doutputfile=${derby.jar.dir}/lists/derby.list"/>
      <arg value="${derby.jar.dir}/lists/otherDerbyClasses.properties"/> 
      <arg value="${derby.jar.dir}/lists/${splice.package}/modules.properties"/>
      <classpath>
        <pathelement path="${out.dir}"/> 
      </classpath>
    </java>

    <!-- This next antcall generates a new properties file for the build.  -->
    <!-- If a changenumber is passed into the build via a property file or -->
    <!-- on the command line, the build number will be inserted into the   -->
    <!-- build at this point.                                              -->
 
    <echo level="info" message=" creating new DBMS.properties file"/>
    <antcall target="infowriter">
      <param name="info.iname" value="Apache Derby Embedded Engine"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.buildnumber" value="${changenumber}"/>
      <param name="info.productfile" value="derby.jar"/>
      <param name="info.file" value="${out.dir}//${splice.package}/info/DBMS.properties"/>
    </antcall>

    <!-- copy boilerplate common to db jar files -->
    <antcall target="meta-inf-common"/>

    <!-- declare the embedded driver for autoloading by the JDBC 4 DriverManager -->
    <antcall target="declare-autoloadable-driver">
      <param name="driver.name" value="com.splicemachine.db.jdbc.AutoloadedDriver"/>
    </antcall>

    <antcall target="make-core-derbyjar-manifest">
      <param name="manifest.file" value="${derby.jar.dir}/lists/smf.mf"/>
    </antcall>

    <jar destfile     = "${derby.jar.dir}/derby.jar"
         basedir      = "${out.dir}"
	     includesfile = "${derby.jar.dir}/lists/derby.list"
         compress     = "true"
         filesonly    = "true"
         manifest     = "${derby.jar.dir}/lists/smf.mf">
      <fileset dir="${out.dir}"
               includes="${splice.package}/loc/m?_en.properties,
                         ${splice.package}/loc/m??_en.properties,
                         ${splice.package}/loc/sysinfoMessages.properties,
                         ${splice.package}/loc/toolsmessages.properties,
                         ${splice.package}/impl/jdbc/metadata.properties,
                         ${splice.package}/impl/sql/catalog/metadata_net.properties,
                         ${splice.package}/info/DBMS.properties"/>

        <fileset dir="${derby.jar.dir}/lists" includes="META-INF/**,${splice.package}/modules.properties"/>
    </jar>

  </target>

  <!-- Add localized jars to the classpath -->
  <target name="make-locale-classpath-manifest">
      <manifest file="${manifest.file}" mode="${manifest.mode}">
          <attribute name="Class-Path" value="derbyLocale_cs.jar derbyLocale_de_DE.jar derbyLocale_es.jar derbyLocale_fr.jar derbyLocale_hu.jar derbyLocale_it.jar derbyLocale_ja_JP.jar derbyLocale_ko_KR.jar derbyLocale_pl.jar derbyLocale_pt_BR.jar derbyLocale_ru.jar derbyLocale_zh_CN.jar derbyLocale_zh_TW.jar"/>
      </manifest>
  </target>

  <target name="make-core-derbyjar-manifest">

    <manifest file="${manifest.file}">
      <attribute name="Bundle-Vendor" value="Splice Machine"/>
      <attribute name="Bundle-Name" value="Apache Derby ${eversion}"/>
      <attribute name="Bundle-Version" value="${eversion}.${maint}.${changenumber}"/>
      <attribute name="Bundle-ManifestVersion" value="2"/>

      	<attribute name="Sealed" value="true"/>
    	<section name="${splice.package}/impl/tools/sysinfo/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/iapi/services/context/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/iapi/services/info/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/jdbc/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/info/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/iapi/services/i18n/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
        <!-- See DERBY-4669. -->
        <section name="${splice.package}/shared/common/sanity/">
          <attribute name="Sealed" value="false"/>
        </section>
        <section name="${splice.package}/iapi/tools/i18n/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/loc/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
      	<section name="${splice.package}/tools/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    </manifest> 

    <antcall target="make-locale-classpath-manifest">
        <param name="manifest.file" value="${manifest.file}"/>
        <param name="manifest.mode" value="update"/>
    </antcall>

  </target>

<!-- - - - - - - - - - - - -  derbytools.jar target - - - - - - - - - - -->

  <target name="derbytoolsjar" depends="setsanityname">

    <echo level="info" message="Beginning derbytools.jar ${sanity.name} build"/>

    <!-- purge lists directory to avoid unnecessary content from other jars -->
    <delete>
      <fileset dir="${derby.jar.dir}/lists" includes="**/*"/>
    </delete>

    <echo level="info" message=" creating tools.list "/>
    <java classname="com.splicemachine.derbyBuild.classlister" fork="yes">
      <jvmarg value="-Ddb2jtools=true"/>
      <jvmarg value="-Doutputfile=${derby.jar.dir}/lists/derbytools.list"/>
      <arg value="${basedir}/tools/jar/tools.properties"/>
      <classpath>
        <pathelement path="${out.dir}"/>
      </classpath>
    </java>
    <replace file="${derby.jar.dir}/lists/derbytools.list" token="$$$$" value="$$"/>

    <echo level="info" message=" creating new tools.properties file "/>
    <antcall target="infowriter">
      <param name="info.buildnumber" value="${changenumber}"/>
      <param name="info.iname" value="Apache Derby Tools"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.productfile" value="derbytools.jar"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/tools.properties"/>
    </antcall>

    <!-- copy boilerplate common to db jar files -->
    <antcall target="meta-inf-common"/>
    <antcall target="make-locale-classpath-manifest">
        <param name="manifest.file" value="${derby.jar.dir}/lists/smftools.mf"/>
        <param name="manifest.mode" value="replace"/>
    </antcall>

    <delete file="${derby.jar.dir}/derbytools.jar"/>
    <jar destfile="${derby.jar.dir}/derbytools.jar"
         basedir="${out.dir}"
         includesfile="${derby.jar.dir}/lists/derbytools.list"
         manifest="${derby.jar.dir}/lists/smftools.mf"
         compress="true"
         filesonly="true">
      <fileset dir="${out.dir}"
               includes="${splice.package}/loc/sysinfoMessages.properties,
                         ${splice.package}/loc/toolsmessages.properties,
                         ${splice.package}/info/tools.properties"/>
	  <fileset dir="${derby.tools.src.dir}"
               includes="${splice.package}/impl/tools/planexporter/resources/*.xsl"/>
      <fileset dir="${derby.jar.dir}/lists"
               includes="META-INF/**"/>
    </jar>
  </target>

<!-- - - - - - - - - - - - - - derbynet.jar target - - - - - - - - - - - -->

  <target name="derbynetjar" depends="setsanityname">

    <echo level="info" message="Beginning derbynet.jar ${sanity.name} build"/>

    <!-- purge lists directory to avoid unnecessary content from other jars -->
    <delete>
      <fileset dir="${derby.jar.dir}/lists" includes="**/*"/>
    </delete>

    <echo level="info" message=" creating net.list"/> 
    <java classname="com.splicemachine.derbyBuild.classlister" fork="yes">
      <jvmarg value="-Ddb2jdrda=true"/>
      <jvmarg value="-Doutputfile=${derby.jar.dir}/lists/derbynet.list"/>
      <arg value="${basedir}/tools/jar/net.properties"/>
      <classpath>
        <pathelement path="${out.dir}"/>
      </classpath>
    </java>

    <echo level="info" message=" creating new net.properties file "/>
    <antcall target="infowriter">
      <param name="info.buildnumber" value="${changenumber}"/>
      <param name="info.iname" value="Apache Derby Network Server"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.productfile" value="derbynet.jar"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/net.properties"/>
    </antcall>

    <!-- copy boilerplate common to db jar files -->
    <antcall target="meta-inf-common"/>

    <manifest file="${derby.jar.dir}/lists/smfnet.mf">
      <attribute name="Main-Class" value="com.splicemachine.db.drda.NetworkServerControl"/>
      <attribute name="Class-Path" value="derby.jar"/>
      	<attribute name="Sealed" value="true"/>
    	<section name="${splice.package}/impl/drda/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/impl/tools/sysinfo/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
      	<section name="${splice.package}/tools/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    	<section name="${splice.package}/loc/">
    	  <attribute name="Sealed" value="false"/>
    	</section>
    </manifest> 

    <delete file="${derby.jar.dir}/derbynet.jar"/>
    <jar destfile="${derby.jar.dir}/derbynet.jar"
         basedir="${out.dir}"
         includesfile="${derby.jar.dir}/lists/derbynet.list"
         compress="true"
         filesonly="true"
    	 manifest="${derby.jar.dir}/lists/smfnet.mf">
      <fileset dir="${out.dir}"
               includes="${splice.package}/loc/drda/**,
                         ${splice.package}/loc/sysinfoMessages.properties,
                         ${splice.package}/info/net.properties,
                         ${splice.package}/drda/server.policy"/>
      <fileset dir="${derby.jar.dir}/lists"
               includes="META-INF/**"/>
    </jar>

  </target>

<!-- - - - - - - - - - - - - - derbyclient.jar target - - - - - - - - -->

 <target name="derbyclientjar" depends="setsanityname,initjars">

    <echo level="info" message="Beginning derbyclient.jar ${sanity.name} build"/>

    <!-- purge lists directory to avoid unnecessary content from other jars -->
    <delete>
      <fileset dir="${derby.jar.dir}/lists" includes="**/*"/>
    </delete>

    <copy file="${basedir}/tools/jar/dnc.properties"
          tofile="${derby.jar.dir}/lists/dnc.properties"/>

    <java classname="com.splicemachine.derbyBuild.classlister" fork="yes">
      <jvmarg value="-Doutputfile=${derby.jar.dir}/lists/dnc.list"/>
      <arg value="${derby.jar.dir}/lists/dnc.properties"/>
      <classpath>
        <pathelement path="${out.dir}"/>
      </classpath>
    </java>

    <echo level="info" message=" creating new dnc.properties file "/>

    <mkdir dir="${out.dir}/${splice.package}/info/"/>
    <antcall target="infowriter">
      <param name="info.buildnumber" value="${changenumber}"/>
      <param name="info.iname" value="Apache Derby Network Client"/>
      <param name="info.ename" value="Apache Derby"/>
      <param name="info.productfile" value="codeline"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/dnc.properties"/>
    </antcall>

    <!-- copy boilerplate common to db jar files -->
    <antcall target="meta-inf-common"/>
    <antcall target="make-core-derbyjar-manifest">
      <param name="manifest.file" value="${derby.jar.dir}/lists/smfclient.mf"/>
    </antcall>

    <!-- declare the client driver for autoloading by the JDBC 4 DriverManager -->
    <antcall target="declare-autoloadable-driver">
      <param name="driver.name" value="com.splicemachine.db.jdbc.ClientDriver"/>
    </antcall>

    <delete file="${derby.jar.dir}/derbyclient.jar"/>

    <jar destfile="${derby.jar.dir}/derbyclient.jar"
         compress="true"
         filesonly="true"
         update="true"
    	 manifest="${derby.jar.dir}/lists/smfclient.mf">

        <fileset dir="${out.dir}" includesfile="${derby.jar.dir}/lists/dnc.list"/>

        <fileset dir="${out.dir}"
               includes="${splice.package}/info/dnc.properties,
                         ${splice.package}/loc/sysinfoMessages.properties,
                         ${splice.package}/loc/clientmessages*.properties"
               excludes="${splice.package}/loc/clientmessages_qq_PP_testOnly.properties"/>

        <fileset dir="${derby.jar.dir}/lists" includes="META-INF/**"/>
    </jar>
  </target>

<!-- - - - - - - - - - - - - - derbyrun.jar target  - - - - - - - - - -->
   
  <target name="derbyrunjar" depends="setsanityname,initjars">

    <echo level="info" message="Beginning derbyrun.jar build"/>

    <!-- purge lists directory to avoid unnecessary content from other jars -->
    <delete>
      <fileset dir="${derby.jar.dir}/lists" includes="**/*"/>
    </delete>

    <!-- copy boilerplate common to db jar files -->
    <antcall target="meta-inf-common"/>
    
    <manifest file="${derby.jar.dir}/lists/smfcmd.mf">
      <attribute name="Main-Class" value="com.splicemachine.db.iapi.tools.run"/>
      <attribute name="Class-Path" value="derby.jar derbyclient.jar derbytools.jar derbynet.jar"/>
    </manifest> 
 	
    <jar destfile="${derby.jar.dir}/derbyrun.jar"
         compress="true"
         filesonly="true"
         update="true"
    	 manifest="${derby.jar.dir}/lists/smfcmd.mf">
      <fileset dir="${out.dir}"
               includes="${splice.package}/iapi/tools/run.class"/>
      <fileset dir="${derby.jar.dir}/lists"
               includes="META-INF/LICENSE,META-INF/NOTICE"/>
    </jar>

  </target>


<!-- - - - - - - - - - - - - - locale jar targets - - - - - - - - - - - -->

  <target name="derbylocalejars" depends="initjars" unless="skip.locale">
 
    <!-- purge lists directory to avoid unnecessary content from other jars -->
    <delete>
      <fileset dir="${derby.jar.dir}/lists" includes="**/*"/>
    </delete>

    <!-- copy boilerplate common to db jar files -->
    <antcall target="meta-inf-common"/>

    <!-- call localejar for each locale -->

    <antcall target="localejar">
      <param name="locale.iname" value="cs"/>
      <param name="locale.ename" value="Czech/International [cs]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="de_DE"/>
      <param name="locale.ename" value="German/Germany [de_DE]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="es"/>
      <param name="locale.ename" value="Spanish/International [es]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="fr"/>
      <param name="locale.ename" value="French/International [fr]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="hu"/>
      <param name="locale.ename" value="Hungarian/International [hu]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="it"/>
      <param name="locale.ename" value="Italian/International [it]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="ja_JP"/>
      <param name="locale.ename" value="Japanese/Japan [ja_JP]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="ko_KR"/>
      <param name="locale.ename" value="Korean/Korea [ko_KR]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="pl"/>
      <param name="locale.ename" value="Polish/International [pl]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="pt_BR"/>
      <param name="locale.ename" value="Portuguese/Brazil [pt_BR]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="ru"/>
      <param name="locale.ename" value="Russian/International [ru]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="zh_CN"/>
      <param name="locale.ename" value="Simplified_Chinese/PR_China [zh_CN]"/>
    </antcall>
    <antcall target="localejar">
      <param name="locale.iname" value="zh_TW"/>
      <param name="locale.ename" value="Chinese/Taiwan_Traditional [zh_TW]"/>
    </antcall>
  </target>

  <target name="localejar">
 
    <echo level="info" message="Building derbyLocale_${locale.iname}.jar"/>

    <!-- generate new locale property file -->
    <antcall target="localeinfowriter">
      <param name="info.buildnumber" value="${changenumber}"/>
      <param name="info.iname" value="_${locale.iname}"/>
      <param name="info.ename" value="${locale.ename}"/>
      <param name="info.productfile" value="derbyLocale_${locale.iname}.jar"/>
      <param name="info.file" value="${out.dir}/${splice.package}/info/locale_${locale.iname}.properties"/>
    </antcall>   
    <jar destfile="${derby.jar.dir}/derbyLocale_${locale.iname}.jar"
         compress="true"
	 filesonly="true">
      <fileset dir="${out.dir}"
	       includes="${splice.package}/info/*_${locale.iname}.properties,
	                 ${splice.package}/loc/*_${locale.iname}.properties,
	                 ${splice.package}/loc/drda/*_${locale.iname}.properties"/>
      <fileset dir="${derby.jar.dir}/lists"
               includes="META-INF/LICENSE,META-INF/NOTICE"/>
    </jar>
  </target>
    
<!-- - - - - - - - - - - - db testing jar target - - - - - - - - - - -->

  <target name="derbytestingjar" depends="initjars">
      <zip destfile="${derby.jar.dir}/derbyTesting.jar" filesonly="true" compress="true">
      <fileset dir="${out.dir}"
               includes="com/splicemachine/dbTesting/**,SimpleApp*,com/splicemachine/db/impl/tools/ij/mt*.class,com/splicemachine/db/impl/tools/ij/SimpleCharStream.class,com/splicemachine/db/impl/drda/TestProto.class,com/splicemachine/db/impl/store/access/conglomerate/QualifierUtil.class,com/splicemachine/db/loc/m*_qq_PP_testOnly*"/>
    </zip>
  </target>

<!-- - - - - - - - - - - -  jar build helper targets  - - - - - - - - - -->

  <target name="setsanityname" depends="init,setissane,sanitynamesane,sanitynameinsane"/>

  <target name="sanitynamesane" if="is.sane">
    <property name="sanity.name" value="sane"/>
  </target>

  <target name="sanitynameinsane" unless="is.sane">
    <property name="sanity.name" value="insane"/>
  </target>

  <target name="cleanjars" depends="setsanityname">
    <delete dir="${jarsdist.dir}/${sanity.name}"/>
  </target>


   <!-- Targets used to specify the correct ant executable -->
   <target name="ant-exec-windows" unless="isUnix">
     <property name="ant.exec" value="ant.bat"/>
   </target>

   <target name="ant-exec-unix" unless="isWindows">
     <property name="ant.exec" value="ant"/>
   </target>


<!-- - - - - - - - - - - - - - targets for populating META-INF  - - - - - - - - - - - -->

  <!-- copy boilerplate common to db jar files -->

  <target name="meta-inf-common">
 
    <mkdir dir="${derby.jar.dir}/lists/META-INF"/>
    <copy todir="${derby.jar.dir}/lists/META-INF">
      <fileset dir="${basedir}" includes="LICENSE*,NOTICE*"/>
    </copy>

  </target>

  <!--
    Declare the jdbc driver for autoloading under JDBC 4.

    Parameters:

      driver.name   Class name of driver to be autoloaded by JDBC 4 DriverManager
  -->

  <target name="declare-autoloadable-driver">
 
    <mkdir dir="${derby.jar.dir}/lists/META-INF/services"/>
    <echo level="info" file="${derby.jar.dir}/lists/META-INF/services/java.sql.Driver">${driver.name}
</echo>

  </target>

<!-- =================================================================== -->
<!--                         Junit utility targets                       -->
<!-- =================================================================== -->

  <!-- Basic initialization for Junit tests (doesn't configure classpath). -->
  <target name="junit-init-nocp">
    <tstamp prefix="derby.junit">
      <format property="standardtime" pattern="yyyy-MM-dd hh:mm aa zzz"/>
    </tstamp>
    <property name="derby.junit.jvm" value="java"/>
    <property name="derby.junit.timestamp" value="${derby.junit.DSTAMP}_${derby.junit.TSTAMP}"/>
    <mkdir dir="junit_${derby.junit.timestamp}/testout"/>
  </target>

  <target name="junit-init" depends="junit-init-nocp">
    <!-- Set up the default classpath to use with JUnit tests. junit tasks
         should include the following entries in the order specified in 
         their nested classpath structure:
                <fileset dir="${db.junit.test.jars}" includes="*.jar"/>
                <pathelement path="${db.junit.classpath}"/>

         The preferences:
           1) User-specified db.junit.classpath
           2) Jars (insane preferred over sane)
           3) classes-directory

         Note also that the user's CLASSPATH environment variable is appended
         to the JUnit classpath, but in most cases Derby classes here will be
         shadowed by one of the above entries. It is recommended to not have
         any Derby classes in the CLASSPATH environment variable.
     -->

    <!-- See if the jars have been built
         (skipped if db.junit.classpath is set) -->
    <condition property="tmp.jars" value="${jarsdist.dir}/insane">
        <and>
            <available file="${jarsdist.dir}/insane/"/>
            <not>
                <isset property="derby.junit.classpath"/>
            </not>
        </and>
    </condition>
    <condition property="tmp.jars" value="${jarsdist.dir}/sane">
        <and>
            <available file="${jarsdist.dir}/sane/"/>
            <not>
                <isset property="derby.junit.classpath"/>
            </not>
        </and>
    </condition>

    <!-- Use classes-directory if not using jars and not overriden by user -->
    <condition property="derby.junit.classpath" value="${basedir}/classes">
        <not>
            <or>
                <isset property="derby.junit.classpath"/>
                <isset property="tmp.jars"/>
            </or>
        </not>
    </condition>

    <!-- Property to trigger informational message. -->
    <condition property="emit.junit.lowmem.jars">
        <isset property="tmp.jars"/>
    </condition>

    <!-- We have to set this to something, so point it to a src dir that
         always exists (with no jars). -->
    <condition property="derby.junit.test.jars" value="${basedir}/java/build">
        <not>
            <isset property="tmp.jars"/>
        </not>
    </condition>
    <condition property="derby.junit.test.jars" value="${tmp.jars}">
        <isset property="tmp.jars"/>
    </condition>

    <antcall target="emit-junit-classpath-jars"/>
    <antcall target="emit-junit-classpath"/>
  </target>

  <target name='emit-junit-classpath-jars' if='emit.junit.lowmem.jars'>
        <echo message="Running with jars: ${derby.junit.test.jars}" level='info'/>
        <echo message="CLASSPATH (environment variable): ${env.CLASSPATH}" level='info'/>
  </target>

  <target name='emit-junit-classpath' unless='emit.junit.lowmem.jars'>
        <echo message="Running with classes or user specified classpath: ${derby.junit.classpath}" level='info'/>
        <echo message="CLASSPATH (environment variable): ${env.CLASSPATH}" level='info'/>
   </target>

  <target name="junit-sysinfo" depends="junit-init">
    <java classname="com.splicemachine.db.tools.sysinfo"
          output="junit_${derby.junit.timestamp}/sysinfo.txt">
        <classpath path="${out.dir}"/>
    </java>
  </target>

  <target
      name="junit-clean"
      description="Remove the output produced by the JUnit tests."
  >
    <delete includeEmptyDirs="true">
      <fileset dir="${basedir}" includes="junit*/**"/>
    </delete>
  </target>
	  <!--
	  Autoloading tests need to be run in a separate JVM thus
	  as a separate test. This target runs the test a number of 
	  times, each with a different setting for jdbc.drivers.
	  When run with jar files on java SE 6/JDBC 4 the run without
	  setting jdbc.drivers will test that autoloading from
	  the manifest file works. The settings with jdbc.drivers
	  test the auto-loading in non JDBC 4 environments and
	  that setting jdbc.drivers in JDBC 4 does not cause issues.
	   -->
	
  <target name="junit-core" depends="junit-init">
    <condition property="derbyTesting.oldReleasePath" value="">
      <not>
        <isset property="derbyTesting.oldReleasePath"/>
      </not>
    </condition>
         <!--
         Specifying max heap size (maxmemory) for JVMs spawned by this
         target, since the default max heap size on most systems is
         currently too low for some of the test suites. See DERBY-2988.
         -->
  	 <junit printsummary="on"
           fork="yes" forkmode="perTest"
           jvm="${derby.junit.jvm}" maxmemory="512m"
           showoutput="yes"
           dir="junit_${derby.junit.timestamp}"
           tempdir="junit_${derby.junit.timestamp}"
  	 	   errorproperty="tests.failed"
  	       failureproperty="tests.failed">
      <sysproperty key="derbyTesting.oldReleasePath" value="${derbyTesting.oldReleasePath}"/>
      <!-- Use the system property below to debug lacking java security permissions -->
<!--      <sysproperty key="java.security.debug" value="access:failure"/> -->
      <formatter type="xml"/>
<test name="com.splicemachine.dbTesting.junit.EnvTest"
    todir="junit_${derby.junit.timestamp}"/>  	 	
<test name="com.splicemachine.dbTesting.functionTests.tests.derbynet._Suite"
	todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.functionTests.tests.tools._Suite"
  	todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.functionTests.tests.lang._Suite"
	todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.functionTests.tests.jdbcapi._Suite"
	todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.functionTests.tests.store._Suite"
	todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.functionTests.tests.engine._Suite"
	todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.unitTests.junit._Suite"
    todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.functionTests.tests.upgradeTests._Suite"
  	todir="junit_${derby.junit.timestamp}"/>
<test name="com.splicemachine.dbTesting.functionTests.suites.EncryptionSuite"
	todir="junit_${derby.junit.timestamp}"/>

      <classpath>
            <fileset dir="${derby.junit.test.jars}" includes="*.jar"/>
     	    <pathelement path="${derby.junit.classpath}"/>
            <!-- ant 1.7 finds junit.jar if it is on the classpath of the <junit> task -->
            <pathelement location="${javatools.dir}/junit.jar"/>
      </classpath>
    </junit>
  </target>

  <!--
    Run the simplest form of any system test. Provides a sanity
    check that the functionality works. This target is not intended
    to have long running tests, just enough to ensure the test works
    and Derby works with the test.
  -->
  <target name="junit-system-mini" depends="junit-init">
        <!--
             Specifying max heap size (maxmemory) for JVMs spawned by this
             target, since the default max heap size on most systems is
             currently too low for some of the test suites. See DERBY-2988.
         -->
        <junit printsummary="on"
               fork="yes" forkmode="perTest"
               jvm="${derby.junit.jvm}" maxmemory="512m"
               showoutput="yes"
               dir="junit_${derby.junit.timestamp}"
               tempdir="junit_${derby.junit.timestamp}"
               errorproperty="tests.failed"
               failureproperty="tests.failed">
          <formatter type="xml"/>

    <test name="com.splicemachine.dbTesting.system.oe.test.OETest"
        todir="junit_${derby.junit.timestamp}"/>
          <classpath>
               <fileset dir="${derby.junit.test.jars}" includes="*.jar"/>
               <pathelement path="${derby.junit.classpath}"/>
               <pathelement location="${javatools.dir}/junit.jar"/>
          </classpath>
         </junit>
  </target>
	  
  <target name="junit-jdbc4" depends="junit-init">
    <antcall target="junit-jdbc4-workhorse"/>
  </target>

  <!--
    Only execute jdbc4 suite if we have a pointer to a 1.6 VM.
    This target is called by junit-jdbc after reading the VM level.
  -->
  <target name="junit-jdbc4-workhorse" depends="junit-init">
  	 <junit printsummary="on"
           fork="yes" forkmode="perTest"
           showoutput="yes"
           dir="junit_${derby.junit.timestamp}"
           tempdir="junit_${derby.junit.timestamp}"
  	 	   errorproperty="tests.failed"
  	       failureproperty="tests.failed">
      <formatter type="xml"/>
  	 	
      <test name="com.splicemachine.dbTesting.functionTests.tests.jdbc4._Suite"
      	todir="junit_${derby.junit.timestamp}"/>
        <classpath>
            <fileset dir="${derby.junit.test.jars}" includes="*.jar"/>
       	    <pathelement path="${derby.junit.classpath}"/>
            <pathelement location="${javatools.dir}/junit.jar"/>
        </classpath>
      </junit>	
  </target>

	  
  <!-- low memory suite runs with 16MB heap  -->
  <target name="junit-lowmem"  depends="junit-init">
  	 <junit printsummary="on"
           fork="yes" forkmode="perTest"
           jvm="${derby.junit.jvm}" maxmemory="16m"
           showoutput="yes"
           dir="junit_${derby.junit.timestamp}"
           tempdir="junit_${derby.junit.timestamp}"
  	 	   errorproperty="tests.failed"
  	       failureproperty="tests.failed">
      <formatter type="xml"/>
  	 	
      <test name="com.splicemachine.dbTesting.functionTests.tests.memory._Suite"
      	todir="junit_${derby.junit.timestamp}"/>
        <classpath>
            <fileset dir="${derby.junit.test.jars}" includes="*.jar"/>
       	    <pathelement path="${derby.junit.classpath}"/>
            <pathelement location="${javatools.dir}/junit.jar"/>
        </classpath>
      </junit>	
  </target>

  <!-- Runs Derby's JMX tests -->
  <target name="junit-jmx" depends="junit-init">
    <junit  printsummary="on"
            fork="yes" forkmode="once"
            showoutput="yes"
            dir="junit_${derby.junit.timestamp}"
            tempdir="junit_${derby.junit.timestamp}"
            errorproperty="tests.failed"
            failureproperty="tests.failed">
        <formatter type="xml"/>

        <test name="com.splicemachine.dbTesting.functionTests.tests.management._Suite"
              todir="junit_${derby.junit.timestamp}"/>

        <classpath>
            <fileset dir="${derby.junit.test.jars}" includes="*.jar"/>
            <pathelement path="${derby.junit.classpath}"/>
            <pathelement location="${javatools.dir}/junit.jar"/>
        </classpath>
    </junit>
  </target>

  <!-- Run the package private tests against the classes directories. -->
  <target name="junit-pptesting" depends="junit-init-nocp">
    <junit  printsummary="on"
            fork="yes" forkmode="once"
            showoutput="yes"
            dir="junit_${derby.junit.timestamp}"
            tempdir="junit_${derby.junit.timestamp}"
            errorproperty="tests.failed"
            failureproperty="tests.failed">
        <formatter type="xml"/>

        <test name="org.apache.derby.PackagePrivateTestSuite"
                todir="junit_${derby.junit.timestamp}"/>

        <classpath>
            <pathelement location="${out.pptesting.dir}"/>
            <pathelement location="${out.dir}"/>
            <pathelement location="${javatools.dir}/junit.jar"/>
        </classpath>
    </junit>
  </target>

  <!-- Run a single junit test or suite -->
  <target name="junit-single" depends="junit-init">
    <condition property="noTestclassSet" value="">
      <not>
        <isset property="derby.junit.testclass"/>
      </not>
    </condition>
    <fail if="noTestclassSet">No testclass selected! Set property derby.junit.testclass</fail>
    <junit printsummary="on"
           fork="yes" forkmode="perTest"
           jvm="${derby.junit.jvm}" maxmemory="512m"
           showoutput="yes"
           dir="junit_${derby.junit.timestamp}"
           tempdir="junit_${derby.junit.timestamp}"
           errorproperty="tests.failed"
           failureproperty="tests.failed">
      <formatter type="xml"/>
      
      <test name="${derby.junit.testclass}" todir="junit_${derby.junit.timestamp}"/>

      <classpath>
            <fileset dir="${derby.junit.test.jars}" includes="*.jar"/>
     	    <pathelement path="${derby.junit.classpath}"/>
            <pathelement location="${javatools.dir}/junit.jar"/>
      </classpath>
    </junit>
      
  </target>
   
  <target
      name="junit-all"
      depends="junit-core,junit-jdbc4,junit-jmx,junit-lowmem"
      description="Run the JUnit tests."
  />
 
  <target name="junitreport" depends="junit-all,junit-html"/>
  
  <!-- Convert the junit xml format to HTML -->
  <target name="junit-html" depends="junit-sysinfo">
    <junitreport todir="junit_${derby.junit.timestamp}">
      <fileset dir="junit_${derby.junit.timestamp}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="junit_${derby.junit.timestamp}"/>
    </junitreport>

    <!-- fix up unterminated elements in overview-frame.html -->
    <replace token="href=&quot;stylesheet.css&quot;&gt;"
             value="href=&quot;stylesheet.css&quot;/&gt;&lt;/META&gt;"
             file="junit_${derby.junit.timestamp}/overview-frame.html"/>
    <replace token="Unit Test Results"
             value="Apache Derby Test Results - ${derby.junit.standardtime}&lt;br&gt;JVM: ${java.vm.vendor} ${java.vm.version}"
             file="junit_${derby.junit.timestamp}/overview-summary.html"/>

    <xslt style="${basedir}/tools/ant/xsl/sysinfo_junitreport.xsl"
          in="junit_${derby.junit.timestamp}/overview-frame.html"
          out="junit_${derby.junit.timestamp}/overview-frame2.html"/>
    <move file="junit_${derby.junit.timestamp}/overview-frame2.html"
          tofile="junit_${derby.junit.timestamp}/overview-frame.html"/>
  	
  	<fail if="tests.failed">Tests Failed!</fail>
  </target>

  <target name="l10ncheck"> 
    <ant dir="${derbysrc.dir}/../tools/l10n"/>
  </target>  
	
	<!-- Run the junit-all target with the classpath set to include
	     the main db jar files. Requires that the caller have
	     junit.jar in CLASSPATH due to some bug in ant that is
	     fixed in version 1.7.
	-->
	<target name="junit-all-codeline-jars"
	    depends="junit-all-codeline-jars-set-properties,junit-all">
		<fail if="tests.failed">Tests Failed!</fail>
	</target>

    <!-- Run the junit-system-mini target with the classpath set to include
         the main db jar files. Requires that the caller have
         junit.jar in CLASSPATH due to some bug in ant that is
         fixed in version 1.7.
    -->
    <target name="junit-system-mini-codeline-jars"
        depends="junit-all-codeline-jars-set-properties,junit-system-mini">
        <fail if="tests.failed">Tests Failed!</fail>
    </target>	
	
    <!-- Run the junit-single target with the classpath set to include
         the main db jar files. Requires that the caller have
         junit.jar in CLASSPATH due to some bug in ant that is
         fixed in version 1.7.
    -->
    <target name="junit-single-codeline-jars"
        depends="junit-all-codeline-jars-set-properties,junit-single">
        <fail if="tests.failed">Tests Failed!</fail>
    </target>

	<target name="junit-all-codeline-jars-set-properties" depends="setsanityname">
		<property name="derby.jar.base" value="${jarsdist.dir}/${sanity.name}"/>
	    <property name="derby.junit.classpath"
	        value="${derby.jar.base}/derbyTesting.jar:${derby.jar.base}/derbynet.jar:${derby.jar.base}/derbytools.jar:${derby.jar.base}/derbyclient.jar"/>
	</target>
	
	
</project>