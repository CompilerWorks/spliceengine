src//main/java/com/splicemachine/derby/ddl/ZookeeperDDLWatcher.java:                byte[] data = ZkUtils.getData(SpliceConstants.zkSpliceDDLOngoingTransactionsPath + "/" + changeId);
src//main/java/com/splicemachine/derby/ddl/ZookeeperDDLWatcher.java:                killDDLTransaction(entry.getKey());
src//main/java/com/splicemachine/derby/ddl/ZookeeperDDLWatcher.java:            Op op = Op.create(SpliceConstants.zkSpliceDDLOngoingTransactionsPath+"/"+change.getChangeId()+"/"+id,new byte[]{},ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL);
src//main/java/com/splicemachine/derby/ddl/ZookeeperDDLWatcher.java:    private void killDDLTransaction(String changeId) {
src//main/java/com/splicemachine/derby/hbase/AbstractSpliceIndexObserver.java:            region = TransactionalRegions.get(e.getEnvironment().getRegion());
src//main/java/com/splicemachine/derby/hbase/AbstractSpliceIndexObserver.java:    protected void mutate(RegionCoprocessorEnvironment rce, KVPair mutation, TxnView txn) throws IOException {
src//main/java/com/splicemachine/derby/hbase/AbstractSpliceIndexObserver.java:        WriteContextFactory<TransactionalRegion> ctxFactory = WriteContextFactoryManager.getWriteContext(conglomId);
src//main/java/com/splicemachine/derby/hbase/AbstractSpliceIndexObserver.java:            WriteContext context = ctxFactory.createPassThrough(null, txn, region, 1, null);
src//main/java/com/splicemachine/derby/hbase/RegionWritePipeline.java:                               WriteContextFactory<TransactionalRegion> ctxFactory,
src//main/java/com/splicemachine/derby/hbase/RegionWritePipeline.java:                               TransactionalRegion txnRegion,
src//main/java/com/splicemachine/derby/hbase/RegionWritePipeline.java:    public BulkWriteResult submitBulkWrite(TxnView txn,
src//main/java/com/splicemachine/derby/hbase/RegionWritePipeline.java:            context = ctxFactory.create(writeBufferFactory, txn, txnRegion, toWrite.getSize(), rce);
src//main/java/com/splicemachine/derby/hbase/RegionWritePipeline.java:    public boolean isDependent(TxnView txn) throws IOException, InterruptedException {
src//main/java/com/splicemachine/derby/hbase/RegionWritePipeline.java:        return ctxFactory.hasDependentWrite(txn);
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:    @Override public Txn getTxn() { return null; } //task is non-transactional
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:            Txn txn = TransactionLifecycle.getLifecycleManager().beginTransaction();
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:                mrs = getRegionScanner(txn,context);
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:                txn.commit();
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:                txn.rollback();
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:    private MeasuredRegionScanner getRegionScanner(Txn txn,SegmentedRollForward.Context context) throws IOException {
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:        TxnSupplier txnSupplier = TransactionStorage.getTxnSupplier();
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:        IgnoreTxnCacheSupplier ignoreTxnSupplier = TransactionStorage.getIgnoreTxnSupplier();
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:        ReadResolver resolver = SynchronousReadResolver.getResolver(region, txnSupplier, TransactionalRegions.getRollForwardStatus(),SpliceBaseIndexEndpoint.independentTrafficControl,true);
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:        DataStore dataStore = TxnDataStore.getDataStore();
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:        TxnFilter filer = new UpdatingTxnFilter(region.getTableDesc().getNameAsString(),
src//main/java/com/splicemachine/derby/hbase/RollForwardTask.java:                txnSupplier,ignoreTxnSupplier,txn,resolver,dataStore,context);
src//main/java/com/splicemachine/derby/hbase/SkeletonExceptionTranslator.java:    public boolean needsTransactionalRetry(Throwable t) {
src//main/java/com/splicemachine/derby/hbase/SpliceBaseDerbyCoprocessor.java:        TransactionalRegions.setActionFactory(RollForwardAction.FACTORY);
src//main/java/com/splicemachine/derby/hbase/SpliceBaseDerbyCoprocessor.java:        TransactionalRegions.setTrafficControl(SpliceBaseIndexEndpoint.independentTrafficControl);
src//main/java/com/splicemachine/derby/hbase/SpliceBaseIndexEndpoint.java:    private TransactionalRegion region;
src//main/java/com/splicemachine/derby/hbase/SpliceBaseIndexEndpoint.java:        final WriteContextFactory<TransactionalRegion> factory;
src//main/java/com/splicemachine/derby/hbase/SpliceBaseIndexEndpoint.java:                    region = TransactionalRegions.get(rce.getRegion());
src//main/java/com/splicemachine/derby/hbase/SpliceBaseIndexEndpoint.java:                    region = TransactionalRegions.nonTransactionalRegion(rce.getRegion());
src//main/java/com/splicemachine/derby/hbase/SpliceBaseIndexEndpoint.java:        	dependent = regionWritePipeline.isDependent(bulkWrites.getTxn());
src//main/java/com/splicemachine/derby/hbase/SpliceBaseIndexEndpoint.java:                    BulkWriteResult submitResult = writePipeline.submitBulkWrite(bulkWrites.getTxn(), bulkWrite,indexWriteBufferFactory, writePipeline.getRegionCoprocessorEnvironment());
src//main/java/com/splicemachine/derby/hbase/SpliceBaseOperationRegionScanner.java:                                        TransactionalRegion txnRegion) throws IOException {
src//main/java/com/splicemachine/derby/hbase/SpliceBaseOperationRegionScanner.java:						impl.marshallTransaction(soi.getTxn(),soi);
src//main/java/com/splicemachine/derby/hbase/SpliceBaseOperationRegionScanner.java:										region,txnRegion,scan, activation, statement, impl.getLcc(),false,topOperation,spliceRuntimeContext,
src//main/java/com/splicemachine/derby/hbase/SpliceBaseOperationRegionScanner.java:										soi.getTxn());
src//main/java/com/splicemachine/derby/hbase/SpliceBaseOperationRegionScanner.java:												reporter.report(opStats,spliceRuntimeContext.getTxn());
src//main/java/com/splicemachine/derby/hbase/SpliceDriverShutdownRunnable.java:                TransactionTimestamps.getTimestampSource().shutdown();
src//main/java/com/splicemachine/derby/hbase/SpliceObserverInstructions.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/hbase/SpliceObserverInstructions.java:        return spliceRuntimeContext.getTxn();
src//main/java/com/splicemachine/derby/hbase/SpliceObserverInstructions.java:    public void setTxn(Txn txn) {
src//main/java/com/splicemachine/derby/hbase/SpliceObserverInstructions.java:        this.spliceRuntimeContext.setTxn(txn);
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:    private volatile TransactionalRegion txnRegion;
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:                SpliceOperationRegionObserver.this.txnRegion = TransactionalRegions.get(region);
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:        if(txnRegion!=null) {
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:            txnRegion.close();
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:            txnRegion=null; //dereference to avoid memory leakage
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:            return super.postScannerOpen(e, scan, derbyFactory.getOperationRegionScanner(s,scan, region,getTxnRegion(region)));
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:    private TransactionalRegion getTxnRegion(HRegion region) throws IOException {
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:        TransactionalRegion tr = txnRegion; //assign to local variable to avoid double-reading a volatile variable
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:            tr = TransactionalRegions.get(region);
src//main/java/com/splicemachine/derby/hbase/SpliceOperationRegionObserver.java:            txnRegion = tr;
src//main/java/com/splicemachine/derby/iapi/catalog/StatementHistoryDescriptor.java:    private long transactionId;
src//main/java/com/splicemachine/derby/iapi/catalog/StatementHistoryDescriptor.java:                                      long transactionId,
src//main/java/com/splicemachine/derby/iapi/catalog/StatementHistoryDescriptor.java:        this.transactionId = transactionId;
src//main/java/com/splicemachine/derby/iapi/catalog/StatementHistoryDescriptor.java:    public long getTransactionId() {
src//main/java/com/splicemachine/derby/iapi/catalog/StatementHistoryDescriptor.java:        return transactionId;
src//main/java/com/splicemachine/derby/iapi/sql/execute/ConversionResultSet.java:        TxnView txn = spliceRuntimeContext.getTxn();
src//main/java/com/splicemachine/derby/iapi/sql/execute/ConversionResultSet.java:        if(txn ==null)
src//main/java/com/splicemachine/derby/iapi/sql/execute/ConversionResultSet.java:            spliceRuntimeContext.setTxn(((SpliceTransactionManager)activation.getTransactionController()).getActiveStateTxn());
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:    private TxnView txn;
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:    private StatementInfo initStatmentInfo(TxnView txn, StatementInfo stmtInfo, SpliceOperationContext opCtx) throws StandardException {
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:            stmtInfo = new StatementInfo(sql, user, txn,
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:            stmtInfo = new StatementInfo(sql, user, txn,
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:                long txnId = ((SpliceTransactionManager) activation.getTransactionController()).getRawTransaction().getTxnInformation().getTxnId();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:                String jobName = topOperation.getName() + " rs " + resultSetNumber + " <" + txnId + ">";
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:    public SpliceRuntimeContext sinkOpen(TxnView txn, boolean showStatementInfo) throws StandardException, IOException {
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        SpliceRuntimeContext runtimeContext = new SpliceRuntimeContext(txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:            SpliceOperationContext operationContext = SpliceOperationContext.newContext(activation, txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:                statementInfo = initStatmentInfo(txn, statementInfo, operationContext);
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        TxnView t;
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:            //elevate the transaction
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:            t = elevateTransaction();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:            t = getTransaction();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:                TxnView recordTxn = txn != null ? txn : getTransaction();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:                SpliceDriver.driver().getStatementManager().completedStatement(statementInfo, activation.isTraced(), recordTxn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:    private TxnView elevateTransaction() throws StandardException {
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        TransactionController transactionExecute = activation.getLanguageConnectionContext().getTransactionExecute();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        Transaction rawStoreXact = ((TransactionManager) transactionExecute).getRawStoreXact();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        BaseSpliceTransaction rawTxn = (BaseSpliceTransaction) rawStoreXact;
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        TxnView currentTxn = rawTxn.getActiveStateTxn();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        if (!currentTxn.allowsWrites()) {
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:                return spliceRawTxn.elevate(dmlTopOperation.getDestinationTable());
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:                return spliceRawTxn.elevate("xplain".getBytes());
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:    private TxnView getTransaction() throws StandardException {
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        TransactionController transactionExecute = activation.getLanguageConnectionContext().getTransactionExecute();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        Transaction rawStoreXact = ((TransactionManager) transactionExecute).getRawStoreXact();
src//main/java/com/splicemachine/derby/iapi/sql/execute/OperationResultSet.java:        return ((BaseSpliceTransaction) rawStoreXact).getActiveStateTxn();
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:		public TxnView getTxn() { return txn; }
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:    public static SpliceOperationContext newContext(Activation a,TxnView txn){
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:				if(txn==null){
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:						TransactionController te = a.getLanguageConnectionContext().getTransactionExecute();
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:						txn = ((SpliceTransactionManager) te).getRawTransaction().getActiveStateTxn();
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:                null,false,null, new SpliceRuntimeContext(txn),txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:    public TransactionalRegion getTransactionalRegion() {
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceOperationContext.java:        return txnRegion;
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:    private transient TxnView txn;
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:    public SpliceRuntimeContext(TxnView txn) {
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:				this(SpliceDriver.driver().getTempTable(), SpliceKryoRegistry.getInstance(),txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:		public SpliceRuntimeContext(TempTable tempTable,KryoPool kryoPool,TxnView txn){
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:		public static SpliceRuntimeContext generateLeftRuntimeContext(TxnView txn,int resultSetNumber) {
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:				SpliceRuntimeContext spliceRuntimeContext = new SpliceRuntimeContext(txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:		public static SpliceRuntimeContext generateRightRuntimeContext(TxnView txn,int resultSetNumber) {
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:				SpliceRuntimeContext spliceRuntimeContext = new SpliceRuntimeContext(txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:		public static SpliceRuntimeContext generateSinkRuntimeContext(TxnView txn,boolean firstStepInMultistep) {
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:				SpliceRuntimeContext spliceRuntimeContext = new SpliceRuntimeContext(txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:        return txn;
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:    public void setTxn(TxnView txn) {
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:				SpliceRuntimeContext copy = new SpliceRuntimeContext(txn);
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:        copy.txn = txn;
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:        TransactionOperations.getOperationFactory().writeTxn(txn,out);
src//main/java/com/splicemachine/derby/iapi/sql/execute/SpliceRuntimeContext.java:        this.txn = TransactionOperations.getOperationFactory().readTxn(in);
src//main/java/com/splicemachine/derby/iapi/storage/ScanBoundary.java:    Scan buildScan(Txn txn, byte[] start, byte[] finish);
src//main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java:    public LanguageConnectionContext generateLanguageConnectionContext(TxnView txn,
src//main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java:        TransactionController tc=((SpliceAccessManager)af).marshallTransaction(cm,txn);
src//main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java:    public LanguageConnectionContext generateLanguageConnectionContext(TxnView txn,ContextManager cm,String user,String drdaID,String dbname) throws StandardException{
src//main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java:        TransactionController tc=((SpliceAccessManager)af).marshallTransaction(cm,txn);
src//main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java:            TransactionController tc=af.getTransaction(ContextService.getFactory().getCurrentContextManager());
src//main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java:            ((SpliceTransaction)((SpliceTransactionManager)tc).getRawTransaction()).elevate("boot".getBytes());
src//main/java/com/splicemachine/derby/impl/db/SpliceDatabase.java:                    TransactionLifecycle.getLifecycleManager().enterRestoreMode();
src//main/java/com/splicemachine/derby/impl/job/altertable/AlterTableJob.java:        return getClass().getSimpleName()+"-"+ddlChange.getTentativeDDLDesc().getClass().getSimpleName()+"-"+ddlChange.getTxn().getTxnId();
src//main/java/com/splicemachine/derby/impl/job/altertable/AlterTableJob.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/impl/job/altertable/AlterTableJob.java:        return ddlChange.getTxn();
src//main/java/com/splicemachine/derby/impl/job/altertable/AlterTableTask.java:                    contextFactory.dropIndex(indexConglomId, ddlChange.getTxn());
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateJob.java:        return getClass().getSimpleName()+"-"+ddlChange.getTxn();
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateJob.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateJob.java:        return ddlChange.getTxn();
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:            Txn txn = getTxn();
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:            Scan scan = SpliceUtils.createScan(txn);
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:            TxnView txnView = new DDLTxnView(txn, this.demarcationTimestamp);
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:            builder.region(TransactionalRegions.get(region)).scan(scan).scanner(mrs).transaction(txnView).
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:            this.runtimeContext = new SpliceRuntimeContext(ddlChange.getTxn());
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:            writeBuffer = SpliceDriver.driver().getTableWriter().writeBuffer(newTableLocation, getTxn(),
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:    protected Txn beginChildTransaction(TxnView parentTxn, TxnLifecycleManager tc) throws IOException {
src//main/java/com/splicemachine/derby/impl/job/altertable/PopulateConglomerateTask.java:        return tc.beginChildTransaction(parentTxn, Long.toString(ddlChange.getTentativeDDLDesc().getConglomerateNumber()).getBytes());
src//main/java/com/splicemachine/derby/impl/job/coprocessor/CoprocessorJob.java:		 * @return the destination table to write to, or {@code null} if there is no ultimate <em>transactional</em>
src//main/java/com/splicemachine/derby/impl/job/coprocessor/RegionTask.java:		void setParentTxnInformation(TxnView txn);
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:    /* Transaction that is adding a FK */
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:    private final TxnView txn;
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:    public FkJob(HTableInterface table, TxnView txn, long targetConglomerateNumber, DDLChangeType ddlChangeType,
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:        FkTask task = new FkTask(getJobId(), txn, jobTargetConglomerateNumber, ddlChangeType, ddlDescriptor);
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:        return "CreateFkJob-" + txn.getTxnId();
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/impl/job/fk/FkJob.java:        return txn;
src//main/java/com/splicemachine/derby/impl/job/fk/FkJobSubmitter.java:    private final SpliceTransactionManager transactionManager;
src//main/java/com/splicemachine/derby/impl/job/fk/FkJobSubmitter.java:                          SpliceTransactionManager transactionManager,
src//main/java/com/splicemachine/derby/impl/job/fk/FkJobSubmitter.java:        this.transactionManager = transactionManager;
src//main/java/com/splicemachine/derby/impl/job/fk/FkJobSubmitter.java:            TxnView activeStateTxn = transactionManager.getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/job/fk/FkJobSubmitter.java:            FkJob parentJob = new FkJob(parentHTable, activeStateTxn, referencedConglomerateId, ddlChangeType, descriptor);
src//main/java/com/splicemachine/derby/impl/job/fk/FkJobSubmitter.java:            FkJob childJob = new FkJob(childHTable, activeStateTxn, backingIndexConglomerateIds, ddlChangeType, descriptor);
src//main/java/com/splicemachine/derby/impl/job/fk/FkTask.java:    private TxnView txn;
src//main/java/com/splicemachine/derby/impl/job/fk/FkTask.java:    public FkTask(String jobId, TxnView txn, long jobTargetConglomerateNumber, DDLChangeType ddlChangeType,
src//main/java/com/splicemachine/derby/impl/job/fk/FkTask.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/job/fk/FkTask.java:                DDLChange ddlChange = new DDLChange(txn, ddlChangeType, ddlDescriptor);
src//main/java/com/splicemachine/derby/impl/job/fk/FkTask.java:        out.writeObject(txn);
src//main/java/com/splicemachine/derby/impl/job/fk/FkTask.java:        this.txn = (TxnView) in.readObject();
src//main/java/com/splicemachine/derby/impl/job/index/CreateIndexJob.java:        TxnView txn = ddlChange.getTxn();
src//main/java/com/splicemachine/derby/impl/job/index/CreateIndexJob.java:        return "indexJob-"+txn.getTxnId();
src//main/java/com/splicemachine/derby/impl/job/index/CreateIndexJob.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/impl/job/index/CreateIndexJob.java:        return ddlChange.getTxn();
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexJob.java:    private final Txn txn;
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexJob.java:                            Txn txn,
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexJob.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexJob.java:        return "indexJob-"+txn.getTxnId();
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexJob.java:    public Txn getTxn() {
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexJob.java:        return txn;
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:        Scan regionScan = SpliceUtils.createScan(getTxn());
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:								writeBuffer = SpliceDriver.driver().getTableWriter().writeBuffer(indexTableLocation,getTxn(),metricFactory);
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:        DDLTxnView demarcationPoint = new DDLTxnView(getTxn(), this.demarcationPoint);
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:        TransactionalRegion transactionalRegion = TransactionalRegions.get(region);
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:        TxnFilter packed = transactionalRegion.packedFilter(demarcationPoint, predicateFilter, false);
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:        transactionalRegion.close();
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:						SpliceDriver.driver().getTaskReporter().report(stats,getTxn());
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:    protected Txn beginChildTransaction(TxnView parentTxn, TxnLifecycleManager tc) throws IOException {
src//main/java/com/splicemachine/derby/impl/job/index/PopulateIndexTask.java:        return tc.beginChildTransaction(parentTxn, Long.toString(this.indexConglomId).getBytes());
src//main/java/com/splicemachine/derby/impl/job/operation/MultiScanOperationJob.java:		private TxnView txn;
src//main/java/com/splicemachine/derby/impl/job/operation/MultiScanOperationJob.java:                                 TxnView txn,
src//main/java/com/splicemachine/derby/impl/job/operation/MultiScanOperationJob.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/job/operation/MultiScanOperationJob.java:            task.setParentTxnInformation(instructions.getTxn());
src//main/java/com/splicemachine/derby/impl/job/operation/MultiScanOperationJob.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/impl/job/operation/MultiScanOperationJob.java:        return txn;
src//main/java/com/splicemachine/derby/impl/job/operation/OperationJob.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/impl/job/operation/OperationJob.java:        return instructions.getTxn();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:		private SpliceTransactionResourceImpl transactionResource;
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:        sinkTask.setParentTxnInformation(getParentTxn());
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:				 * during, say, transaction creation, then we are sufficiently initialized
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:				 * 2. create the child transaction
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:        TransactionalRegion txnRegion = TransactionalRegions.get(region);
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:						transactionResource = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:						transactionResource.prepareContextManager();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            setupTransaction();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            transactionResource.marshallTransaction(getTxn(), instructions);
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            activation = instructions.getActivation(transactionResource.getLcc());
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:                Txn txn = getTxn();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:                if(!txn.allowsWrites()){
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:                    elevateTransaction("xplain".getBytes());
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            instructions.setTxn(getTxn());
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            SpliceTransactionManager stm = (SpliceTransactionManager)transactionResource.getLcc().getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            ((SpliceTransactionView)stm.getRawTransaction()).setTxn(getTxn());
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            opContext = new SpliceOperationContext(region, txnRegion,
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:										transactionResource.getLcc(),
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:										true,instructions.getTopOperation(), spliceRuntimeContext,getTxn());
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            closeQuietly(prepared, transactionResource, opContext);
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            txnRegion.close();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:		protected void closeQuietly(boolean prepared, SpliceTransactionResourceImpl impl, SpliceOperationContext opContext)  {
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            Txn txn = getTxn();
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            OperationSink opSink = OperationSinkFactory.create((SinkingOperation) op, getTaskId(), txn, op.getStatementId(), waitTimeNs);
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:            resetContext(transactionResource,true);
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:		protected Txn beginChildTransaction(TxnView parentTxn, TxnLifecycleManager tc) throws IOException {
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:		             * (DB-949)Insert operations should use an Additive transaction, so that internal WW conflicts will
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:        Txn txn = tc.beginChildTransaction(parentTxn, parentTxn.getIsolationLevel(), additive, table);
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:        return txn;
src//main/java/com/splicemachine/derby/impl/job/operation/SinkTask.java:    private void resetContext(SpliceTransactionResourceImpl impl, boolean prepared) {
src//main/java/com/splicemachine/derby/impl/job/scheduler/BaseJobControl.java:						TxnView parentTxn = job.getTxn();
src//main/java/com/splicemachine/derby/impl/job/scheduler/BaseJobControl.java:            if(parentTxn!=null){
src//main/java/com/splicemachine/derby/impl/job/scheduler/BaseJobControl.java:								//set a new transaction on the entry
src//main/java/com/splicemachine/derby/impl/job/scheduler/BaseJobControl.java:                newTaskData.getFirst().setParentTxnInformation(parentTxn);
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java:				TxnView jobTxn = job.getTxn();
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java:				//tasks which write to TEMP are not writeable transactions--they are read-only
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java://				if(jobTxn!=null)
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java:						submitTransactionalTasks(jobTxn,control,tasks,table,destTable);
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java://						submitNonTransactionalTasks(control,tasks,table);
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java:    private void submitTransactionalTasks(TxnView parentTxn,
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java:            task.setParentTxnInformation(parentTxn);
src//main/java/com/splicemachine/derby/impl/job/scheduler/DistributedJobScheduler.java:		private void submitNonTransactionalTasks(BaseJobControl control, Map<? extends RegionTask, Pair<byte[], byte[]>> tasks, HTableInterface table) throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:    private Txn txn;
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:				Txn txn = getTxn();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:				if(txn==null) return true;
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:						txn.rollback();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:				Txn txn = getTxn();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:				if(txn==null) return true;
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:						txn.commit();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java://				if(!task.isTransactional()){
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java://        String tId = taskStatus.getTransactionId();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java://        Preconditions.checkNotNull(tId,"Transactional task has no transaction");
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java://        TransactionManager txnControl = HTransactorFactory.getTransactionManager();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java://						boolean commit = TransactionUtils.commit(txnControl, tId, maxTries);//TODO -sf- make 5 configurable
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:    private Txn getTxn() {
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:        if(txn==null){
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:            TxnView txnInformation = taskStatus.getTxnInformation();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:            if(txnInformation==null) return null; //no transaction to commit
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:            boolean isAdditive = txnInformation.isAdditive();
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:            if(!txnInformation.allowsWrites())
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:                txn = ReadOnlyTxn.wrapReadOnlyInformation(txnInformation, lifecycleManager);
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:                txn =new WritableTxn(txnInformation.getTxnId(),
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:                        txnInformation.getBeginTimestamp(),
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:                        txnInformation.getIsolationLevel(),txnInformation.getParentTxnView(),lifecycleManager, isAdditive);
src//main/java/com/splicemachine/derby/impl/job/scheduler/RegionTaskControl.java:        return txn;
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:    private TxnView parentTxn;
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:		private transient Txn txn; //the child transaction that we operate against
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:						parentTxn = TransactionOperations.getOperationFactory().readTxn(in);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        out.writeBoolean(parentTxn!=null);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        if(parentTxn!=null)
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:            TransactionOperations.getOperationFactory().writeTxn(parentTxn,out);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        setupTransaction();
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:    protected TxnView getParentTxn() {
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        return parentTxn;
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:    protected void setupTransaction() throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        if(parentTxn!=null){
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:						TxnLifecycleManager tc = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:                txn  = beginChildTransaction(parentTxn, tc);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:                status.setTxn(txn);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:                throw new ExecutionException("Unable to acquire child transaction",e);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:    protected void elevateTransaction(byte[] table) throws IOException{
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        txn = txn.elevateToWritable(table);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        status.setTxn(txn);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:		protected Txn beginChildTransaction(TxnView parentTxn,TxnLifecycleManager tc) throws IOException {
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				return tc.beginChildTransaction(parentTxn,null);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java://				return transactor.beginChildTransaction(parent, !readOnly, !readOnly);
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:		public void setParentTxnInformation(TxnView parentTxn) {
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        this.parentTxn = parentTxn;
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:		public Txn getTxn() {
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				return txn;
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:		private void encodeParentTxn(ObjectOutput out) throws IOException {
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				out.writeLong(parentTxn.getTxnId());
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				out.writeLong(parentTxn.getParentTxnId());
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				out.writeByte(parentTxn.getIsolationLevel().encode());
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				out.writeBoolean(parentTxn.allowsWrites());
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				out.writeBoolean(parentTxn.isAdditive());
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:		private TxnView decodeTxn(ObjectInput in) throws IOException {
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				long parentTxnId = in.readLong();
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				long pParentTxnId = in.readLong();
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:				Txn.IsolationLevel level = Txn.IsolationLevel.fromByte(in.readByte());
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        TxnView ppParent;
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        if(pParentTxnId<0)
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:            ppParent = Txn.ROOT_TRANSACTION;
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:            ppParent = new LazyTxnView(pParentTxnId,TransactionStorage.getTxnSupplier());
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:        return new InheritingTxnView(ppParent,parentTxnId,parentTxnId,level,
src//main/java/com/splicemachine/derby/impl/job/ZkTask.java:                -1l,-1l, Txn.State.ACTIVE);
src//main/java/com/splicemachine/derby/impl/load/BlockImportJob.java:													long statementId, long operationId, FileSystem fs,TxnView txn) {
src//main/java/com/splicemachine/derby/impl/load/BlockImportJob.java:			this(table,context,Collections.singletonList(context.getFilePath()),statementId,operationId,fs,txn);
src//main/java/com/splicemachine/derby/impl/load/BlockImportJob.java:													long statementId, long operationId, FileSystem fs,TxnView txn) {
src//main/java/com/splicemachine/derby/impl/load/BlockImportJob.java:				super(table, context, statementId,files, operationId,txn);
src//main/java/com/splicemachine/derby/impl/load/FileImportJob.java:                            TxnView txn) {
src//main/java/com/splicemachine/derby/impl/load/FileImportJob.java:				super(table, context, statementId, operationId,txn);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:						SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName,lcc.getTransactionExecute(),true);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:						TableDescriptor td = dd.getTableDescriptor(tableName,sd,lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:						RowLocation[] rowLocations = dd.computeAutoincRowLocations(lcc.getTransactionExecute(), td);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:            BaseSpliceTransaction txn = ((SpliceTransactionManager)activation.getTransactionController()).getRawTransaction();
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:                ExecRow resultRow = importData(txn,user, conn, schemaName.toUpperCase(), tableName.toUpperCase(),
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:		public static ExecRow importData(BaseSpliceTransaction txn,
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:        Txn parentTxn;
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:            parentTxn = ((SpliceTransaction)txn).elevate(conglomBytes);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:        Txn childTransaction;
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:						childTransaction = TransactionLifecycle.getLifecycleManager().beginChildTransaction(parentTxn, Txn.IsolationLevel.SNAPSHOT_ISOLATION, true, conglomBytes);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:								user,childTransaction,
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:						SpliceRuntimeContext runtimeContext = new SpliceRuntimeContext(childTransaction);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:						return importer.executeShuffle(runtimeContext,childTransaction);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:					SpliceDriver.driver().getStatementManager().completedStatement(statementInfo, false, childTransaction);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:                    childTransaction.rollback();
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:										 * We were unable to rollback the transaction, which is bad.
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:										 * our failure to roll back the transaction the error that gets returned,
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:                reportStats(lcc, childTransaction, statementInfo);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:                    childTransaction.commit();
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:										 * We were unable to commit the transaction properly,
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:    private static void reportStats(LanguageConnectionContext lcc, Txn childTransaction, StatementInfo statementInfo) throws SQLException {
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:            SpliceDriver.driver().getStatementManager().completedStatement(statementInfo, explain,childTransaction);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:                childTransaction.rollback();
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:                childTransaction.rollback();
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:    public ExecRow executeShuffle(SpliceRuntimeContext runtimeContext,Txn txn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:								ImportJob importJob = new FileImportJob(table,context,statementId,file.getPaths(),operationId,txn);
src//main/java/com/splicemachine/derby/impl/load/HdfsImport.java:				TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/load/ImportJob.java:    private TxnView txn;
src//main/java/com/splicemachine/derby/impl/load/ImportJob.java:                        TxnView txn) {
src//main/java/com/splicemachine/derby/impl/load/ImportJob.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/load/ImportJob.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/derby/impl/load/ImportJob.java:        return txn;
src//main/java/com/splicemachine/derby/impl/load/ImportTask.java:						SpliceDriver.driver().getTaskReporter().report(runtimeStats,getTxn());
src//main/java/com/splicemachine/derby/impl/load/ImportTask.java:				TxnView txn = status.getTxnInformation();
src//main/java/com/splicemachine/derby/impl/load/ImportTask.java:										reader.toString(),txn,txn.getParentTxnView());
src//main/java/com/splicemachine/derby/impl/load/ImportTask.java:                return new SequentialImporter(importContext,row, txn,
src//main/java/com/splicemachine/derby/impl/load/ImportTask.java:                    SpliceConstants.maxImportReadBufferSize,txn,errorReporter,importType);
src//main/java/com/splicemachine/derby/impl/load/ImportTask.java:    protected Txn beginChildTransaction(TxnView parentTxn, TxnLifecycleManager tc) throws IOException {
src//main/java/com/splicemachine/derby/impl/load/ImportTask.java:        return tc.beginChildTransaction(parentTxn, Txn.IsolationLevel.SNAPSHOT_ISOLATION,true,table);
src//main/java/com/splicemachine/derby/impl/load/ParallelImporter.java:		public ParallelImporter(ImportContext importContext,ExecRow template,TxnView txn,
src//main/java/com/splicemachine/derby/impl/load/ParallelImporter.java:												txn,
src//main/java/com/splicemachine/derby/impl/load/ParallelImporter.java:														TxnView txn,ImportErrorReporter errorReporter,KVPair.Type importType) {
src//main/java/com/splicemachine/derby/impl/load/ParallelImporter.java:								txn,
src//main/java/com/splicemachine/derby/impl/load/ParallelImporter.java:                            TxnView txn,
src//main/java/com/splicemachine/derby/impl/load/ParallelImporter.java:						SequentialImporter importer = new SequentialImporter(importCtx,template.getClone(),txn, writeCoordinator,
src//main/java/com/splicemachine/derby/impl/load/SequentialImporter.java:                              TxnView txn,
src//main/java/com/splicemachine/derby/impl/load/SequentialImporter.java:        writeBuffer = writeCoordinator.writeBuffer(importContext.getTableName().getBytes(), txn,config);
src//main/java/com/splicemachine/derby/impl/load/SequentialImporter.java:        errorReporter.setWriteBuffer(writeCoordinator.writeBuffer(importContext.getTableName().getBytes(), txn,config));
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                                       TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:            /* Have to update the reference count in a nested transaction here because the SYSCONSTRAINTS row we are
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:            TransactionController transactionController = tc.startNestedUserTransaction(false, true);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                updateConstraintDescriptor(refDescriptor, refDescriptor.getUUID(), colsToSet, transactionController);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                transactionController.commit();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                transactionController.destroy();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    public void createStatisticsTables(TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    public void createXplainTables(TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    public void createLassenTables(TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                                          TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    public SchemaDescriptor locateSchemaRow(String schemaName,TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    				tc = getTransactionCompile();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                        TransactionController.ISOLATION_REPEATABLE_READ,
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    protected void loadDictionaryTables(TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:            SpliceTransactionManager txnManager=(SpliceTransactionManager)af.getTransaction(ContextService.getFactory().getCurrentContextManager());
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:            ((SpliceTransaction)txnManager.getRawTransaction()).elevate("boot".getBytes());
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                txnManager.setProperty(SPLICE_DATA_DICTIONARY_VERSION,spliceSoftwareVersion,true);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:        BaseSpliceTransaction rawTransaction=((SpliceTransactionManager)lcc.getTransactionExecute()).getRawTransaction();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:        SpliceTransaction txn=(SpliceTransaction)rawTransaction;
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:        if(!txn.allowsWrites())
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:            txn.elevate("dictionary".getBytes());
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:                TransactionController tc = llc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    public void createOrUpdateAllSystemProcedures(TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    private void upgradeIfNecessary(TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    private void addTableIfAbsent(TransactionController tc,SchemaDescriptor systemSchema,TabInfoImpl sysTableToAdd,
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    private void createSysTableStatsView(TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java:    private void createSysColumnStatsView(TransactionController tc) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDerbyStatisticsStore.java:    public List<Statistics> getAllStatistics(TransactionController tc,ConglomerateDescriptor td) throws StandardException{
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDerbyStatisticsStore.java:        TxnView txn=((SpliceTransactionManager)tc).getRawTransaction().getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDerbyStatisticsStore.java:            TableStatistics statistics=tableStats.getStatistics(txn,td.getConglomerateNumber());
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemAggregatorGenerator.java:    public void createAggregates(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:    protected Map/*<UUID,List<Procedure>*/ getProcedures(DataDictionary dictionary, TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:        			 * Procedures to kill stale transactions
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    Procedure killTransaction = Procedure.newBuilder().name("SYSCS_KILL_TRANSACTION")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .bigint("transactionId")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    procedures.add(killTransaction);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    Procedure killStaleTransactions = Procedure.newBuilder().name("SYSCS_KILL_STALE_TRANSACTIONS")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .bigint("maximumTransactionId")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    procedures.add(killStaleTransactions);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    Procedure dumpTransactions = Procedure.newBuilder().name("SYSCS_DUMP_TRANSACTIONS")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .ownerClass(TransactionAdmin.class.getCanonicalName())
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    procedures.add(dumpTransactions);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    Procedure currTxn = Procedure.newBuilder().name("SYSCS_GET_CURRENT_TRANSACTION")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .ownerClass(TransactionAdmin.class.getCanonicalName())
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    procedures.add(currTxn);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    Procedure activeTxn = Procedure.newBuilder().name("SYSCS_GET_ACTIVE_TRANSACTION_IDS")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .ownerClass(TransactionAdmin.class.getCanonicalName())
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    procedures.add(activeTxn);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .ownerClass(TransactionAdmin.class.getCanonicalName())
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    Procedure childTxnProc = Procedure.newBuilder().name("SYSCS_START_CHILD_TRANSACTION")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .bigint("parentTransactionId") // input
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .ownerClass(TransactionAdmin.class.getCanonicalName())
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    procedures.add(childTxnProc);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    Procedure commitTxnProc = Procedure.newBuilder().name("SYSCS_COMMIT_CHILD_TRANSACTION")
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .bigint("childTransactionId") // input
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                            .ownerClass(TransactionAdmin.class.getCanonicalName())
src//main/java/com/splicemachine/derby/impl/sql/catalog/SpliceSystemProcedures.java:                    procedures.add(commitTxnProc);
src//main/java/com/splicemachine/derby/impl/sql/catalog/SYSSTATEMENTHISTORYRowFactory.java:        long transactionId = col.getLong();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SYSSTATEMENTHISTORYRowFactory.java:        return new StatementHistoryDescriptor(statementId, host, userName, transactionId, status, statementSql,
src//main/java/com/splicemachine/derby/impl/sql/catalog/SYSSTATEMENTHISTORYRowFactory.java:        long txnId = 0;
src//main/java/com/splicemachine/derby/impl/sql/catalog/SYSSTATEMENTHISTORYRowFactory.java:            txnId = sd.getTransactionId();
src//main/java/com/splicemachine/derby/impl/sql/catalog/SYSSTATEMENTHISTORYRowFactory.java:        row.setColumn(TRANSACTIONID, new SQLLongint(txnId));
src//main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/LassenUpgradeScript.java:    public LassenUpgradeScript(SpliceDataDictionary sdd, TransactionController tc) {
src//main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/LassenUpgradeScript.java:    private void addStatsColumnToSysColumns(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java:    TransactionController tc;
src//main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java:    public SpliceCatalogUpgradeScripts (SpliceDataDictionary sdd, Splice_DD_Version catalogVersion, TransactionController tc) {
src//main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptBase.java:    protected TransactionController tc;
src//main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptBase.java:    public UpgradeScriptBase (SpliceDataDictionary sdd, TransactionController tc) {
src//main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForFuji.java:    public UpgradeScriptForFuji (SpliceDataDictionary sdd, TransactionController tc) {
src//main/java/com/splicemachine/derby/impl/sql/compile/NestedLoopJoinStrategy.java:            TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:	public void clearDependencies(LanguageConnectionContext lcc, Dependent d,TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:  public void copyDependencies(Dependent copyFrom, Dependent copyTo, boolean persistentOnly, ContextManager cm, TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:      // tc == null means do it in the user transaction
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:      TransactionController tcToUse = (tc == null) ? lcc.getTransactionExecute() : tc;
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:      BaseSpliceTransaction usrTxn = ((SpliceTransactionManager)tcToUse).getRawTransaction();
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:      SpliceTransaction txn = (SpliceTransaction)usrTxn;
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:      if(!txn.allowsWrites())
src//main/java/com/splicemachine/derby/impl/sql/depend/SpliceDependencyManager.java:          txn.elevate(copyTo.getObjectName().getBytes());
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:				TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:				//drop the conglomerate in a child transaction
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        dropIndex(td,cd,(SpliceTransactionManager)lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:                           SpliceTransactionManager userTxnManager) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        TxnView uTxn = userTxnManager.getRawTransaction().getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        //get the top-most transaction, that's the actual user transaction
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        TxnView t = uTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        while(t.getTxnId()!= Txn.ROOT_TRANSACTION.getTxnId()){
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:            uTxn = t;
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:            t = uTxn.getParentTxnView();
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        final TxnView userTxn = uTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        DDLChange change = new DDLChange(userTxn, DDLChangeType.DROP_INDEX);
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        dropIndexTrigger(tableConglomId, indexConglomId, userTxn);				
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:	public abstract void dropIndexTrigger(final long tableConglomId, final long indexConglomId, final TxnView userTxn) throws StandardException;		
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        SpliceTransactionManager userTxnManager = (SpliceTransactionManager)lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        dd.dropStatisticsDescriptors(td.getUUID(), cd.getUUID(), userTxnManager);
src//main/java/com/splicemachine/derby/impl/sql/execute/AbstractDropIndexConstantOperation.java:        dd.dropConglomerateDescriptor(cd,userTxnManager);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:public class ActiveTransactionReader {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    private final long minTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    private final long maxTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    public ActiveTransactionReader(long minTxnId, long maxTxnId, byte[] writeTable){
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        this.minTxnId = minTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        this.maxTxnId = maxTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    public Stream<TxnView> getAllTransactions() throws IOException{
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        return getAllTransactions(SpliceConstants.DEFAULT_CACHE_SIZE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    public Stream<TxnView> getActiveTransactions() throws IOException{
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        return getActiveTransactions(SpliceConstants.DEFAULT_CACHE_SIZE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    public Stream<TxnView> getAllTransactions(int queueSize) throws IOException{
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        ActiveTxnJob job = new ActiveTxnJob(operationId, queueSize,false);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    public Stream<TxnView> getActiveTransactions(int queueSize) throws IOException{
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        ActiveTxnJob job = new ActiveTxnJob(operationId, queueSize);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    protected Stream<TxnView> runJobAndScan(int queueSize, ActiveTxnJob job) throws IOException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:            return scanner.stream().transform(new Transformer<List<KeyValue>, TxnView>() {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:                public TxnView transform(List<KeyValue> element) throws StreamException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:                        Logger.getLogger(ActiveTransactionReader.class).warn("Unable to cleanup job "+ submit.toString());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:    private class ActiveTxnJob implements CoprocessorJob {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        private ActiveTxnJob(byte[] operationUUID, int queueSize) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        private ActiveTxnJob(byte[] operationUUID, int queueSize,boolean activeOnly) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:            return String.format("ActiveTransactions-%d", Bytes.toLong(operationUUID));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:            TransactionReadTask task = new TransactionReadTask(getJobId(), minTxnId, maxTxnId, writeTable, operationUUID,queueSize,activeOnly);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ActiveTransactionReader.java:        @Override public Txn getTxn() { return null; }
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            dd.updateLockGranularity(td, sd, lockGranularity, lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TransactionController tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TxnView parentTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        int[] oldColumnOrdering = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) :
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        // Start a tentative txn to demarcate the DDL change
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        Txn tentativeTransaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            tentativeTransaction =
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                lifecycleManager.beginChildTransaction(parentTxn, Bytes.toBytes(Long.toString(oldCongNum)));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        int[] newColumnOrdering = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        DDLChange ddlChange = new DDLChange(tentativeTransaction, changeType);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            //wait for all past txns to complete
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            Txn populateTxn = getChainedTransaction(tc, tentativeTransaction, oldCongNum, changeMsg+"(" +
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                                                     populateTxn.getBeginTimestamp(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            populateTxn.commit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TxnView parentTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        int[] oldColumnOrdering = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        // Start a tentative txn to demarcate the DDL change
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        Txn tentativeTransaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            tentativeTransaction =
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                lifecycleManager.beginChildTransaction(parentTxn, Bytes.toBytes(Long.toString(oldCongNum)));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        int[] newColumnOrdering = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        DDLChange ddlChange = new DDLChange(tentativeTransaction, changeType);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            // wait for all in-flight txns to complete
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            // FIXME: JC - just commit tentative txn after wait
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            Txn populateTxn = getChainedTransaction(tc, tentativeTransaction, oldCongNum, changeMsg+"("+constraintColumnNames+")");
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            populateTxn.commit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TxnView parentTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        int[] oldColumnOrdering = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) :
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        // Start a tentative txn to demarcate the DDL change
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        Txn tentativeTransaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            tentativeTransaction =
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                lifecycleManager.beginChildTransaction(parentTxn, Bytes.toBytes(Long.toString(oldCongNum)));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        int[] newColumnOrdering = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        DDLChange ddlChange = new DDLChange(tentativeTransaction, changeType);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            //wait for all past txns to complete
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            Txn populateTxn = getChainedTransaction(tc, tentativeTransaction, oldCongNum, changeMsg+"(" +
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                                                     populateTxn.getBeginTimestamp(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            populateTxn.commit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                    TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                               TransactionController tc, TableDescriptor td, int index, long[] newIndexCongloms)
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                        TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                        TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                        TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            TxnView parentTxn = ((SpliceTransactionManager) tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            Txn tentativeTransaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                tentativeTransaction = TransactionLifecycle.getLifecycleManager().beginChildTransaction(parentTxn, Txn.IsolationLevel.SNAPSHOT_ISOLATION,writeTable);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            DDLChange ddlChange = new DDLChange(tentativeTransaction,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                Txn indexTransaction = getIndexTransaction(tc, tentativeTransaction, newHeapConglom);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                        indexTransaction, tentativeTransaction.getCommitTimestamp(),tentativeIndexDesc);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                //only commit the index transaction if the job actually completed
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                indexTransaction.commit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                        TransactionController.IS_DEFAULT,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:    protected int getSemiRowCount(TransactionController tc,TableDescriptor td) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                        TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                        TransactionController.ISOLATION_SERIALIZABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                       TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                                         user,txn, 1, sId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                SpliceDriver.driver().getStatementManager().completedStatement(statementInfo, activation.isTraced(),txn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:    protected Txn getChainedTransaction(TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                      Txn txnToWaitFor,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        final TxnView wrapperTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        Txn waitTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            waitTxn =
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                TransactionLifecycle.getLifecycleManager().chainTransaction(wrapperTxn,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                                                            Txn.IsolationLevel.SNAPSHOT_ISOLATION,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                                                                            false,tableBytes,txnToWaitFor);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        //get the absolute user transaction
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TxnView uTxn = wrapperTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        TxnView n = uTxn.getParentTxnView();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        while(n.getTxnId()>=0){
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            uTxn = n;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            n = n.getParentTxnView();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        // Wait for past transactions to complete
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        long oldestActiveTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            oldestActiveTxn = waitForConcurrentTransactions(waitTxn, uTxn,tableConglomId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        if (oldestActiveTxn>=0) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            throw ErrorState.DDL_ACTIVE_TRANSACTIONS.newException(alterTableActionName,oldestActiveTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        Txn populateTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:            populateTxn = TransactionLifecycle.getLifecycleManager().chainTransaction(
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:                wrapperTxn, Txn.IsolationLevel.SNAPSHOT_ISOLATION, true, tableBytes,waitTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java:        return populateTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ConstraintConstantOperation.java:	 * @param    tc        transaction controller
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ConstraintConstantOperation.java:            TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateAliasConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateAliasConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateConstraintConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateConstraintConstantOperation.java:                new FkJobSubmitter(dd, (SpliceTransactionManager) tc, referencedConstraint, conDesc, DDLChangeType.ADD_FOREIGN_KEY).submit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:        TransactionController userTransaction = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:        SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, userTransaction, true) ;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            td = tableId != null?dd.getTableDescriptor(tableId):dd.getTableDescriptor(tableName, sd, userTransaction);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            conglomId = userTransaction.createConglomerate(indexType, indexTemplateRow.getRowArray(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:                    td.getColumnDescriptorList()), indexProperties, TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            ConglomerateController indexController = userTransaction.openConglomerate(conglomId, false, 0, TransactionController.MODE_TABLE,TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            createConglomerateDescriptor(dd, userTransaction, sd, td, indexRowGenerator, alreadyHaveConglomDescriptor, ddg);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            createAndPopulateIndex(activation, userTransaction, userTransaction, td, baseColumnPositions, heapConglomerateId, descColumns);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:    @Override protected boolean waitsForConcurrentTransactions() { return true; }
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:                                                TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:                                          TransactionController parent,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:                                          TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:        Txn tentativeTransaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:        TxnView parentTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            tentativeTransaction = lifecycleManager.beginChildTransaction(parentTxn, Bytes.toBytes(Long.toString(heapConglomerateId)));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:        DDLChange ddlChange = performMetadataChange(tentativeTransaction, tentativeIndexDesc);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            Txn indexTransaction = getIndexTransaction(tc, tentativeTransaction, heapConglomerateId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:                    indexTransaction,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:                    tentativeTransaction.getCommitTimestamp(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            //only commit the index transaction if the job actually completed
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:            indexTransaction.commit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:    private DDLChange performMetadataChange(Txn tentativeTransaction, TentativeIndexDesc tentativeIndexDesc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java:        DDLChange ddlChange = new DDLChange(tentativeTransaction,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateRoleConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateRoleConstantOperation.java:                              TransactionController tc)
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateSchemaConstantOperation.java:                activation.getLanguageConnectionContext().getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateSchemaConstantOperation.java:    public void executeConstantAction(Activation activation,TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateSchemaConstantOperation.java:    private void executeConstantActionMinion(Activation activation,TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateSchemaConstantOperation.java:        SchemaDescriptor sd = dd.getSchemaDescriptor(schemaName, lcc.getTransactionExecute(), false);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateSchemaConstantOperation.java:				 * the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateSequenceConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java:                        (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) :
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java:                        TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTriggerConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTriggerConstantOperation.java:            TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateViewConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateViewConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:		TransactionController tc = activation.getLanguageConnectionContext().getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:			(activation.getTransactionController(),role, true /* inverse relation*/);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:	 * @return list of tables affected by this DDL operation that have to be forbidden to write by concurrent transactions. 
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:    public long waitForConcurrentTransactions(Txn maximum, TxnView userTxn,long tableConglomId) throws IOException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:        if (!waitsForConcurrentTransactions()) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:        ActiveTransactionReader transactionReader = new ActiveTransactionReader(0l,maximum.getTxnId(),conglomBytes);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:        long activeTxnId = -1l;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:            try(Stream<TxnView> activeTxns = transactionReader.getActiveTransactions()){
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:                TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:                while((txn = activeTxns.next())!=null){
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:                    if(!txn.descendsFrom(userTxn)){
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:                        activeTxnId = txn.getTxnId();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:            if(activeTxnId<0) return activeTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:        if (activeTxnId>=0) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:        return activeTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:	 * Declares whether this DDL operation has to wait for the draining of concurrent transactions or not
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:	 * @return true if it has to wait for the draining of concurrent transactions
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLConstantOperation.java:    protected boolean waitsForConcurrentTransactions() {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLSingleTableConstantOperation.java:            TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLSingleTableConstantOperation.java:            new FkJobSubmitter(dd, (SpliceTransactionManager) tc, referencedConstraint, consDesc, DDLChangeType.DROP_FOREIGN_KEY).submit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLSingleTableConstantOperation.java:		   	lcc.getTransactionExecute().openConglomerate(
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLSingleTableConstantOperation.java:			   	TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLSingleTableConstantOperation.java:			   	TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLSingleTableConstantOperation.java:			   	TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DDLSingleTableConstantOperation.java:			replaceConglomAction.getCreatedConglomNumber(),lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DeleteConstantOperation.java:	 *							(row or table, see TransactionController)
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropAliasConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropConstraintConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropConstraintConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropConstraintConstantOperation.java:            new FkJobSubmitter(dd, (SpliceTransactionManager) tc, referencedConstraint, conDesc, DDLChangeType.DROP_FOREIGN_KEY).submit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropRoleConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropRoleConstantOperation.java:            (activation.getTransactionController(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropSchemaConstantOperation.java:				 * the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropSchemaConstantOperation.java:        SpliceTransactionManager tc = (SpliceTransactionManager)lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropSchemaConstantOperation.java:        DDLChange change = new DDLChange(tc.getActiveStateTxn(), DDLChangeType.DROP_SCHEMA);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropSequenceConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropStatisticsConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropTableConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropTableConstantOperation.java:        DDLChange ddlChange = new DDLChange(((SpliceTransactionManager) tc).getActiveStateTxn(), DDLChangeType.DROP_TABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropTriggerConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropTriggerConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropViewConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/DropViewConstantOperation.java:                lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/GrantRoleConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/GrantRoleConstantOperation.java:                                  TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:    protected Txn getIndexTransaction(TransactionController tc, Txn tentativeTransaction, long tableConglomId) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        final TxnView wrapperTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        Txn waitTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            waitTxn = TransactionLifecycle.getLifecycleManager().chainTransaction(wrapperTxn, Txn.IsolationLevel.SNAPSHOT_ISOLATION,false,tableBytes,tentativeTransaction);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        //get the absolute user transaction
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        TxnView uTxn = wrapperTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        TxnView n = uTxn.getParentTxnView();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        while(n.getTxnId()>=0){
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            uTxn = n;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            n = n.getParentTxnView();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        // Wait for past transactions to die
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        long oldestActiveTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            oldestActiveTxn = waitForConcurrentTransactions(waitTxn, uTxn,tableConglomId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        if (oldestActiveTxn>=0) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            throw ErrorState.DDL_ACTIVE_TRANSACTIONS.newException("CreateIndex("+indexName+")",oldestActiveTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        Txn indexTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            indexTxn = TransactionLifecycle.getLifecycleManager().chainTransaction(
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:                    wrapperTxn, Txn.IsolationLevel.SNAPSHOT_ISOLATION, true, tableBytes,waitTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:        return indexTxn;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:                                 TransactionController txnControl,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:                                 Txn indexTransaction,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:                ((SpliceTransactionManager)activation.getTransactionController()).getActiveStateTxn(),1, SpliceDriver.driver().getUUIDGenerator());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            SpliceConglomerate conglomerate = (SpliceConglomerate)((SpliceTransactionManager)txnControl).findConglomerate(tableConglomId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:            PopulateIndexJob job = new PopulateIndexJob(table, indexTransaction,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:                SpliceDriver.driver().getStatementManager().completedStatement(statementInfo, activation.isTraced(),((SpliceTransactionManager) txnControl).getActiveStateTxn());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/IndexConstantOperation.java:                activation.getTransactionController().getActiveStateTxIdString(),1, SpliceDriver.driver().getUUIDGenerator());*/
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:    @Override protected boolean waitsForConcurrentTransactions() { return true; }
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TxnView parentTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        int[] oldColumnOrder = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                                properties, TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        // Start a tentative txn to demarcate the DDL change
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        Txn tentativeTransaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            tentativeTransaction =
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                lifecycleManager.beginChildTransaction(parentTxn, Bytes.toBytes(Long.toString(oldCongNum)));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        int[] columnOrdering = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        DDLChange ddlChange = new DDLChange(tentativeTransaction, DDLChangeType.ADD_COLUMN);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            //wait for all past txns to complete
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            Txn populateTxn = getChainedTransaction(tc, tentativeTransaction, oldCongNum, "AddColumn("+colInfo.name+")");
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                                                     populateTxn.getBeginTimestamp(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            populateTxn.commit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:    private void modifyColumnType(DataDictionary dd, TransactionController tc,TableDescriptor td,int ix) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TransactionController tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        // Create new table without column, map current rows and ongoing txns
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                                   TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                   LanguageConnectionContext lcc, TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                        TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                        TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                        TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        TxnView parentTxn = ((SpliceTransactionManager)tc).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        int[] oldColumnOrder = DataDictionaryUtils.getColumnOrdering(parentTxn, tableId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                                    properties, TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        // Start a tentative txn to demarcate the DDL change
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        Txn tentativeTransaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            tentativeTransaction =
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                lifecycleManager.beginChildTransaction(parentTxn, Bytes.toBytes(Long.toString(oldCongNum)));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:        DDLChange ddlChange = new DDLChange(tentativeTransaction, DDLChangeType.DROP_COLUMN);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            //wait for all past txns to complete
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            Txn populateTxn = getChainedTransaction(tc, tentativeTransaction, oldCongNum, "DropColumn("+columnName+")");
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                                                     populateTxn.getBeginTimestamp(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:                                parentTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/ModifyColumnConstantOperation.java:            populateTxn.commit();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RenameConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RenameConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RenameConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RenameConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RenameConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RevokeRoleConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RevokeRoleConstantOperation.java:                        //     (activation.getTransactionController(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/RevokeRoleConstantOperation.java:                        (activation.getTransactionController(),
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetConstraintsConstantOperation.java:		TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetConstraintsConstantOperation.java:		** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetConstraintsConstantOperation.java:		TransactionController			tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetConstraintsConstantOperation.java:		TransactionController	tc
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetRoleConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetRoleConstantOperation.java:        BaseSpliceTransaction txn = ((SpliceTransactionManager) tc).getRawTransaction();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetRoleConstantOperation.java:        if (!(txn.getTxnInformation() instanceof ReadOnlyTxn)) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetSchemaConstantOperation.java:        SchemaDescriptor sd = dd.getSchemaDescriptor(thisSchemaName,lcc.getTransactionExecute(), true);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetTransactionIsolationConstantOperation.java:public class SetTransactionIsolationConstantOperation implements ConstantAction {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SetTransactionIsolationConstantOperation.java:	public SetTransactionIsolationConstantOperation(int isolationLevel) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/SpliceCreateTableOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:public class TransactionReadTask extends ZkTask {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    private long minTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    private long maxTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    //the number of active txns to fetch before giving up--allows us to be efficient with our search
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    private int numTxns;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    private boolean activeOnly; //when true, will fetch only active transactions    
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    private RegionTxnStore regionTxnStore;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    public TransactionReadTask() { }
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    public TransactionReadTask(String jobId, long minTxnId, long maxTxnId, byte[] writeTable, byte[] operationUUID) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        this(jobId, minTxnId, maxTxnId, writeTable, operationUUID,Integer.MAX_VALUE,true);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    public TransactionReadTask(String jobId, long minTxnId, long maxTxnId, byte[] writeTable, byte[] operationUUID, int numTxns) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        this(jobId,minTxnId,maxTxnId,writeTable,operationUUID,numTxns,true);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    public TransactionReadTask(String jobId, long minTxnId, long maxTxnId, byte[] writeTable,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:                               byte[] operationUUID, int numTxns,boolean activeOnly) {
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        this.minTxnId = minTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        this.maxTxnId = maxTxnId;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        this.numTxns = numTxns;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        TxnLifecycleEndpoint tle = (TxnLifecycleEndpoint)rce.getRegion().getCoprocessorHost().findCoprocessor(TxnLifecycleEndpoint.class.getName());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        regionTxnStore = tle.getRegionTxnStore();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        TxnView writeTxn =  new ActiveWriteTxn(l,l,Txn.ROOT_TRANSACTION);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        CallBuffer<KVPair> callBuffer = SpliceDriver.driver().getTableWriter().writeBuffer(tempTable.getTempTableName(), writeTxn);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        Source activeTxns = null;
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:            activeTxns = activeOnly?regionTxnStore.getActiveTxns(minTxnId, maxTxnId, writeTable):
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:                    regionTxnStore.getAllTxns(minTxnId,maxTxnId); //todo -sf- add destination table filter
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:            while(activeTxns.hasNext()){
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:            	Object txn = activeTxns.next();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:                byte[] key = Encoding.encode(siFactory.getTxnId(txn));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:                KVPair kvPair = new KVPair(key,siFactory.transactionToByteArray(rowEncoder, txn));
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:                if(rows>= numTxns)
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:            Closeables.closeQuietly(activeTxns);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        return new TransactionReadTask(jobId,minTxnId,maxTxnId,writeTable,operationUUID);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:    @Override protected String getTaskType() { return "ActiveTransaction"; }
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        minTxnId = in.readLong();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        maxTxnId = in.readLong();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        numTxns = in.readInt();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        out.writeLong(minTxnId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        out.writeLong(maxTxnId);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TransactionReadTask.java:        out.writeInt(numTxns);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:        TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:                TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:                TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:                TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:        SpliceConglomerate conglomerate = (SpliceConglomerate) ((SpliceTransactionManager)tc).findConglomerate(td.getHeapConglomerateId());
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:                        TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:		    ** the transaction.
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:                                 TransactionController tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java:                        TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/sql/execute/actions/UpdateConstantOperation.java:	 *							(row or table, see TransactionController)
src//main/java/com/splicemachine/derby/impl/sql/execute/index/IndexTransformer.java:        Get get = SpliceUtils.createGet(ctx.getTxn(), mutation.getRowKey());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/BroadcastJoinOperation.java:            ors.sinkOpen(runtimeContext.getTxn(),true);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/CallStatementOperation.java:						SpliceDriver.driver().getTaskReporter().report(stats,operationInformation.getTransaction());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:	TransactionController tc;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:			  TransactionController.ISOLATION_REPEATABLE_READ,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:        heapDcoci = activation.getTransactionController().getDynamicCompiledConglomInfo(conglomId);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:		tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:					  TransactionController.OPENMODE_FORUPDATE, // update only
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:	** @param transaction controller will open one if null
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:				    TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DependentOperation.java:					(lockMode == TransactionController.MODE_RECORD);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyDMLWriteInfo.java:    private TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyDMLWriteInfo.java:        this.txn = opCtx.getTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyDMLWriteInfo.java:        return SpliceObserverInstructions.create(activation,operation,new SpliceRuntimeContext(txn));
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * Represents the transaction that this operation acts under.
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * if the operation is serialized, then it's expected that the transaction
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * is serialized along with it. If it should be operating under a child transaction,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * then the child transaction should be here
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * Note that we do NOT serialize the transaction here. Instead, we rely on initialization
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * to provide us with the correct transaction information.
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * transaction to the operation during initialization. If the SpliceOperationRegionScanner is used, the
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * transaction information is serialized over in the SpliceObserverInstructions object, which will construct
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		 * the proper transaction for our use here.
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		private transient TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:				this.txn = operationContext.getTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:		public TxnView getTransaction() {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:				if(txn==null) {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:						TransactionController transactionController = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:						if(transactionController==null) return null;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:						txn = ((SpliceTransactionManager) transactionController).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyOperationInformation.java:				return txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyScanInformation.java:            conglomerate = (SpliceConglomerate) ((SpliceTransactionManager) activation.getTransactionController()).findConglomerate(conglomId);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyScanInformation.java:    public Scan getScan(TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyScanInformation.java:        return getScan(txn, null, null);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyScanInformation.java:    public Scan getScan(TxnView txn, ExecRow startKeyOverride, int[] keyDecodingMap) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyScanInformation.java:                txn, sameStartStop,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DerbyScanInformation.java:    public List<Scan> getScans(TxnView txn, ExecRow startKeyOverride, Activation activation, SpliceOperation top, SpliceRuntimeContext spliceRuntimeContext) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScalarAggregateOperation.java:        TxnView txn = runtimeContext.getTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScalarAggregateOperation.java:            SpliceRuntimeContext firstStep = SpliceRuntimeContext.generateSinkRuntimeContext(txn, true);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScalarAggregateOperation.java:            SpliceRuntimeContext secondStep = SpliceRuntimeContext.generateSinkRuntimeContext(txn,false);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScalarAggregateOperation.java:            SpliceRuntimeContext secondStep = SpliceRuntimeContext.generateSinkRuntimeContext(txn,false);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScalarAggregateOperation.java:            reduceScan = Scans.buildPrefixRangeScan(uniqueSequenceID, null); //no transaction needed
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScalarAggregateOperation.java:        //don't use a transaction for this, since we are reading from temp
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScanOperation.java:                    .region(txnRegion)
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScanOperation.java:                    .transaction(operationInformation.getTransaction())
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DistinctScanOperation.java:                .transaction(operationInformation.getTransaction())
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DMLWriteOperation.java:			TxnView txn = soi.getTxn();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DMLWriteOperation.java:			RecordingCallBuffer<KVPair> bufferToTransform = writeCoordinator.writeBuffer(op.getDestinationTable(), txn, soi.getSpliceRuntimeContext());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/DMLWriteOperationControlSide.java:        RecordingCallBuffer<KVPair> writeBuffer = writeCoordinator.writeBuffer(dmlOperation.getDestinationTable(), runtimeContext.getTxn(), runtimeContext);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/HashNestedLoopJoinOperation.java:            rightRs.sinkOpen(context.getTxn(),false);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/HashScanOperation.java:						SpliceRuntimeContext spliceRuntimeContext = new SpliceRuntimeContext(operationInformation.getTransaction());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReader.java:    private final TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReader.java:									 TxnView txn,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReader.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReader.java:								Get get = SpliceUtils.createGet(txn,row);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReaderBuilder.java:    private TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReaderBuilder.java:    public IndexRowReaderBuilder transaction(TxnView transaction) {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReaderBuilder.java:        this.txn = transaction;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowReaderBuilder.java:								txn,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowToBaseRowOperation.java:						TransactionController tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowToBaseRowOperation.java:                conglomerate = (SpliceConglomerate)((SpliceTransactionManager)activation.getTransactionController()).findConglomerate(conglomId);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/IndexRowToBaseRowOperation.java:                    .transaction(operationInformation.getTransaction())
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/LastIndexKeyOperation.java:                        .region(txnRegion)
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/LastIndexKeyOperation.java:                        .transaction(operationInformation.getTransaction())
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/MergeJoinOperation.java:        ors.sinkOpen(spliceRuntimeContext.getTxn(),true);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/MergeSortJoinOperation.java:        SpliceRuntimeContext instructionContext = new SpliceRuntimeContext(operationInformation.getTransaction());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/MultiProbeDerbyScanInformation.java:    public List<Scan> getScans(TxnView txn, ExecRow startKeyOverride, Activation activation, SpliceOperation top, SpliceRuntimeContext spliceRuntimeContext) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/MultiProbeDerbyScanInformation.java:            Scan scan = getScan(txn);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/MultiProbeTableScanOperation.java:			List<Scan> scans = scanInformation.getScans(operationInformation.getTransaction(), null, activation, top, spliceRuntimeContext);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/NestedLoopJoinOperation.java:            SpliceRuntimeContext ctx = probeResultSet.sinkOpen(spliceRuntimeContext.getTxn(), showStatementInfo);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationInformation.java:		 * @return the transaction that this operation should operate under.
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationInformation.java:		TxnView getTransaction();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationSinkFactory.java:                                       TxnView txn,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationSinkFactory.java:        return new TableOperationSink(taskId, operation, SpliceDriver.driver().getTableWriter(), txn, statementId, waitTimeNs, destinationTable);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationTree.java:    private static void resetContext(SpliceTransactionResourceImpl impl, boolean prepared) {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationTree.java:        SpliceTransactionResourceImpl transactionResource = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationTree.java:            transactionResource.prepareContextManager();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationTree.java:            resetContext(transactionResource, prepared);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationUtils.java:		public static NoPutResultSet executeScan(SpliceOperation operation,Logger log,Txn txn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/OperationUtils.java:				SpliceRuntimeContext spliceRuntimeContext = new SpliceRuntimeContext(txn);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/package-info.java:	SetTransactionResultSet 
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ResultMergeScanner.java:        //we don't want to have a transaction id here, because we are reading from TEMP
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/rowcount/OffsetScanRowProvider.java:                    new SpliceRuntimeContext(rowCountOperation.getOperationInformation().getTransaction()));
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/rowcount/OffsetScanRowProvider.java:                    .report(metrics, rowCountOperation.getOperationInformation().getTransaction());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ScalarAggregateOperation.java:						reduceScan = Scans.buildPrefixRangeScan(range, null); //no transaction needed against TEMP
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanInformation.java:    Scan getScan(TxnView txn) throws StandardException;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanInformation.java:    Scan getScan(TxnView txn, T startKeyHint,int[] keyDecodingMap) throws StandardException;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanInformation.java:    List<Scan> getScans(TxnView txn, ExecRow startKeyOverride, Activation activation, SpliceOperation top, SpliceRuntimeContext spliceRuntimeContext) throws StandardException;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/SITableScanner.java:    private final TransactionalRegion region;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/SITableScanner.java:                             final TransactionalRegion region,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/SITableScanner.java:                             final TxnView txn,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/SITableScanner.java:                    TxnFilter<Data> txnFilter = region.unpackedFilter(txn);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/SITableScanner.java:                    return new PackedTxnFilter<Data>(txnFilter, hRowAccumulator){
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/SITableScanner.java:                    //still need to filter rows to deal with transactional issues
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:		protected TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:		protected TransactionalRegion region;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:		public TableScannerBuilder transactionID(String transactionID) {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java://				this.transactionID = transactionID;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:		public TableScannerBuilder transaction(TxnView txn){
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:				this.txn = txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:		public TableScannerBuilder region(TransactionalRegion region){
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:								txn,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:			TransactionOperations.getOperationFactory().writeTxn(txn, out);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:			txn = TransactionOperations.getOperationFactory().readTxn(in);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:			return String.format("template=%s, scan=%s, rowColumnMap=%s, txn=%s, "
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/scanner/TableScannerBuilder.java:							txn,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java:    protected TransactionalRegion txnRegion;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java:            this.txnRegion = context.getTransactionalRegion();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java:				return scanInformation.getScan(operationInformation.getTransaction(), ctx.getScanStartOverride(),getKeyDecodingMap());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SetTransactionOperation.java:public class SetTransactionOperation extends MiscOperation
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SetTransactionOperation.java:	public SetTransactionOperation(Activation activation) throws StandardException
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkFlatMap2Operation.java:	SpliceTransactionResourceImpl impl;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkFlatMap2Operation.java:			impl = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkFlatMap2Operation.java:			impl.marshallTransaction(soi.getTxn());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkFlatMapOperation.java:	SpliceTransactionResourceImpl impl;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkFlatMapOperation.java:			impl = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkFlatMapOperation.java:			impl.marshallTransaction(soi.getTxn());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkOperation.java:	SpliceTransactionResourceImpl impl;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkOperation.java:			impl = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkOperation.java:			impl.marshallTransaction(soi.getTxn());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkOperation2.java:	SpliceTransactionResourceImpl impl;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkOperation2.java:			impl = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SparkOperation2.java:			impl.marshallTransaction(soi.getTxn());
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://		protected Transaction getTrans() {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://				return (activation.getTransactionController() == null) ? null : ((SpliceTransactionManager) activation.getTransactionController()).getRawStoreXact();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://		public void clearChildTransactionID() {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://				this.childTransactionID = null;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://		public String getTransactionID() {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://				if (childTransactionID != null) {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://						return childTransactionID;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://						return transactionID;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/SpliceBaseOperation.java://						return (getTrans() == null) ? null : activation.getTransactionController().getActiveStateTxIdString();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:    private final TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:                              TxnView txn,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:        this.traceMetricRecorder = new TableOperationSinkTrace(operation, taskId, statementId, waitTimeNs, txn);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:        TxnView txn = this.txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:            long txnId = Snowflake.timestampFromUUID(Bytes.toLong(operation.getUniqueSequenceId()));
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:            txn = new ActiveWriteTxn(txnId, txnId, Txn.ROOT_TRANSACTION);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSink.java:        RecordingCallBuffer<KVPair> bufferToTransform = writeCoordinator.writeBuffer(destinationTable, txn, context);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSinkTrace.java:    private final TxnView txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSinkTrace.java:    public TableOperationSinkTrace(SinkingOperation operation, byte[] taskId, long statementId, long waitTimeNs, TxnView txn) {
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSinkTrace.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableOperationSinkTrace.java:                reporter.report(operationStat, this.txn);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableScanOperation.java:        this.txnRegion = context.getTransactionalRegion();
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableScanOperation.java:                    .region(txnRegion)
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableScanOperation.java:                    .transaction(operationInformation.getTransaction())
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TableScanOperation.java:            .transaction(operationInformation.getTransaction())
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:	private TransactionController	tc;
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:		TransactionController		tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:		TransactionController		tc,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:                 TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:                 TransactionController.ISOLATION_SERIALIZABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:											  TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:											  TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:											  TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:										  TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:										  TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:								  TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:								  TransactionController.ISOLATION_SERIALIZABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:	 * @return The isolation level of the scan (in TransactionController constants).
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/TemporaryRowHolderOperation.java:		return TransactionController.ISOLATION_SERIALIZABLE;	
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/UpdateOperation.java:        SpliceConglomerate conglomerate = (SpliceConglomerate)((SpliceTransactionManager)activation.getTransactionController()).findConglomerate(heapConglom);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/UpdateOperation.java:								Get remoteGet = SpliceUtils.createGet(operationInformation.getTransaction(),location);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/WindowOperation.java:        SpliceRuntimeContext firstStep = SpliceRuntimeContext.generateSinkRuntimeContext(operationInformation.getTransaction(), true);
src//main/java/com/splicemachine/derby/impl/sql/execute/operations/WindowOperation.java:        SpliceRuntimeContext secondStep = SpliceRuntimeContext.generateSinkRuntimeContext(operationInformation.getTransaction(),false);
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceGenericConstantActionFactory.java:	public ConstantAction getSetTransactionIsolationConstantAction(int isolationLevel) {
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceGenericConstantActionFactory.java:		return new SetTransactionIsolationConstantOperation(isolationLevel);
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceGenericResultSetFactory.java:    public ResultSet getSetTransactionResultSet(Activation activation)
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceGenericResultSetFactory.java:            SpliceOperation top = new SetTransactionOperation(activation);
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:									false,//irs.constants.lockMode == TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:					false,//urs.constants.lockMode == TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:					false,//urs.constants.lockMode == TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:					false,//urs.constants.lockMode == TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_SERIALIZABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_REPEATABLE_READ:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_UNCOMMITTED:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_TABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_RECORD:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_SERIALIZABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_REPEATABLE_READ:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_UNCOMMITTED:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_TABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_RECORD:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_SERIALIZABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_REPEATABLE_READ:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_TABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_RECORD:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_SERIALIZABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_REPEATABLE_READ:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_COMMITTED:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.ISOLATION_READ_UNCOMMITTED:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_TABLE:
src//main/java/com/splicemachine/derby/impl/sql/execute/SpliceRealResultSetStatisticsFactory.java:				case TransactionController.MODE_RECORD:
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:			TransactionController tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                 TransactionController.IS_TEMPORARY | 
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                 TransactionController.IS_KEPT);
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                             TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                             TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                             TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:				TransactionController tc =
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:					activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                     (TransactionController.IS_TEMPORARY | 
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                      TransactionController.IS_KEPT));
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:								TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:								TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:								TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:			TransactionController tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                 (TransactionController.IS_TEMPORARY | 
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                  TransactionController.IS_KEPT));
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                 TransactionController.OPENMODE_FORUPDATE,
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                 TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:                 TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:		TransactionController tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/sql/execute/TemporaryRowHolderImpl.java:		TransactionController tc = activation.getTransactionController();
src//main/java/com/splicemachine/derby/impl/stats/ColumnStatisticsStore.java:	public Map<String,List<ColumnStatistics>> fetchColumnStats(TxnView txn, long conglomerateId, Collection<String> partitions) throws ExecutionException;
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:            TxnView txn = TransactionLifecycle.getLifecycleManager().beginTransaction(Txn.IsolationLevel.READ_UNCOMMITTED);
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:            refreshThread.scheduleAtFixedRate(new Refresher(txn),0l,StatsConstants.partitionCacheExpiration,TimeUnit.MILLISECONDS);
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:    public Map<String, List<ColumnStatistics>> fetchColumnStats(TxnView txn, long conglomerateId, Collection<String> partitions) throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:        try(SortedMultiScanner scanner = getScanner(txn, conglomerateId, toFetch)){
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:    private SortedMultiScanner getScanner(TxnView txn, long conglomId, List<String> toFetch) {
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:        byte[] encodedTxn = TransactionOperations.getOperationFactory().encode(txn);
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:        Map<String,byte[]> txnAttributeMap = new HashMap<>();
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:        txnAttributeMap.put(SIConstants.SI_TRANSACTION_ID_KEY, encodedTxn);
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:        txnAttributeMap.put(SIConstants.SI_NEEDED, SIConstants.SI_NEEDED_VALUE_BYTES);
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:            return getGlobalScanner(txnAttributeMap);
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:            scanner.setFilter(new AsyncAttributeHolder(txnAttributeMap));
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:        private final TxnView baseTxn; //should be read-only, and use READ_UNCOMMITTED isolation level
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:        public Refresher(TxnView baseTxn) {
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:            this.baseTxn = baseTxn;
src//main/java/com/splicemachine/derby/impl/stats/HBaseColumnStatisticsStore.java:            try(SortedMultiScanner scanner = getScanner(baseTxn, -1, null)) {
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:            TxnView refreshTxn = TransactionLifecycle.getLifecycleManager().beginTransaction(Txn.IsolationLevel.READ_UNCOMMITTED);
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:            refreshThread.scheduleAtFixedRate(new Refresher(refreshTxn),0l,StatsConstants.partitionCacheExpiration/3,TimeUnit.MILLISECONDS);
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:    public TableStatisticsDescriptor[] fetchTableStatistics(TxnView txn, long conglomerateId, List<String> partitionsToFetch) throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        TxnOperationFactory txnOperationFactory = TransactionOperations.getOperationFactory();
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:            gets.add(txnOperationFactory.newGet(txn, key));
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:    private com.splicemachine.async.Scanner getScanner(TxnView txn, long conglomId, List<String> toFetch) {
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        byte[] encodedTxn = TransactionOperations.getOperationFactory().encode(txn);
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        Map<String,byte[]> txnAttributeMap = new HashMap<>();
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        txnAttributeMap.put(SIConstants.SI_TRANSACTION_ID_KEY, encodedTxn);
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        txnAttributeMap.put(SIConstants.SI_NEEDED, SIConstants.SI_NEEDED_VALUE_BYTES);
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        return getGlobalScanner(txnAttributeMap);
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        private final TxnView refreshTxn;
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:        public Refresher(TxnView refreshTxn) {
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:            this.refreshTxn = refreshTxn;
src//main/java/com/splicemachine/derby/impl/stats/HBaseTableStatisticsStore.java:            com.splicemachine.async.Scanner scanner = getScanner(refreshTxn, -1, null);
src//main/java/com/splicemachine/derby/impl/stats/IndexStatisticsCollector.java:    public IndexStatisticsCollector(Txn txn,
src//main/java/com/splicemachine/derby/impl/stats/IndexStatisticsCollector.java:                                    TransactionalRegion txnRegion,
src//main/java/com/splicemachine/derby/impl/stats/IndexStatisticsCollector.java:        super(txn,
src//main/java/com/splicemachine/derby/impl/stats/IndexStatisticsCollector.java:                txnRegion,
src//main/java/com/splicemachine/derby/impl/stats/IndexStatisticsCollector.java:        getBuffer[bufferPos] = TransactionOperations.getOperationFactory().newGet(txn,rowLocation);
src//main/java/com/splicemachine/derby/impl/stats/IndexStatsCostController.java:        BaseSpliceTransaction bst = (BaseSpliceTransaction)indexConglomerate.getTransaction();
src//main/java/com/splicemachine/derby/impl/stats/IndexStatsCostController.java:        TxnView txn = bst.getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/stats/IndexStatsCostController.java:            baseTableStatistics = StatisticsStorage.getPartitionStore().getStatistics(txn, heapConglomerateId);
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:    public OverheadManagedTableStatistics getStatistics(TxnView wrapperTxn,long conglomerateId) throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:        Txn txn = getTxn(wrapperTxn);
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:            return fetchTableStatistics(conglomerateId, txn);
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:                txn.commit();
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:            	// this should never happen, since we are making a read-only transaction
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:    private OverheadManagedTableStatistics fetchTableStatistics(long conglomerateId, Txn txn) throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:        TableStatisticsDescriptor[] tableStatses = tableStatsReader.fetchTableStatistics(txn, conglomerateId, partitionNames);
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:        Map<String, List<ColumnStatistics>> columnStatsMap = columnStatsReader.fetchColumnStats(txn, conglomerateId, columnStatsFetchable);
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:    private Txn getTxn(TxnView wrapperTxn) throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/stats/PartitionStatsStore.java:            return TransactionLifecycle.getLifecycleManager().beginChildTransaction(wrapperTxn, Txn.IsolationLevel.READ_UNCOMMITTED,null);
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:    protected final TxnView txn;
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:    private final TransactionalRegion txnRegion;
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:    public StatisticsCollector(TxnView txn,
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:                               TransactionalRegion txnRegion,
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:        this.txnRegion = txnRegion;
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:        this.tableConglomerateId=Long.parseLong(txnRegion.getTableName());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:            String tableId = txnRegion.getTableName();
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:            String regionId = txnRegion.getRegionName();
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:        Scan scan =TransactionOperations.getOperationFactory().newScan(txn);
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:                .transaction(txn)
src//main/java/com/splicemachine/derby/impl/stats/StatisticsCollector.java:                .region(txnRegion)
src//main/java/com/splicemachine/derby/impl/stats/StatisticsJob.java:    private TxnView txn;
src//main/java/com/splicemachine/derby/impl/stats/StatisticsJob.java:                         TxnView txn) {
src//main/java/com/splicemachine/derby/impl/stats/StatisticsJob.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/stats/StatisticsJob.java:    @Override public TxnView getTxn() { return txn; }
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        Txn txn = getTxn();
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        try(TransactionalRegion txnRegion = TransactionalRegions.get(region)) {
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:            markCollectionInProgress(txnRegion,statsTableIds[0]);
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:                collector = new StatisticsCollector(txn,
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:                        txnRegion,
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:                collector = new IndexStatisticsCollector(txn,
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:                        txnRegion,
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:            writeTableStats(txnRegion, statsTableIds[0], collected);
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:            writeColumnStats(txnRegion, statsTableIds[1], collected.columnStatistics());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:    protected Txn beginChildTransaction(TxnView parentTxn, TxnLifecycleManager tc) throws IOException {
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        return tc.beginChildTransaction(parentTxn, Txn.IsolationLevel.READ_UNCOMMITTED, "statistics".getBytes());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:    private void writeColumnStats(TransactionalRegion txnRegion,long columnStatsConglomerate,List<ColumnStatistics> collected) throws ExecutionException {
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        long tableConglomerateId = Long.parseLong(txnRegion.getTableName());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        try(CallBuffer<KVPair> buffer = SpliceDriver.driver().getTableWriter().writeBuffer(Long.toString(columnStatsConglomerate).getBytes(),getTxn())){
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:    private void markCollectionInProgress(TransactionalRegion txnRegion,long tableStatsConglomerate) throws ExecutionException{
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        long tableConglomerateId = Long.parseLong(txnRegion.getTableName());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        try(CallBuffer<KVPair> buffer = SpliceDriver.driver().getTableWriter().writeBuffer(Long.toString(tableStatsConglomerate).getBytes(),getTxn())){
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:    private void writeTableStats(TransactionalRegion txnRegion,
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        long tableConglomerateId = Long.parseLong(txnRegion.getTableName());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        try(CallBuffer<KVPair> buffer = SpliceDriver.driver().getTableWriter().writeBuffer(Long.toString(tableStatsConglomerate).getBytes(),getTxn())){
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java://            System.out.printf("Recording row %s|%s: %s|%b|%b|%d|%d|%d|%d%n",tableConglomerateId,txnRegion.getRegionName(),
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:        try (SpliceTransactionResourceImpl txn = new SpliceTransactionResourceImpl()){
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:            txn.marshallTransaction(getTxn());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:                    sysSchema, lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:                    sysSchema, lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/stats/StatisticsTask.java:                    sysSchema, lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/impl/stats/TableStatisticsStore.java:    TableStatisticsDescriptor[] fetchTableStatistics(TxnView txn,long conglomerateId,List<String> partitionsToFetch) throws ExecutionException;
src//main/java/com/splicemachine/derby/impl/storage/AsyncClientScanProvider.java:        SpliceDriver.driver().getTaskReporter().report(stats,spliceRuntimeContext.getTxn());
src//main/java/com/splicemachine/derby/impl/storage/BaseHashAwareScanBoundary.java:    public Scan buildScan(Txn txn, byte[] start, byte[] finish) {
src//main/java/com/splicemachine/derby/impl/storage/BaseHashAwareScanBoundary.java:        Scan scan = SpliceUtils.createScan(txn);
src//main/java/com/splicemachine/derby/impl/storage/ClientScanProvider.java:				SpliceDriver.driver().getTaskReporter().report(stats, spliceRuntimeContext.getTxn());
src//main/java/com/splicemachine/derby/impl/storage/DistributedClientScanProvider.java:        SpliceDriver.driver().getTaskReporter().report(stats,spliceRuntimeContext.getTxn());
src//main/java/com/splicemachine/derby/impl/storage/MultiProbeClientScanProvider.java:				SpliceDriver.driver().getTaskReporter().report(stats,spliceRuntimeContext.getTxn());
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:    private final Txn txn;
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:		private RegionAwareScanner(Txn txn,
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:				this.txn = txn;
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:    private RegionAwareScanner(Txn txn,
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:				this(txn,table,region,new Scan(scanStart,scanFinish),scanBoundary,metricFactory);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:    public static RegionAwareScanner create(Txn txn, HRegion region, ScanBoundary boundary,
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:        return new RegionAwareScanner(txn,table,region,scanStart,scanFinish,boundary, metricFactory);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:    public static RegionAwareScanner create(Txn txn, HRegion region, Scan localScan,
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:        return new RegionAwareScanner(txn,table,region,localScan,boundary, metricFactory);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:        localScan = boundary.buildScan(txn,localStart,localFinish);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:            lookBehindScan = boundary.buildScan(txn,remoteStart,regionFinish);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:            lookAheadScan = boundary.buildScan(txn,regionFinish,remoteFinish);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:            Scan aheadScan = boundary.buildScan(txn,regionFinish,scanFinish);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:            aheadScan.setFilter(getCorrectFilter(scan.getFilter(),txn));
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:            Scan startScan = boundary.buildScan(txn,regionStart,regionFinish);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:            startScan.setFilter(getCorrectFilter(scan.getFilter(), txn));
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:                    Scan behindScan = boundary.buildScan(txn, startKey, regionStart);
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:    private Filter getCorrectFilter(Filter filter, Txn txn) {
src//main/java/com/splicemachine/derby/impl/storage/RegionAwareScanner.java:				if(txn!=null||filter==null)
src//main/java/com/splicemachine/derby/impl/storage/RowProviders.java:				return new MultiScanOperationJob(scans, instructions, table,instructions.getTxn(), SpliceConstants.operationTaskPriority);
src//main/java/com/splicemachine/derby/impl/storage/RowProviders.java:								OperationSink opSink = OperationSinkFactory.create((SinkingOperation) op, null, instructions.getTxn(),
src//main/java/com/splicemachine/derby/impl/storage/RowProviders.java:								taskReporter.report(opStat,spliceRuntimeContext.getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/BackingStoreHashTableFromScan.java:Transactions are obtained from an AccessFactory.
src//main/java/com/splicemachine/derby/impl/store/access/BackingStoreHashTableFromScan.java:        TransactionController   tc,
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:	protected TransactionManager transactionManager;
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:	protected Transaction transaction;
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:	public OpenSpliceConglomerate(TransactionManager transactionManager,
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:                                  Transaction transaction,
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:		this.transactionManager = transactionManager;
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:		this.transaction = transaction;
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:			((BaseSpliceTransaction)transaction).setActiveState(false, false, null);
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:	public TransactionManager getTransactionManager() {
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:		return transactionManager;
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:	public Transaction getTransaction() {
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:		return transaction;
src//main/java/com/splicemachine/derby/impl/store/access/base/OpenSpliceConglomerate.java:			rowTemplate = RowUtil.newTemplate(getTransaction().getDataValueFactory(), null, getFormatIds(), getCollationIds());
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceBaseFileResource.java:// about 3K lines long.  Unfortunately, most of that logic is related to dealing with transactions, logging, and
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceBaseFileResource.java:// move the burden of transactions, logging, and I/O to HBase (co-processors, observers, etc.).
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceBaseFileResource.java:// The current implementation of JAR file storage for Splice does not include versioning, transactions, logging, or
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceBaseFileResource.java:// HDFS to allow all Splice nodes to access the JAR files.  And the final product should include full transactional
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceConglomerate.java:            Transaction             rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceConglomerate.java:            ((SpliceTransaction)rawtran).setActiveState(false, false, null);
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceConglomerate.java:        return (tmpFlag & TransactionController.IS_TEMPORARY) == TransactionController.IS_TEMPORARY;
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:		protected BaseSpliceTransaction trans;
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:    public SpliceController(OpenSpliceConglomerate openSpliceConglomerate, Transaction trans) {
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:        this.trans = (BaseSpliceTransaction)trans;
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:            if ((openSpliceConglomerate != null) && (openSpliceConglomerate.getTransactionManager() != null))
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:                openSpliceConglomerate.getTransactionManager().closeMe(this);
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:		public boolean closeForEndTransaction(boolean closeHeldScan) throws StandardException { return false; }
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:						SpliceUtils.doDelete(htable, ((SpliceTransaction)trans).getTxn(), loc.getBytes());
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:						Get get = SpliceUtils.createGet(loc, destRow, validColumns, trans.getTxnInformation());
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:    protected void elevateTransaction() throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceController.java:        ((SpliceTransaction)trans).elevate(Bytes.toBytes(Long.toString(openSpliceConglomerate.getConglomerate().getContainerid())));
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:    private BaseSpliceTransaction trans;
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:											Transaction trans,
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:						((BaseSpliceTransaction)trans).setActiveState(false, false, null);
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:        this.trans = (BaseSpliceTransaction)trans;
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:											Transaction trans,
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:        this.trans = (BaseSpliceTransaction)trans;
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:										sortOrder, scanColumnList, trans.getActiveStateTxn(),sameStartStop,
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:            SpliceUtils.doDelete(table, trans.getActiveStateTxn(), this.currentResult.getRow());
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:		public boolean closeForEndTransaction(boolean closeHeldScan) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:												spliceConglomerate.getTransaction().getDataValueFactory(),
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java://            ((SpliceTransaction)trans).elevate(table.getTableName());
src//main/java/com/splicemachine/derby/impl/store/access/base/SpliceScan.java:						Put put = SpliceUtils.createPut(currentRowLocation.getBytes(),trans.getActiveStateTxn());
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:public abstract class BaseSpliceTransaction implements Transaction {
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    protected SpliceTransactionFactory spliceTransactionFactory;
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    protected SpliceTransactionContext transContext;
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    public void setTransactionName(String s) {
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    public String getTransactionName() {
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    @Override public FileResource getFileHandler() { return (spliceTransactionFactory == null ? null : spliceTransactionFactory.getFileHandler()); }
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    @Override public void createXATransactionFromLocalTransaction(int format_id, byte[] global_id, byte[] branch_id) throws StandardException {  }
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    @Override public GlobalTransactionId getGlobalId() { return null; }
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    public abstract TxnView getTxnInformation();
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    public abstract void setActiveState(boolean nested, boolean additive, TxnView parentTxn,byte[] table);
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    public abstract void setActiveState(boolean nested, boolean additive, TxnView parentTxn);
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:    public TxnView getActiveStateTxn(){
src//main/java/com/splicemachine/derby/impl/store/access/BaseSpliceTransaction.java:        return getTxnInformation();
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            Transaction             rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java://            ((SpliceTransaction)rawtran).elevate(Bytes.toBytes(Long.toString(containerId)));
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            ConglomerateUtils.createConglomerate(containerId, this, ((SpliceTransaction)rawtran).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            TransactionManager  xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:    public void drop(TransactionManager xact_manager) throws StandardException{
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:    public StaticCompiledOpenConglomInfo getStaticCompiledConglomInfo(TransactionController tc,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:    public long load(TransactionManager xact_manager, boolean createConglom,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            TransactionManager              xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            Transaction                     rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:    public ScanManager openScan(TransactionManager xact_manager, Transaction rawtran, boolean hold,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            TransactionManager              xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            Transaction                     rawtran) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            TransactionManager              xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            Transaction                     rawtran) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            TransactionManager              xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:            Transaction                     rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:                                             TransactionManager xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:                                             Transaction rawtran) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:                TransactionController.MODE_TABLE, null, null, null, this);
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:        Conglomerate baseTableConglomerate=((SpliceTransactionManager)xact_manager)
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:    public boolean fetchMaxOnBTree(TransactionManager xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerate.java:                                   Transaction rawtran, long conglomId, int open_mode, int lock_level,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerateFactory.java:    TransactionManager      xact_mgr,
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerateFactory.java:    public Conglomerate readConglomerate(TransactionManager xact_mgr,ContainerKey container_key) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexConglomerateFactory.java:    	return ConglomerateUtils.readConglomerate(container_key.getContainerId(), IndexConglomerate.class, ((SpliceTransactionManager)xact_mgr).getActiveStateTxn());
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexController.java:		public IndexController(OpenSpliceConglomerate openSpliceConglomerate, Transaction trans, int nKeyFields) {
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexController.java:						Get get = SpliceUtils.createGet(((SpliceTransaction)trans).getTxn(), rowKey);
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexController.java:							Put put = SpliceUtils.createPut(rowKey,((SpliceTransaction)trans).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexController.java:						Put put = SpliceUtils.createPut(rowKey,((SpliceTransaction)trans).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexController.java:								put = SpliceUtils.createPut(DerbyBytesUtil.generateIndexKey(row,sortOrder,"1.0", false),((SpliceTransaction)trans).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexController.java:								Get get = SpliceUtils.createGet(loc, oldValues, null, trans.getTxnInformation());
src//main/java/com/splicemachine/derby/impl/store/access/btree/IndexController.java:										put = SpliceUtils.createPut(rowKey,((SpliceTransaction)trans).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            Transaction             rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:        //elevate the transaction
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java://        ((SpliceTransaction)rawtran).elevate(Bytes.toBytes(Long.toString(containerId)));
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:        ConglomerateUtils.createConglomerate(containerId,this, ((SpliceTransaction)rawtran).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:    public void addColumn(TransactionManager xact_manager, int column_id, Storable template_column, int collation_id) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            ConglomerateUtils.updateConglomerate(this, (Txn)((SpliceTransactionManager)xact_manager).getActiveStateTxn());
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:    public void drop(TransactionManager xact_manager) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            TransactionManager      xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            Transaction             rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            TransactionController   tc,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            TransactionManager      xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            TransactionManager              xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            Transaction                     rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            TransactionManager              xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            Transaction                     rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:    public void purgeConglomerate(TransactionManager xact_manager,Transaction rawtran) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:    public void compressConglomerate(TransactionManager xact_manager,Transaction rawtran) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            TransactionManager              xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:            Transaction                     rawtran,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:                                             TransactionManager xact_manager,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:                                             Transaction rawtran) throws StandardException{
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerate.java:                TransactionController.MODE_TABLE, null, null, null, this);
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerateFactory.java:    TransactionManager      xact_mgr,
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerateFactory.java:    public Conglomerate readConglomerate(TransactionManager xact_mgr, ContainerKey container_key) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseConglomerateFactory.java:    	return ConglomerateUtils.readConglomerate(container_key.getContainerId(), HBaseConglomerate.class, ((SpliceTransactionManager)xact_mgr).getActiveStateTxn());
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseController.java:    public HBaseController(OpenSpliceConglomerate openSpliceConglomerate, Transaction trans) {
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseController.java:                    openSpliceConglomerate.getConglomerate().getContainerid(),(row==null ? null : Arrays.toString(row)),trans.getTxnInformation()));
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseController.java:            Put put = SpliceUtils.createPut(SpliceUtils.getUniqueKey(), ((SpliceTransaction)trans).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseController.java:            Put put = SpliceUtils.createPut(SpliceUtils.getUniqueKey(), ((SpliceTransaction)trans).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/hbase/HBaseController.java:            Put put = SpliceUtils.createPut(loc.getBytes(),((SpliceTransaction)trans).getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:	protected SpliceTransactionFactory transactionFactory;
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		return transactionFactory.getLockFactory();
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:			return (Object) transactionFactory.getXAResourceManager();
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:	public TransactionInfo[] getTransactionInfo() {
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		return new TransactionInfo[0];
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		public void getRawStoreProperties(TransactionController transactionController) {
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		public Transaction marshallTransaction(ContextManager contextManager, String transactionName, TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:				return transactionFactory.marshalTransaction(transactionName, txn);
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		 * Finds or creates a new user-level transaction. If the Context manager already has a user-level transaction
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		 * available, then this will return that one; otherwise, a new user-level transaction is created. This therefore
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		public Transaction findUserTransaction(ContextManager contextManager, String transactionName) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:				return transactionFactory.findUserTransaction(this, contextManager, transactionName);
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		 * Start a "global transaction". In this case, it delegates to just creating a new top-level transaction.
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		public Transaction startGlobalTransaction(ContextManager contextManager, int format_id, byte[] global_id, byte[] branch_id) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:				return transactionFactory.startTransaction(this, contextManager, null);
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:		public Transaction startNestedTransaction(CompatibilitySpace lockSpace,
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:																							String nestedReadonlyUserTrans, Txn parentTxn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:				return transactionFactory.startNestedTransaction(this, contextManager, parentTxn);
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:				transactionFactory = new SpliceTransactionFactory();
src//main/java/com/splicemachine/derby/impl/store/access/HBaseStore.java:				transactionFactory.boot(create, properties);
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	public PropertyConglomerate(TransactionController tc, boolean create, Properties properties, PropertyFactory pf) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:                    TransactionController.IS_DEFAULT);
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	 * @param tc        The transaction to do the Conglomerate work under.
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public ScanController openScan(TransactionController tc, String key, int open_mode) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:                TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:                TransactionController.ISOLATION_SERIALIZABLE,
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public void setPropertyDefault(TransactionController tc, String key, Serializable value) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public boolean propertyDefaultIsVisible(TransactionController tc,String key) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public void saveProperty(TransactionController tc, String key, Serializable value) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:		ScanController scan = this.openScan(tc, key, TransactionController.OPENMODE_FORUPDATE);
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:                        TransactionController.OPENMODE_FORUPDATE, 
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:                        TransactionController.MODE_TABLE,
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:                        TransactionController.ISOLATION_SERIALIZABLE);
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public void savePropertyDefault(TransactionController tc, String key, Serializable value) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public Serializable validateApplyAndMap(TransactionController tc, String key, Serializable value, boolean dbOnlyProperty) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public boolean bootPasswordChange(TransactionController tc, String key, Serializable value) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:			AccessFactory af = ((TransactionManager)tc).getAccessManager();
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	 * @param	tc		The transaction to do the Conglomerate work under.
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public void setProperty(TransactionController tc, String key, Serializable value, boolean dbOnlyProperty) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public Serializable readProperty(TransactionController tc, String key) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public Serializable getCachedProperty(TransactionController tc, String key) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public Serializable getCachedPropertyDefault(TransactionController tc, String key, Dictionary dbProps) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	 * @param tc      The transaction to do the Conglomerate work under.
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public Serializable getProperty(TransactionController tc, String key)  throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public Serializable getPropertyDefault(TransactionController tc, String key) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:    public Properties getProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	public void getProperties(TransactionController tc, Dictionary d, boolean stringsOnly, boolean defaultsOnly) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	public Properties getStoreProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	public void getStoreProperties(TransactionController tc, Dictionary d, boolean stringsOnly, boolean defaultsOnly) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	public Properties getServiceProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	public void getServiceProperties(TransactionController tc, Dictionary d, boolean stringsOnly, boolean defaultsOnly) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	private Dictionary readProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	private Dictionary readStoreProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	private Dictionary readServiceProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	private Dictionary getCachedProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	private Dictionary getCachedStoreProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java:	private Dictionary getCachedServiceProperties(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    private int system_lock_level = TransactionController.MODE_RECORD;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    PropertyConglomerate getTransactionalProperties() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    protected void bootLookupSystemLockLevel(TransactionController tc) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            system_lock_level = TransactionController.MODE_TABLE;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:	/* package */ Conglomerate conglomCacheFind(TransactionManager xact_mgr,long conglomid) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    private boolean canSeeDDLDemarcationPoint(TransactionManager xact_mgr) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            // If the transaction is older than the latest DDL operation (can't see it), bypass the cache
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            return ddlDemarcationPoint == null || ddlDemarcationPoint.isVisibleBy(((SpliceTransactionManager)xact_mgr).getActiveStateTxn());
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    public TransactionController getTransaction(ContextManager cm) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        return getAndNameTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                TxnView txn = ddlChange.getTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    txn.allowsWrites();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        throw new IOException("DDLChange "+ddlChange+" does not have a writable transaction");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                TransactionReadController txController = HTransactorFactory.getTransactionReadController();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                DDLFilter ddlFilter = txController.newDDLFilter(ddlChange.getTxn());
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    public TransactionController getAndNameTransaction( ContextManager cm, String transName) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:				 * This call represents the top-level transactional access point. E.g., the top-level user transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:				 * is created by a call to this method. Thereafter, the transaction created here should be passed around
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:				 * See if there's already a transaction context. If there is, then we just work with the one
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        SpliceTransactionManagerContext rtc = (SpliceTransactionManagerContext)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            return rtc.getTransactionManager(); //we already have a transaction from the context
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:				 * We need to create a new transaction controller. Maybe we already have a transaction, but
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:				 * Note that this puts the raw store transaction context above the access context, which is
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        Transaction rawtran = rawstore.findUserTransaction(cm, transName);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        SpliceTransactionManager rt = new SpliceTransactionManager(this, rawtran, null);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        rtc = new SpliceTransactionManagerContext(cm, AccessFactoryGlobals.RAMXACT_CONTEXT_ID, rt, false /* abortAll */);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        TransactionController tc = rtc.getTransactionManager();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    public TransactionController marshallTransaction( ContextManager cm , TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        Transaction transaction = rawstore.marshallTransaction(cm, AccessFactoryGlobals.USER_TRANS_NAME, txn);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        SpliceTransactionManager transactionManager = new SpliceTransactionManager(this, transaction, null);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        SpliceTransactionManagerContext rtc = new SpliceTransactionManagerContext(cm, AccessFactoryGlobals.RAMXACT_CONTEXT_ID, transactionManager, false /* abortAll */);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        return rtc.getTransactionManager();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    public /* XATransactionController */ Object startXATransaction(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        SpliceTransactionManager stm = null;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        // See if there's already a transaction context.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        SpliceTransactionManagerContext rtc = (SpliceTransactionManagerContext)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            // No transaction context.  Create or find a raw store transaction,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            // raw store transaction context above the access context, which is
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            Transaction rawtran =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    rawstore.startGlobalTransaction(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            stm = new SpliceTransactionManager(this, rawtran, null);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    new SpliceTransactionManagerContext(cm, AccessFactoryGlobals.RAMXACT_CONTEXT_ID, stm, false /* abortAll */);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            // RESOLVE - an XA transaction can only commit once so, if we
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                // the same global transaction id.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.RELEASE_LOCKS |
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                                TransactionController.READONLY_TRANSACTION_INITIALIZATION);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            // the same global transaction id.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    TransactionController.RELEASE_LOCKS |
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                            TransactionController.READONLY_TRANSACTION_INITIALIZATION);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        "RAMTransactionContext found on stack.");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    private void addPropertySetNotification(PropertySetCallback who, TransactionController tc) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:    public TransactionInfo[] getTransactionInfo()
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        return rawstore.getTransactionInfo();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        SpliceTransactionManager tc = (SpliceTransactionManager) getAndNameTransaction(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_SERIALIZABLE, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        table_level_policy[TransactionController.ISOLATION_NOLOCK] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_NOLOCK, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        table_level_policy[TransactionController.ISOLATION_READ_UNCOMMITTED] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_READ_UNCOMMITTED, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        table_level_policy[TransactionController.ISOLATION_READ_COMMITTED] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_READ_COMMITTED, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        table_level_policy[TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        table_level_policy[TransactionController.ISOLATION_REPEATABLE_READ] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_REPEATABLE_READ, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        table_level_policy[TransactionController.ISOLATION_SERIALIZABLE] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_SERIALIZABLE, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        record_level_policy[TransactionController.ISOLATION_NOLOCK] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_NOLOCK, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        record_level_policy[TransactionController.ISOLATION_READ_UNCOMMITTED] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_READ_UNCOMMITTED, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        record_level_policy[TransactionController.ISOLATION_READ_COMMITTED] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_READ_COMMITTED, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        record_level_policy[TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_READ_COMMITTED_NOHOLDLOCK,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        record_level_policy[TransactionController.ISOLATION_REPEATABLE_READ] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_REPEATABLE_READ, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        record_level_policy[TransactionController.ISOLATION_SERIALIZABLE] =
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                        TransactionController.ISOLATION_SERIALIZABLE, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            for (int i = 0;i < TransactionController.ISOLATION_SERIALIZABLE;i++) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:            ((SpliceTransaction)tc.getRawTransaction()).elevate("boot".getBytes());
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        // set up the transaction properties.  On J9, over NFS, runing on a
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        lock_mode = (getSystemLockLevel() == TransactionController.MODE_TABLE ? LockingPolicy.MODE_CONTAINER : LockingPolicy.MODE_RECORD);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:        system_default_locking_policy =tc.getRawStoreXact().newLockingPolicy(lock_mode,TransactionController.ISOLATION_SERIALIZABLE, true);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    TransactionController.OPENMODE_USE_UPDATE_LOCKS ==
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    TransactionController.OPENMODE_SECONDARY_LOCKED ==
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    TransactionController.OPENMODE_BASEROW_INSERT_LOCKED ==
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    TransactionController.OPENMODE_FORUPDATE ==
src//main/java/com/splicemachine/derby/impl/store/access/SpliceAccessManager.java:                    TransactionController.OPENMODE_FOR_LOCK_ONLY ==
src//main/java/com/splicemachine/derby/impl/store/access/SpliceLockFactory.java:	//private TxnLockManager lockManager;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:public class SpliceTransaction extends BaseSpliceTransaction {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:		private Deque<Pair<String,Txn>> txnStack = new LinkedList<Pair<String, Txn>>();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:		public SpliceTransaction(CompatibilitySpace compatibilitySpace,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:														 SpliceTransactionFactory spliceTransactionFactory,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:				this.spliceTransactionFactory = spliceTransactionFactory;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:		public SpliceTransaction(CompatibilitySpace compatibilitySpace,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:														 SpliceTransactionFactory spliceTransactionFactory,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:														 String transName, Txn txn) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:				this.spliceTransactionFactory = spliceTransactionFactory;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        txnStack.push(Pair.newPair(transName,txn));
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Txn currentTxn = getTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            Txn child = TransactionLifecycle.getLifecycleManager().beginChildTransaction(currentTxn,null);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            txnStack.push(Pair.newPair(name,child));
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        return txnStack.size();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        for(Pair<String,Txn> savePoint:txnStack){
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Pair<String,Txn> savePoint;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            savePoint = txnStack.pop();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        return txnStack.size();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:    private void doCommit(Pair<String, Txn> savePoint) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        for(Pair<String,Txn> savePoint:txnStack){
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Pair<String,Txn> savePoint;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            savePoint = txnStack.pop();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                savePoint.getSecond().rollback(); //commit the child transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            throw StandardException.newException("Transaction has already closed and cannot commit again");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Pair<String, Txn> userPair = txnStack.peekLast();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Txn txn = userPair.getSecond();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            txn.commit();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        txnStack.clear();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            while(txnStack.size()>0){
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                txnStack.pop().getSecond().rollback();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        if(txnStack.size()>0)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            return txnStack.peek().getSecond().toString();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:    public Txn getActiveStateTxn() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        if(txnStack.size()>0)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            return txnStack.peek().getSecond();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:				SpliceTransactionContext tempxc = transContext;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:    public final void setActiveState(boolean nested, boolean additive, TxnView parentTxn) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        setActiveState(nested, additive, parentTxn,null);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:		public final void setActiveState(boolean nested, boolean additive, TxnView parentTxn,byte[] table) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                    TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                    Txn txn;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                        txn = lifecycleManager.beginChildTransaction(parentTxn,parentTxn.getIsolationLevel(), additive,table);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                        txn = lifecycleManager.beginTransaction();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                    txnStack.push(Pair.newPair(transName,txn));
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:		public int getTransactionStatus() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:		public Txn getTxn() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        if(txnStack.size()>0)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            return txnStack.peek().getSecond();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:		public void setTxn(Txn txn) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        this.txnStack.peek().setSecond(txn);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:    public Txn elevate(byte[] writeTable) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Iterator<Pair<String,Txn>> parents = txnStack.descendingIterator();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Txn lastTxn = null;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            Pair<String,Txn> next = parents.next();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            Txn n = doElevate(writeTable, next.getSecond(), lastTxn);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:            lastTxn = n;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        return txnStack.peek().getSecond();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        txnStack.clear();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:    public TxnView getTxnInformation() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        return getTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        sb.append("SpliceTransaction[");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        sb.append(getTransactionStatusAsString());
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        sb.append(","+getTxn()+"]");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:	 * Return the state of the transaction as a string (e.g. IDLE, ACTIVE, CLOSED, etc.).
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:	 * @return the current state of the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:	private String getTransactionStatusAsString() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        for(Pair<String,Txn> savePoint:txnStack) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        	sb.append(String.format("name=%s, txn=%s\n", savePoint.getFirst(), savePoint.getSecond()));
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        Txn txn = getTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        return txn!=null && txn.allowsWrites();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:    private Txn doElevate(byte[] writeTable, Txn currentTxn,TxnView elevatedParent) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        if(!currentTxn.allowsWrites()){
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                ((ReadOnlyTxn)currentTxn).parentWritable(elevatedParent);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:                currentTxn = currentTxn.elevateToWritable(writeTable);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransaction.java:        return currentTxn;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:public class SpliceTransactionContext extends ContextImpl {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:	private SpliceTransaction transaction;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:	private		boolean   abortAll; // true if any exception causes this transaction to be aborted.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:	SpliceTransactionContext(ContextManager cm, String name, SpliceTransaction transaction, boolean abortAll, HBaseStore factory) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:		this.transaction = transaction;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:		transaction.transContext = this;	// double link between transaction and myself
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				// any error aborts an internal/nested xact and its transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				// If the severity is lower than a transaction error then do nothing.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				// transaction, not just abort it.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:			// some java* error, throw away the transaction.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:			if (transaction != null) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				// abort the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				transaction.abort();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				transaction.close();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				transaction = null;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:	SpliceTransaction getTransaction() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:		return transaction;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:	void substituteTransaction(SpliceTransaction newTran)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				+",status="+transaction.getTransactionStatus()+",id="+transaction.toString()+")");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:				+",status="+newTran.getTransactionStatus()+",id="+newTran.toString()+")");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:		SpliceTransaction oldTran = (SpliceTransaction)transaction;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:		// set up double link between new transaction and myself
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:		transaction = newTran;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionContext.java:		((SpliceTransaction)transaction).transContext = this;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:public class SpliceTransactionFactory implements ModuleControl, ModuleSupportable{
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		protected static final String USER_CONTEXT_ID = "UserTransaction";
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		protected static final String NESTED_READONLY_USER_CONTEXT_ID = "NestedRawReadOnlyUserTransaction";
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * place a transaction which was created outside of derby (e.g. across a serialization boundary, or a
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * manually-created transaction) within the context of Derby, so that derby system calls can be used.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * This is relatively cheap--it creates a new object, but registers the existing transaction, rather than
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param transName the name of the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param txn the transaction to marshall
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @return a derby representation of the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		public Transaction marshalTransaction(String transName, TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						return new SpliceTransactionView(NoLockSpace.INSTANCE, this, dataValueFactory, transName, txn);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * Starts a new transaction with the given name.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * This will create a new top-level transaction. As such, it will likely be an expensive network operation.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param hbaseStore the hbase store relevant to the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param transName the name of the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @return a new transaction with the specified name and context.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @throws StandardException if something goes wrong creating the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		public Transaction startTransaction(HBaseStore hbaseStore, ContextManager contextMgr, String transName) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:			checkContextAndStore(hbaseStore, contextMgr, "startTransaction");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:			return startCommonTransaction(hbaseStore, contextMgr,  dataValueFactory, transName, false, USER_CONTEXT_ID);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * Start a "nested" transaction.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * Derby's nested transaction is functionally equivalent to Splice's child transaction, and this method
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * will actually create a child transaction.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param hbaseStore the hbase store relevant to the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param parentTxn the parent transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @return a new child transaction of the parent transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		public Transaction startNestedTransaction(HBaseStore hbaseStore,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:												  Txn parentTxn) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:			checkContextAndStore(hbaseStore, contextMgr, "startNestedTransaction");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:			return startNestedTransaction(hbaseStore, contextMgr,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:				dataValueFactory, null, false, NESTED_READONLY_USER_CONTEXT_ID, false, parentTxn);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * Find or create a user-level transaction.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * If the current context already has a created user level transaction, then it will return the value
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * which currently exists. Otherwise, it will create a new user-level transaction.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * Because of the possibility of creating a new transaction, it may use a network call, which makes this
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param hbaseStore the hbase store relevant to the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @param transName the name of the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @return a new user-level transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		public Transaction findUserTransaction(HBaseStore hbaseStore,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:				checkContextAndStore(hbaseStore, contextMgr, "findUserTransaction");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:				SpliceTransactionContext tc = (SpliceTransactionContext)contextMgr.getContext(USER_CONTEXT_ID);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						//We don't have a transaction yet, so create a new top-level transaction. This may require a network call
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						return startCommonTransaction(hbaseStore, contextMgr, dataValueFactory,transName, false, USER_CONTEXT_ID);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						//we already have a transaction, so just return that one
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						return tc.getTransaction();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:    protected final SpliceTransaction startNestedTransaction(HBaseStore hbaseStore,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:                                                             Txn parentTxn) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:            TxnLifecycleManager lifecycleManager = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						 * All transactions start as read only.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						 * If parentTxn!=null, then this will create a read-only child transaction (which is essentially
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						 * a duplicate of the parent transaction); this requires no network calls immediately, but will require
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						 * 2 network calls when elevateTransaction() is called.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						 * if parentTxn==null, then this will make a call to the timestamp source to generate a begin timestamp
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:						 * for a read-only transaction; this requires a single network call.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:            Txn txn = lifecycleManager.beginChildTransaction(parentTxn, Txn.IsolationLevel.SNAPSHOT_ISOLATION, additive,null);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:            SpliceTransaction trans = new SpliceTransaction(NoLockSpace.INSTANCE, this, dataValueFactory, transName,txn);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:            trans.setTransactionName(transName);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:            SpliceTransactionContext context = new SpliceTransactionContext(contextMgr, contextName, trans, abortAll, hbaseStore);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * Start a new transaction.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * If parentTxn==null, then this will create a new top-level transaction (e.g. a child of the ROOT_TRANSACTION).
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * If parentTxn!=null, then this may create a "read-only child transaction"; this is in effect a copy of the
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * parent transaction's information along with some additional logic for when elevation occur. Therefore, this
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * way is likely very inexpensive to call this method, but it will be doubly expensive when elevateTransaction()
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		 * @see com.splicemachine.si.api.TxnLifecycleManager#beginChildTransaction(com.splicemachine.si.api.TxnView, com.splicemachine.si.api.Txn.IsolationLevel, boolean, byte[])
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:		protected final SpliceTransaction startCommonTransaction(HBaseStore hbaseStore,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:        SpliceTransaction trans = new SpliceTransaction(NoLockSpace.INSTANCE,this,dataValueFactory,transName);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:        trans.setTransactionName(transName);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionFactory.java:        SpliceTransactionContext context = new SpliceTransactionContext(contextMgr, contextName, trans, abortAll, hbaseStore);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:public class SpliceTransactionManager implements XATransactionController,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        TransactionManager {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            .getLogger(SpliceTransactionManager.class);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    protected Transaction rawtran;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    protected SpliceTransactionManagerContext context;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    protected SpliceTransactionManager parent_tran;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                      Transaction theRawTran, SpliceTransactionManager parent_tran) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            // allow nested transactions to see temporary conglomerates which
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            // were created in the parent transaction. This is necessary for
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            // language which compiling plans in nested transactions against
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            // user temporaries created in parent transactions.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    protected SpliceTransactionManager(SpliceAccessManager myaccessmanager,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                                       Transaction theRawTran, SpliceTransactionManager parent_transaction)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        init(myaccessmanager, theRawTran, parent_transaction);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                    sc.closeForEndTransaction(closeHeldControllers);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        if ((accessmanager.getSystemLockLevel() == TransactionController.MODE_TABLE)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                || (requested_lock_level == TransactionController.MODE_TABLE)) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        if ((accessmanager.getSystemLockLevel() == TransactionController.MODE_TABLE)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                || (requested_lock_level == TransactionController.MODE_TABLE)) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            ret_lock_level = TransactionController.MODE_TABLE;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            ret_lock_level = TransactionController.MODE_RECORD;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    void setContext(SpliceTransactionManagerContext rtc) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            if ((open_mode & ~(TransactionController.OPENMODE_FORUPDATE
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                    | TransactionController.OPENMODE_USE_UPDATE_LOCKS
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                    | TransactionController.OPENMODE_FOR_LOCK_ONLY
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                    | TransactionController.OPENMODE_LOCK_NOWAIT | TransactionController.OPENMODE_SECONDARY_LOCKED)) != 0) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                        accessmanager.table_level_policy[TransactionController.ISOLATION_SERIALIZABLE],
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        if ((temporaryFlag & TransactionController.IS_TEMPORARY) == TransactionController.IS_TEMPORARY) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        if ((temporaryFlag & TransactionController.IS_TEMPORARY) == TransactionController.IS_TEMPORARY) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public/* XATransactionController */Object createXATransactionFromLocalTransaction(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        getRawStoreXact().createXATransactionFromLocalTransaction(format_id,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            if ((open_mode & ~(TransactionController.OPENMODE_FORUPDATE
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                    | TransactionController.OPENMODE_FOR_LOCK_ONLY | TransactionController.OPENMODE_SECONDARY_LOCKED)) != 0)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            if ((open_mode & ~(TransactionController.OPENMODE_FORUPDATE
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                    | TransactionController.OPENMODE_FOR_LOCK_ONLY | TransactionController.OPENMODE_SECONDARY_LOCKED)) != 0)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        return (accessmanager.getTransactionalProperties().getProperty(this,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        return (accessmanager.getTransactionalProperties().getPropertyDefault(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        accessmanager.getTransactionalProperties().setProperty(this, key,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        accessmanager.getTransactionalProperties().setPropertyDefault(this,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        return accessmanager.getTransactionalProperties()
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        return accessmanager.getTransactionalProperties().getProperties(this);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public BaseSpliceTransaction getRawTransaction() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        return (BaseSpliceTransaction)rawtran;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            // If there's a transaction, abort it.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        ((SpliceTransaction)rawtran).elevate(tableName.getBytes());
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public TransactionManager getInternalTransaction() throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // Allocate a new transaction no matter what.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // Create a transaction, make a context for it, and push the context.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // Note this puts the raw store transaction context
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        return (TransactionManager)accessmanager.getTransaction(cm);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public TransactionController startIndependentInternalTransaction(boolean readOnly) throws StandardException {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        String txnName;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        Transaction global = accessmanager.getRawStore().startGlobalTransaction(cm,1,new byte[0],new byte[0]);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            ((SpliceTransaction)global).elevate("unknown".getBytes()); //TODO -sf- replace this with an actual name
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        SpliceTransactionManager rt = new SpliceTransactionManager(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        @SuppressWarnings("UnusedDeclaration") SpliceTransactionManagerContext rtc = new SpliceTransactionManagerContext(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public TransactionController startNestedUserTransaction(boolean readOnly,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // Allocate a new transaction no matter what.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // Create a transaction, make a context for it, and push the context.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // Note this puts the raw store transaction context
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // Note that the nested transaction inherits the compatibility space
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // from "this", thus the new transaction shares the compatibility space
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        // of the current transaction.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        String txnName;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        Txn txn = ((SpliceTransaction)rawtran).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            txnName = AccessFactoryGlobals.NESTED_UPDATE_USER_TRANS;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            ((SpliceTransaction) rawtran).elevate(Bytes.toBytes("unknown")); //TODO -sf- replace this with a known destination table
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            txn = ((SpliceTransaction)rawtran).getTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            txnName = AccessFactoryGlobals.NESTED_READONLY_USER_TRANS;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        Transaction childTxn = accessmanager.getRawStore().startNestedTransaction(getLockSpace(),cm,txnName,txn);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            ((SpliceTransaction)childTxn).elevate("unknown".getBytes()); //TODO -sf- replace this with an actual name
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        SpliceTransactionManager rt = new SpliceTransactionManager(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:                accessmanager, childTxn, this);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        @SuppressWarnings("UnusedDeclaration") SpliceTransactionManagerContext rtc = new SpliceTransactionManagerContext(
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public Transaction getRawStoreXact() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public String getTransactionIdString() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        TxnView txn = getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        if(!txn.allowsWrites())
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:            throw Exceptions.parseException(new ReadOnlyModificationException("Unable to perform 2PC data dictionary change with a read-only transaction: "+ txn));
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        currentDDLChangeId = DDLCoordinationFactory.getController().notifyMetadataChange(new DDLChange(txn));
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    private String getNestedTransactionStackString() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    	SpliceTransactionManager currentTxnMgr = parent_tran;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    	Stack<SpliceTransactionManager> txnStack = new Stack<SpliceTransactionManager>();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    	while (currentTxnMgr != null) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    		txnStack.push(currentTxnMgr);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    		currentTxnMgr = currentTxnMgr.parent_tran;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    	sb.append(Txn.ROOT_TRANSACTION);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    	while (!txnStack.empty()) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    		sb.append(txnStack.pop().getRawTransaction().toString());
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    	sb.append("currentTxn: ");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    	BaseSpliceTransaction currentTxn = getRawTransaction();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:		sb.append(currentTxn == null ? "null" : currentTxn.toString());
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:    public TxnView getActiveStateTxn() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java:        return ((BaseSpliceTransaction)rawtran).getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:public final class SpliceTransactionManagerContext extends ContextImpl {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:	private SpliceTransactionManager transactionManager;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:			// If the severity is lower than a transaction error then do nothing.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:			// transaction, not just abort it.
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:			// transaction. 
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:		if (transactionManager != null)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:				transactionManager.invalidateConglomerateCache();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:			transactionManager.closeControllers(true /* close held controllers */ );
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:			transactionManager = null;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:	// this constructor is called with the transaction
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:	SpliceTransactionManagerContext(ContextManager cm,String context_id,SpliceTransactionManager transactionManager,boolean abortAll) 
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:		this.transactionManager = transactionManager;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:		transactionManager.setContext(this);
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:	public SpliceTransactionManager getTransactionManager() {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:		return transactionManager;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:	void setTransactionManager(SpliceTransactionManager  transactionManager) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManagerContext.java:		this.transactionManager = transactionManager;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:public class SpliceTransactionView extends BaseSpliceTransaction {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    private TxnView txn;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    public SpliceTransactionView(CompatibilitySpace compatibilitySpace,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    						 SpliceTransactionFactory spliceTransactionFactory,
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:                             String transName, TxnView txn) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:		this.spliceTransactionFactory = spliceTransactionFactory;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:        this.state = SpliceTransaction.ACTIVE;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:        throw Exceptions.parseException(new CannotCommitException("Cannot commit from SpliceTransactionView"));
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:        throw new UnsupportedOperationException("Cannot abort from SpliceTransactionView");
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    @Override protected void clearState() { txn = null; }
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    @Override public TxnView getTxnInformation() { return txn; }
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:        if(txn!=null)
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:            return txn.toString();
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    public void setActiveState(boolean nested, boolean dependent, TxnView parentTxn,byte[] tableName) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    public void setActiveState(boolean nested, boolean dependent, TxnView parentTxn) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:    public void setTxn(Txn txn) {
src//main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionView.java:        this.txn = txn;
src//main/java/com/splicemachine/derby/impl/store/access/StatsStoreCostController.java:        BaseSpliceTransaction bst = (BaseSpliceTransaction)baseConglomerate.getTransaction();
src//main/java/com/splicemachine/derby/impl/store/access/StatsStoreCostController.java:        TxnView txn = bst.getActiveStateTxn();
src//main/java/com/splicemachine/derby/impl/store/access/StatsStoreCostController.java:            this.conglomerateStatistics = StatisticsStorage.getPartitionStore().getStatistics(txn, conglomId);
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:public final class SpliceTransactionResourceImpl implements AutoCloseable{
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:		public SpliceTransactionResourceImpl() throws SQLException {
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:		public SpliceTransactionResourceImpl(String url, Properties info) throws SQLException {
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:		public void marshallTransaction(TxnView txn,SpliceObserverInstructions instructions) throws StandardException, SQLException {
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:				lcc = database.generateLanguageConnectionContext(txn,
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:		public void marshallTransaction(TxnView txn) throws StandardException, SQLException {
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:				lcc = database.generateLanguageConnectionContext(txn,cm, username, drdaID, dbname);
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:		 * need to be public because it is in the XATransactionResource interface
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:		 * local transaction demarcation - note that global or xa transaction cannot
src//main/java/com/splicemachine/derby/jdbc/SpliceTransactionResourceImpl.java:				return (lcc == null || lcc.getTransactionExecute().isIdle());
src//main/java/com/splicemachine/derby/management/StatementInfo.java:		private final long txn;
src//main/java/com/splicemachine/derby/management/StatementInfo.java:												 TxnView txn,
src//main/java/com/splicemachine/derby/management/StatementInfo.java:        this.txn = txn.getTxnId();
src//main/java/com/splicemachine/derby/management/StatementInfo.java:                             TxnView txn,
src//main/java/com/splicemachine/derby/management/StatementInfo.java:            this.txn = txn.getTxnId();
src//main/java/com/splicemachine/derby/management/StatementInfo.java:		@ConstructorProperties({"sql","user","txnId","numJobs",
src//main/java/com/splicemachine/derby/management/StatementInfo.java:		public StatementInfo(String sql,String user,long txnId,
src//main/java/com/splicemachine/derby/management/StatementInfo.java:				this.txn = txnId;
src//main/java/com/splicemachine/derby/management/StatementInfo.java:				return String.format("StatementInfo{stmtUuid=%s, txnId=%s, startTimeMs=%s, stopTimeMs=%s, duration=%s, SQL={\n%s\n}",
src//main/java/com/splicemachine/derby/management/StatementInfo.java:						getTxnId(),
src//main/java/com/splicemachine/derby/management/StatementInfo.java:			return String.format("StatementInfo{stmtUuid=%s, txnId=%s, startTimeMs=%s, stopTimeMs=%s, SQL={\n%s\n}",
src//main/java/com/splicemachine/derby/management/StatementInfo.java:				getTxnId(),
src//main/java/com/splicemachine/derby/management/StatementInfo.java:		public long getTxnId() { return txn; }
src//main/java/com/splicemachine/derby/management/StatementManager.java:	public void completedStatement(StatementInfo statementInfo, boolean shouldTrace,TxnView txn) throws IOException, StandardException {
src//main/java/com/splicemachine/derby/management/StatementManager.java:                statementReporter.report(statementInfo,txn);
src//main/java/com/splicemachine/derby/management/StatementManager.java:                operationReporter.report(info,txn);
src//main/java/com/splicemachine/derby/management/StatementManager.java:	public StatementInfo getExecutingStatementByTxnId(String txnId) {
src//main/java/com/splicemachine/derby/management/StatementManager.java:		if (txnId != null) {
src//main/java/com/splicemachine/derby/management/StatementManager.java:				if (txnId.equals(info.getTxnId())) {
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:public abstract class TransactionalSysTableWriter<T> {
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:    protected TransactionalSysTableWriter(final String tableName) {
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:    public void report(T element,TxnView txn) throws IOException{
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:        if(!txn.allowsWrites())
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:            throw new ReadOnlyModificationException("Cannot write data with a read-only transaction "+ txn.getTxnId());
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:        String conglom = getConglomIdString(txn);
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:                txn, PipelineConstants.noOpFlushHook, tableWriter.defaultWriteConfiguration());
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:    public void remove(T element,TxnView txn) throws IOException{
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:        if(!txn.allowsWrites())
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:            throw new ReadOnlyModificationException("Cannot write data with a read-only transaction "+ txn.getTxnId());
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:        String conglom = getConglomIdString(txn);
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:                txn, PipelineConstants.noOpFlushHook, tableWriter.defaultWriteConfiguration());
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:    public String getConglomIdString(TxnView txn) throws IOException {
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:                    conglom = conglomIdString = fetchConglomId(txn);
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:    private String fetchConglomId(TxnView txn) throws StandardException,SQLException {
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:            SpliceTransactionResourceImpl transactionResource = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:            transactionResource.prepareContextManager();
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:            transactionResource.marshallTransaction(txn);
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:            LanguageConnectionContext lcc = transactionResource.getLcc();
src//main/java/com/splicemachine/derby/management/TransactionalSysTableWriter.java:            TableDescriptor td = dd.getTableDescriptor(tableName, systemSchemaDescriptor, lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/management/XplainOperationReporter.java:public class XplainOperationReporter extends TransactionalSysTableWriter<OperationInfo> {
src//main/java/com/splicemachine/derby/management/XplainReporter.java:				final Txn txn;
src//main/java/com/splicemachine/derby/management/XplainReporter.java:						txn = TransactionLifecycle.getLifecycleManager().beginTransaction("xplain".getBytes());
src//main/java/com/splicemachine/derby/management/XplainReporter.java:            txn.commit();
src//main/java/com/splicemachine/derby/management/XplainReporter.java:												//TODO -sf- deal with transactions correctly
src//main/java/com/splicemachine/derby/management/XplainReporter.java:																txn,
src//main/java/com/splicemachine/derby/management/XplainStatementReporter.java:public class XplainStatementReporter extends TransactionalSysTableWriter<StatementInfo> {
src//main/java/com/splicemachine/derby/management/XplainStatementReporter.java:														.encodeNext(statementInfo.getTxnId()) //3 - long
src//main/java/com/splicemachine/derby/management/XplainTaskReporter.java:public class XplainTaskReporter extends TransactionalSysTableWriter<OperationRuntimeStats>{
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:    public static <T> T readConglomerate(long conglomId, Class<T> instanceClass, TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:        Preconditions.checkNotNull(txn);
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:            Get get = SpliceUtils.createGet(txn, Bytes.toBytes(conglomId));
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:    public static void createConglomerate(long conglomId, Conglomerate conglomerate, Txn txn) throws StandardException {
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:        createConglomerate(Long.toString(conglomId), conglomId, DerbyBytesUtil.toBytes(conglomerate),txn);
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:    public static void createConglomerate(String tableName, long conglomId, byte[] conglomData, Txn txn) throws StandardException {
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:        Preconditions.checkNotNull(txn);
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:            Put put = SpliceUtils.createPut(Bytes.toBytes(conglomId), txn);
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:    public static void updateConglomerate(Conglomerate conglomerate, Txn txn) throws StandardException {
src//main/java/com/splicemachine/derby/utils/ConglomerateUtils.java:            Put put = SpliceUtils.createPut(Bytes.toBytes(conglomerate.getContainerid()), txn);
src//main/java/com/splicemachine/derby/utils/DataDictionaryUtils.java:    public static int[] getColumnOrdering(TxnView txn, UUID tableId) throws StandardException {
src//main/java/com/splicemachine/derby/utils/DataDictionaryUtils.java:        SpliceTransactionResourceImpl impl;
src//main/java/com/splicemachine/derby/utils/DataDictionaryUtils.java:            impl = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/utils/DataDictionaryUtils.java:            impl.marshallTransaction(txn);
src//main/java/com/splicemachine/derby/utils/DataDictionaryUtils.java:    public static int[] getFormatIds(TxnView txn, UUID tableId) throws SQLException, StandardException {
src//main/java/com/splicemachine/derby/utils/DataDictionaryUtils.java:        SpliceTransactionResourceImpl impl = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/derby/utils/DataDictionaryUtils.java:        impl.marshallTransaction(txn);
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:                            dvds[3].setValue(completedStatement.getTxnId());
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:                columns[3] = new GenericColumnDescriptor("transactionId",DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR));
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:                            dvds[3].setValue(executingStatement.getTxnId());
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:                columnInfo[3] = new GenericColumnDescriptor("transactionid",DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT));
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:				// would be to pass in a transaction id, not a statement uuid.
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:    public static void SYSCS_KILL_TRANSACTION(final long transactionId) throws SQLException {
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:        TransactionAdmin.killTransaction(transactionId);
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:    public static void SYSCS_KILL_STALE_TRANSACTIONS(final long maximumTransactionId) throws SQLException {
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:        TransactionAdmin.killAllActiveTransactions(maximumTransactionId);
src//main/java/com/splicemachine/derby/utils/SpliceAdmin.java:            TransactionController tc = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:    private static final TxnOperationFactory operationFactory;
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:    public static Scan createScan(Txn txn) {
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:        return createScan(txn,false);
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:    public static Scan createScan(TxnView txn,boolean countStar) {
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:        return operationFactory.newScan(txn,countStar);
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:    public static Get createGet(TxnView txn, byte[] row) throws IOException {
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:        return operationFactory.newGet(txn, row);
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:                                FormatableBitSet validColumns, TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:            Get get = createGet(txn, loc.getBytes());
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:    public static void doDelete(HTableInterface table, TxnView txn, byte[] row) throws IOException {
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:        Mutation mutation = operationFactory.newDelete(txn, row);
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:    public static Put createPut(byte[] newRowKey, TxnView txn) throws IOException {
src//main/java/com/splicemachine/derby/utils/SpliceUtils.java:        return operationFactory.newPut(txn,newRowKey);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TransactionController transactionExecute = lcc.getTransactionExecute();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            transactionExecute.elevate("statistics");
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TxnView txn = ((SpliceTransactionManager) transactionExecute).getRawTransaction().getActiveStateTxn();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:                submitStatsCollection(td,txn,templateOutputRow,conn,staleOnly,jobs);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TransactionController transactionExecute = conn.getLanguageConnection().getTransactionExecute();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            transactionExecute.elevate("statistics");
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TxnView txn = ((SpliceTransactionManager) transactionExecute).getRawTransaction().getActiveStateTxn();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            submitStatsCollection(tableDesc,txn,outputRow,conn,staleOnly,collectionFutures);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TransactionController tc = conn.getLanguageConnection().getTransactionExecute();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TxnView txn = ((SpliceTransactionManager) tc).getRawTransaction().getActiveStateTxn();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            notifyServersClearStatsCache(txn, conglomIds);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TransactionController tc = conn.getLanguageConnection().getTransactionExecute();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            TxnView txn = ((SpliceTransactionManager) tc).getRawTransaction().getActiveStateTxn();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:            notifyServersClearStatsCache(txn, conglomIds);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:    private static void notifyServersClearStatsCache(TxnView txn, long[] conglomIds) throws SQLException {
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        DDLChange change = new DDLChange(txn, DDLChangeType.CLEAR_STATS_CACHE);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:                                              TxnView txn,
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        StatisticsJob job = getBaseTableStatisticsJob(conn,table, colsToCollect, regionsToCollect, txn);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:                        heapConglomerateId,table, indexRegions,colsToCollect,txn);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:                                             TxnView baseTxn) throws StandardException{
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        //elevate the parent transaction with both tables
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        return new StatisticsJob(regionBounds,table,baseTask,baseTxn);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:                                                           TxnView baseTxn) throws StandardException {
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        TransactionController transactionExecute = conn.getLanguageConnection().getTransactionExecute();
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        SpliceConglomerate conglomerate = (SpliceConglomerate)((SpliceTransactionManager) transactionExecute).findConglomerate(tableDesc.getHeapConglomerateId());
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        //elevate the parent transaction with both tables
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        return new StatisticsJob(regionBounds,table,baseTask,baseTxn);
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        TableDescriptor tableDescriptor = dd.getTableDescriptor(table,schemaDescriptor,lcc.getTransactionExecute());
src//main/java/com/splicemachine/derby/utils/StatisticsAdmin.java:        SchemaDescriptor schemaDescriptor = dd.getSchemaDescriptor(schema,lcc.getTransactionExecute(),true);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:public class TransactionAdmin {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:    public static void killAllActiveTransactions(long maxTxnId) throws SQLException{
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        ActiveTransactionReader reader = new ActiveTransactionReader(0l,maxTxnId,null);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        try(Stream<TxnView> activeTransactions = reader.getActiveTransactions()) {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            final TxnLifecycleManager tc = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            TxnView next;
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            while ((next = activeTransactions.next()) != null) {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                tc.rollback(next.getTxnId());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:    public static void killTransaction(long txnId) throws SQLException{
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            TxnSupplier store = TransactionStorage.getTxnStore();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            TxnView txn = store.getTransaction(txnId);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            //if the transaction is read-only, or doesn't exist, then don't do anything to it
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            if(txn==null) return;
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            TxnLifecycleManager tc = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            tc.rollback(txnId);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:						new GenericColumnDescriptor("txnId",DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT))
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        TxnView txn = ((SpliceTransactionManager)defaultConn.getLanguageConnection().getTransactionExecute()).getActiveStateTxn();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:				row.setColumn(1,new SQLLongint(txn.getTxnId()));
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        ActiveTransactionReader reader = new ActiveTransactionReader(0l,Long.MAX_VALUE,null);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            try(Stream<TxnView> activeTxns = reader.getActiveTransactions()){
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                TxnView n;
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                while((n = activeTxns.next())!=null){
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    template.getColumn(1).setValue(n.getTxnId());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            new GenericColumnDescriptor("txnId", DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT)),
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            new GenericColumnDescriptor("parentTxnId",DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT)),
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        ActiveTransactionReader reader = new ActiveTransactionReader(0l,Long.MAX_VALUE,null);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            try(Stream<TxnView> activeTxns = reader.getAllTransactions()) {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                TxnView txn;
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                while ((txn = activeTxns.next()) != null) {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    dvds[0].setValue(txn.getTxnId());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    if (txn.getParentTxnId() != -1l)
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                        dvds[1].setValue(txn.getParentTxnId());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    Iterator<ByteSlice> destTables = txn.getDestinationTables();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    dvds[3].setValue(txn.getState().toString());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    dvds[4].setValue(txn.getIsolationLevel().toHumanFriendlyString());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    dvds[5].setValue(txn.getBeginTimestamp());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    setLong(dvds[6], txn.getCommitTimestamp());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    setLong(dvds[7], txn.getEffectiveCommitTimestamp());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    dvds[8].setValue(txn.isAdditive());
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:                    dvds[9].setValue(new Timestamp(txn.getLastKeepAliveTimestamp()), null);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            new GenericColumnDescriptor("childTxnId", DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT))
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:    public static void SYSCS_COMMIT_CHILD_TRANSACTION(Long txnId) throws SQLException, IOException{
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        TxnLifecycleManager tc = TransactionLifecycle.getLifecycleManager();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        TxnSupplier store = TransactionStorage.getTxnStore();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        TxnView childTxn = ((TxnStore)store).getTransaction(txnId);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        if (childTxn == null) {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            throw new IllegalArgumentException(String.format("Specified child transaction id %s not found.", txnId));
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            tc.commit(txnId);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:    	 //TxnSupplier store = TransactionStorage.getTxnStore();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:			defaultConn.getLanguageConnection().getTransactionExecute().elevate(tableName);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        ((SpliceTransactionManager)defaultConn.getLanguageConnection().getTransactionExecute()).getActiveStateTxn();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:    public static void SYSCS_START_CHILD_TRANSACTION(long parentTransactionId, String spliceTableName, ResultSet[] resultSet) throws IOException, SQLException {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        // Verify the parentTransactionId passed in
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        TxnSupplier store = TransactionStorage.getTxnStore();
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        TxnView parentTxn = ((TxnStore)store).getTransaction(parentTransactionId);
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        if (parentTxn == null) {
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            throw new IllegalArgumentException(String.format("Specified parent transaction id %s not found. Unable to create child transaction.", parentTransactionId));
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        Txn childTxn;
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:            childTxn = TransactionLifecycle.getLifecycleManager().beginChildTransaction(parentTxn, Bytes.toBytes(spliceTableName));
src//main/java/com/splicemachine/derby/utils/TransactionAdmin.java:        row.setColumn(1, new SQLLongint(childTxn.getTxnId()));
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:public class TransactionAdminTest {
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        System.out.println("Starting parent transaction...");
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        System.out.println("Fetching parent transaction id...");
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        long parentTransactionId = rs.getLong(1);
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        System.out.println("Parent transaction id: " + parentTransactionId);
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        System.out.println("Starting child transaction...");
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        ps.setLong(1, parentTransactionId);
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        long childTransactionId = rs.getLong(1);
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        System.out.println("Child transaction id: " + childTransactionId);
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:        TxnView txn = new ActiveWriteTxn(childTransactionId,childTransactionId);
src//main/java/com/splicemachine/derby/utils/TransactionAdminTest.java:                txn, 1);
src//main/java/com/splicemachine/derby/utils/Vacuum.java:				ensurePriorTransactionsComplete();
src//main/java/com/splicemachine/derby/utils/Vacuum.java:		 * We have to make sure that all prior transactions complete. Once that happens, we know that the worldview
src//main/java/com/splicemachine/derby/utils/Vacuum.java:		 * of all outstanding transactions is the same as ours--so if a conglomerate doesn't exist in sysconglomerates,
src//main/java/com/splicemachine/derby/utils/Vacuum.java:		private void ensurePriorTransactionsComplete() throws SQLException {
src//main/java/com/splicemachine/derby/utils/Vacuum.java:        TransactionController transactionExecute = embedConnection.getLanguageConnection().getTransactionExecute();
src//main/java/com/splicemachine/derby/utils/Vacuum.java:        TxnView activeStateTxn = ((SpliceTransactionManager) transactionExecute).getActiveStateTxn();
src//main/java/com/splicemachine/derby/utils/Vacuum.java:				//wait for all transactions prior to us to complete, but only wait for so long
src//main/java/com/splicemachine/derby/utils/Vacuum.java:						long activeTxn = waitForConcurrentTransactions(activeStateTxn);
src//main/java/com/splicemachine/derby/utils/Vacuum.java:						if(activeTxn>0){
src//main/java/com/splicemachine/derby/utils/Vacuum.java:												ErrorState.DDL_ACTIVE_TRANSACTIONS.newException("VACUUM", activeTxn));
src//main/java/com/splicemachine/derby/utils/Vacuum.java:    private long waitForConcurrentTransactions(TxnView txn) throws StandardException {
src//main/java/com/splicemachine/derby/utils/Vacuum.java:        ActiveTransactionReader reader = new ActiveTransactionReader(0l,txn.getTxnId(),null);
src//main/java/com/splicemachine/derby/utils/Vacuum.java:        long activeTxn;
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                activeTxn = -1l;
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                TxnView next;
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                try (Stream<TxnView> activeTransactions = reader.getActiveTransactions(10)){
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                    while((next = activeTransactions.next())!=null){
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                        long txnId = next.getTxnId();
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                        if(txnId!=txn.getTxnId()){
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                            activeTxn = txnId;
src//main/java/com/splicemachine/derby/utils/Vacuum.java:                if(activeTxn<0) return activeTxn; //no active transactions
src//main/java/com/splicemachine/derby/utils/Vacuum.java:        return activeTxn;
src//main/java/com/splicemachine/derby/utils/Vacuum.java:		} // end waitForConcurrentTransactions
src//main/java/com/splicemachine/hbase/backup/Backup.java:    private Txn backupTransaction;
src//main/java/com/splicemachine/hbase/backup/Backup.java:    public Txn getBackupTransaction() {
src//main/java/com/splicemachine/hbase/backup/Backup.java:        return backupTransaction;
src//main/java/com/splicemachine/hbase/backup/Backup.java:    public void setBackupTransaction(Txn txn){
src//main/java/com/splicemachine/hbase/backup/Backup.java:        this.backupTransaction = txn;
src//main/java/com/splicemachine/hbase/backup/Backup.java:        this.backupId = txn.getTxnId();
src//main/java/com/splicemachine/hbase/backup/Backup.java:            Txn backupTxn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/Backup.java:                    .beginTransaction()
src//main/java/com/splicemachine/hbase/backup/Backup.java:            if (parentBackupID > 0 && parentBackupID >= backupTxn.getTxnId())
src//main/java/com/splicemachine/hbase/backup/Backup.java:                        "{incrementalParentBackupID=%d,transactionID=%d",parentBackupID,backupTxn.getTxnId()));
src//main/java/com/splicemachine/hbase/backup/Backup.java:            backup.setBackupTransaction(backupTxn);
src//main/java/com/splicemachine/hbase/backup/Backup.java:            backup.setBackupTimestamp(backupTxn.getBeginTimestamp());
src//main/java/com/splicemachine/hbase/backup/Backup.java:            item.addIgnoreTxn();
src//main/java/com/splicemachine/hbase/backup/Backup.java:            item.createSnapshot(admin, backupTransaction.getBeginTimestamp(), newSnapshotNameSet, 0);
src//main/java/com/splicemachine/hbase/backup/Backup.java:        long timestampSource = TransactionTimestamps.getTimestampSource().nextTimestamp();
src//main/java/com/splicemachine/hbase/backup/Backup.java:            String parentBackupDir = BackupUtils.getBackupDirectory(parentBackupId, backupTransaction);
src//main/java/com/splicemachine/hbase/backup/Backup.java:    public void setIgnoreTxns() throws IOException{
src//main/java/com/splicemachine/hbase/backup/Backup.java:        Path base = new Path(backupFilesystem + "/" + BACKUP_BASE_FOLDER + "_" + backupTransaction.getBeginTimestamp());
src//main/java/com/splicemachine/hbase/backup/Backup.java:            byte[] backupId = BytesUtil.longToBytes(backupTransaction.getTxnId());
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:public class BackupFileSetReporter extends TransactionalSysTableWriter<BackupFileSet> {
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:    public void openScanner(TxnView txn, String tableName, String regionName) throws StandardException {
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:            TxnOperationFactory factory = TransactionOperations.getOperationFactory();
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:            String conglom = getConglomIdString(txn);
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:            Scan scan = factory.newScan(txn);
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:                                          TxnView txn) throws StandardException{
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:            String conglom = getConglomIdString(txn);
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:            TxnOperationFactory factory = TransactionOperations.getOperationFactory();
src//main/java/com/splicemachine/hbase/backup/BackupFileSetReporter.java:            Get get = factory.newGet(txn, row);
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:    private List<Pair<Long, Long>> ignoreTxnList;
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:    public Txn getBackupTransaction(){
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:        return backup.getBackupTransaction();
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:            BackupSystemProcedures.backupItemReporter.report(this, getBackupTransaction());
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:    public List<Pair<Long, Long>> getIgnoreTxns () {
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:        return ignoreTxnList;
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:    public void addIgnoreTxn() {
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:        if (ignoreTxnList == null) {
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:            ignoreTxnList = new ArrayList<>();
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:        ignoreTxnList.add(Pair.newPair(backup.getBackupId(), backup.getTimestampSource()));
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:    public void addIgnoreTxn(Pair<Long, Long> p) {
src//main/java/com/splicemachine/hbase/backup/BackupItem.java:        ignoreTxnList.add(p);
src//main/java/com/splicemachine/hbase/backup/BackupItemReporter.java:public class BackupItemReporter extends TransactionalSysTableWriter<BackupItem> {
src//main/java/com/splicemachine/hbase/backup/BackupItemReporter.java:    public void openScanner(TxnView txn, long backupId) throws StandardException {
src//main/java/com/splicemachine/hbase/backup/BackupItemReporter.java:            TxnOperationFactory factory = TransactionOperations.getOperationFactory();
src//main/java/com/splicemachine/hbase/backup/BackupItemReporter.java:            String conglom = getConglomIdString(txn);
src//main/java/com/splicemachine/hbase/backup/BackupItemReporter.java:            Scan scan = factory.newScan(txn);
src//main/java/com/splicemachine/hbase/backup/BackupJobReporter.java:public class BackupJobReporter extends TransactionalSysTableWriter<BackupJob> {
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:public class BackupReporter extends TransactionalSysTableWriter<Backup>  {
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:    public void openScanner(TxnView txn) throws IOException{
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:        TxnOperationFactory factory = TransactionOperations.getOperationFactory();
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:        String conglom = getConglomIdString(txn);
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:        Scan scan = factory.newScan(txn);
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:    public Backup getBackup(long backupId, TxnView txn) throws StandardException{
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:            String conglom = getConglomIdString(txn);
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:            TxnOperationFactory factory = TransactionOperations.getOperationFactory();
src//main/java/com/splicemachine/hbase/backup/BackupReporter.java:            Get get = factory.newGet(txn, row);
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            DDLChange change = new DDLChange(restore.getRestoreTransaction(), DDLChangeType.ENTER_RESTORE_MODE);
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:                    .beginTransaction()
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            backupJobReporter.remove(backupJob, txn);
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            txn.commit();
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:                txn.rollback();
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:                dvds[1].setValue(restoreItem.getBeginTransactionId());
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:                dvds[2].setValue(restoreItem.getCommitTransactionId());
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            columns[1] = new GenericColumnDescriptor("Begin_Transaction_Id",DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT));
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            columns[2] = new GenericColumnDescriptor("End_Transaction_Id",DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT));
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            backup.getBackupTransaction().commit();
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            backupReporter.report(backup, backup.getBackupTransaction());
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:                    .beginTransaction()
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            backupJobReporter.report(new BackupJob(jobId, directory, type, hour, new Timestamp(System.currentTimeMillis())), txn);
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:            txn.commit();
src//main/java/com/splicemachine/hbase/backup/BackupSystemProcedures.java:                txn.rollback();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:    public static String getBackupDirectory(long parent_backup_id, TxnView txn) throws StandardException {
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Backup backup = BackupSystemProcedures.backupReporter.getBackup(parent_backup_id, txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            BackupSystemProcedures.backupReporter.openScanner(txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn.commit();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                txn.rollback();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            BackupSystemProcedures.backupReporter.openScanner(txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            backup = BackupSystemProcedures.backupReporter.getBackup(backupId, txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            BackupSystemProcedures.backupFileSetReporter.report(backupFileSet, txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn.commit();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                txn.rollback();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction(Txn.IsolationLevel.READ_COMMITTED);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            BackupSystemProcedures.backupFileSetReporter.openScanner(txn, tableName, encodedRegionName);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            BackupSystemProcedures.backupFileSetReporter.remove(backupFileSet, txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn.commit();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                txn.rollback();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            BackupSystemProcedures.backupReporter.remove(backup, txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn.commit();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                txn.rollback();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:        Txn txn = null;
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn = TransactionLifecycle.getLifecycleManager()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                    .beginTransaction()
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            BackupSystemProcedures.backupItemReporter.openScanner(txn, backupId);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                BackupSystemProcedures.backupItemReporter.remove(backupItem, txn);
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:            txn.commit();
src//main/java/com/splicemachine/hbase/backup/BackupUtils.java:                txn.rollback();
src//main/java/com/splicemachine/hbase/backup/CreateBackupJob.java:	        return "backupJob-"+backupItem.getBackupTransaction().getTxnId();
src//main/java/com/splicemachine/hbase/backup/CreateBackupJob.java:    public Txn getTxn() {
src//main/java/com/splicemachine/hbase/backup/CreateBackupJob.java:        return backupItem.getBackupTransaction();
src//main/java/com/splicemachine/hbase/backup/CreateIncrementalBackupJob.java:        return "backupJob-"+backupItem.getBackupTransaction().getTxnId();
src//main/java/com/splicemachine/hbase/backup/CreateIncrementalBackupJob.java:    public Txn getTxn() {
src//main/java/com/splicemachine/hbase/backup/CreateIncrementalBackupJob.java:        return backupItem.getBackupTransaction();
src//main/java/com/splicemachine/hbase/backup/FlashBackRecord.java:	public static final String CREATE_TABLE = "create table %s.%s (backup_id bigint, backup_transaction_id bigint, " + 
src//main/java/com/splicemachine/hbase/backup/FlashBackRecord.java:	public static final String INSERT_START_BACKUP = "insert into table %s.%s (backup_transaction_id, backup_timestamp, backup_status, backup_filesystem) values (?,?,?,?)";
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:public class PurgeTransactionsJob implements CoprocessorJob {
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:	    private final Txn backupTxn;
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:    public PurgeTransactionsJob(Txn backupTxn, long backupTimestamp, HTableInterface table) {
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:	        this.backupTxn = backupTxn;
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:	    	PurgeTransactionsTask task = new PurgeTransactionsTask(backupTimestamp, getJobId());
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:	        return "purgeTransactionsJob-"+backupTxn.getBeginTimestamp();
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:    public Txn getTxn() {
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsJob.java:        return backupTxn;
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:public class PurgeTransactionsTask extends ZkTask {
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:    public PurgeTransactionsTask() {
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:    public PurgeTransactionsTask(long backupTimestamp, String jobId) {
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:        return "purgeTransactionsTask";
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:        return new PurgeTransactionsTask(backupTimestamp, jobId);
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:            RegionTxnPurger txnPurger = new RegionTxnPurger(region);
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:            txnPurger.rollbackTransactionsAfter(backupTimestamp);
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:            throw new ExecutionException("Failed purge of transactions of region " + region, e);
src//main/java/com/splicemachine/hbase/backup/PurgeTransactionsTask.java:        return SchedulerPriorities.INSTANCE.getBasePriority(PurgeTransactionsTask.class);
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:public class RegionTxnPurger<TxnInfo,Transaction,Data> {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    private final TxnDecoder<TxnInfo,Transaction, Data, Put, Delete, Get, Scan> oldTransactionDecoder;
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    private final TxnDecoder<TxnInfo,Transaction, Data, Put, Delete, Get, Scan> newTransactionDecoder;
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    private final STransactionLib transactionLib;
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    public RegionTxnPurger(HRegion region) {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        this.transactionLib = SIFactoryDriver.siFactory.getTransactionLib();
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        this.oldTransactionDecoder = transactionLib.getV1TxnDecoder();
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        this.newTransactionDecoder = transactionLib.getV2TxnDecoder();
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    public Source<Transaction> getPostBackupTxns(final long afterTs) throws IOException {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        return new RegionScanIterator<>(scanner, new RegionScanIterator.IOFunction<Transaction,Data>() {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:            public Transaction apply(@Nullable List<Data> keyValues) throws IOException {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:            	Transaction txn = decode(keyValues);
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:                switch (transactionLib.getTransactionState(txn)) {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:                        return txn;
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:                if (transactionLib.getBeginTimestamp(txn) > afterTs ||
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:                		transactionLib.getCommitTimestamp(txn) > afterTs ||
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:                		transactionLib.getGlobalCommitTimestamp(txn) > afterTs) {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:                    return txn;
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    public void rollbackTransactionsAfter(final long afterTs) throws IOException {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        Source<Transaction> source = getPostBackupTxns(afterTs);
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        RegionTxnStore store = new RegionTxnStore(region, null, null,dataLib,transactionLib);
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:            Transaction txn = source.next();
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:            store.recordRollback(transactionLib.getTxnId(txn));
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    private Transaction decode(List<Data> keyValues) throws IOException {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:    	Object txn = newTransactionDecoder.decode(dataLib,keyValues);
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        if (txn == null) {
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:            txn = oldTransactionDecoder.decode(dataLib,keyValues);
src//main/java/com/splicemachine/hbase/backup/RegionTxnPurger.java:        return (Transaction)txn;
src//main/java/com/splicemachine/hbase/backup/Restore.java:    private Txn restoreTransaction;
src//main/java/com/splicemachine/hbase/backup/Restore.java:    public void setRestoreTransaction(Txn restoreTransaction) {
src//main/java/com/splicemachine/hbase/backup/Restore.java:        this.restoreTransaction = restoreTransaction;
src//main/java/com/splicemachine/hbase/backup/Restore.java:    public Txn getRestoreTransaction() {
src//main/java/com/splicemachine/hbase/backup/Restore.java:        return restoreTransaction;
src//main/java/com/splicemachine/hbase/backup/Restore.java:            Txn restoreTxn = TransactionLifecycle.getLifecycleManager().
src//main/java/com/splicemachine/hbase/backup/Restore.java:                    beginTransaction().elevateToWritable("recovery".getBytes());
src//main/java/com/splicemachine/hbase/backup/Restore.java:            restore.setRestoreTransaction(restoreTxn);
src//main/java/com/splicemachine/hbase/backup/Restore.java:            // purge transactions
src//main/java/com/splicemachine/hbase/backup/Restore.java:            PurgeTransactionsJob job = new PurgeTransactionsJob(getRestoreTransaction(),
src//main/java/com/splicemachine/hbase/backup/Restore.java:            restoreTransaction.commit();
src//main/java/com/splicemachine/hbase/backup/Restore.java:                restoreTransaction.rollback();
src//main/java/com/splicemachine/hbase/backup/Restore.java:                List<Pair<Long, Long>> ignoreTxns = item1.getIgnoreTxns();
src//main/java/com/splicemachine/hbase/backup/Restore.java:                for (Pair<Long, Long> ignoreTxn : ignoreTxns) {
src//main/java/com/splicemachine/hbase/backup/Restore.java:                    item2.addIgnoreTxn(ignoreTxn);
src//main/java/com/splicemachine/hbase/backup/Restore.java:                backup.setBackupTransaction(restoreTransaction);
src//main/java/com/splicemachine/hbase/backup/Restore.java:                backup.setIgnoreTxns();
src//main/java/com/splicemachine/hbase/backup/RestoreBackupJob.java:	        return "restoreBackupJob-"+backupItem.getBackupTransaction().getTxnId();
src//main/java/com/splicemachine/hbase/backup/RestoreBackupJob.java:    public Txn getTxn() {
src//main/java/com/splicemachine/hbase/backup/RestoreBackupJob.java:        return backupItem.getBackupTransaction();
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:    private long beginTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:    private long commitTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:                       long beginTransactionId,
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:                       long commitTransactionId) {
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:        this.beginTransactionId = beginTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:        this.commitTransactionId = commitTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:    public long getBeginTransactionId() {
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:        return beginTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:    public void setBeginTransactionId(long beginTransactionId) {
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:        this.beginTransactionId = beginTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:    public long getCommitTransactionId() {
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:        return commitTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:    public void setCommitTransactionId(long commitTransactionId) {
src//main/java/com/splicemachine/hbase/backup/RestoreItem.java:        this.commitTransactionId = commitTransactionId;
src//main/java/com/splicemachine/hbase/backup/RestoreItemReporter.java:public class RestoreItemReporter extends TransactionalSysTableWriter<RestoreItem> {
src//main/java/com/splicemachine/hbase/backup/RestoreItemReporter.java:        dvds[1] = new SQLLongint();     //beginTransactionId
src//main/java/com/splicemachine/hbase/backup/RestoreItemReporter.java:        dvds[2] = new SQLLongint();     //commitTransactionId
src//main/java/com/splicemachine/hbase/backup/RestoreItemReporter.java:                       .encodeNext(element.getBeginTransactionId())
src//main/java/com/splicemachine/hbase/backup/RestoreItemReporter.java:                       .encodeNext(element.getCommitTransactionId());
src//main/java/com/splicemachine/hbase/backup/RestoreItemReporter.java:                encoder.encodeNext(element.getItem()).encodeNext(element.getBeginTransactionId());
src//main/java/com/splicemachine/job/ErrorTransport.java:                if (message != null && message.contains("transaction") && message.contains("is not ACTIVE. State is ERROR")) {
src//main/java/com/splicemachine/job/TaskStatus.java:    private TxnView txn;
src//main/java/com/splicemachine/job/TaskStatus.java:    public TxnView getTxnInformation() {
src//main/java/com/splicemachine/job/TaskStatus.java:        return txn;
src//main/java/com/splicemachine/job/TaskStatus.java:    public void setTxn(TxnView txn) {
src//main/java/com/splicemachine/job/TaskStatus.java:        this.txn = txn;
src//main/java/com/splicemachine/job/TaskStatus.java:        out.writeBoolean(txn!=null);
src//main/java/com/splicemachine/job/TaskStatus.java:        if(txn!=null){
src//main/java/com/splicemachine/job/TaskStatus.java:            encodeTxn(out);
src//main/java/com/splicemachine/job/TaskStatus.java:    private void encodeTxn(ObjectOutput out) throws IOException {
src//main/java/com/splicemachine/job/TaskStatus.java:        out.writeLong(txn.getTxnId());
src//main/java/com/splicemachine/job/TaskStatus.java:        out.writeLong(txn.getParentTxnId());
src//main/java/com/splicemachine/job/TaskStatus.java:        out.writeBoolean(txn.allowsWrites());
src//main/java/com/splicemachine/job/TaskStatus.java:            long txnId = in.readLong();
src//main/java/com/splicemachine/job/TaskStatus.java:            long parentTxn = in.readLong();
src//main/java/com/splicemachine/job/TaskStatus.java:            TxnView pView = !allowsWrites? Txn.ROOT_TRANSACTION: new LazyTxnView(parentTxn,TransactionStorage.getTxnSupplier());
src//main/java/com/splicemachine/job/TaskStatus.java:            txn = new InheritingTxnView(pView,txnId,txnId,allowsWrites, null, null);
src//main/java/com/splicemachine/mrio/api/hive/FailureExecHook.java:        SMStorageHandler.rollbackParentTxn();
src//main/java/com/splicemachine/mrio/api/hive/PostExecHook.java:        SMStorageHandler.commitParentTxn();
src//main/java/com/splicemachine/mrio/api/mapreduce/SpliceJob.java:				String pTxsID = sqlUtil.getTransactionID(conn);
src//main/java/com/splicemachine/pipeline/api/WriteContext.java:                                            TxnView txn) throws Exception;
src//main/java/com/splicemachine/pipeline/api/WriteContext.java:    TxnView getTxn();
src//main/java/com/splicemachine/pipeline/callbuffer/PipingCallBuffer.java:    private final TxnView txn;
src//main/java/com/splicemachine/pipeline/callbuffer/PipingCallBuffer.java:                            TxnView txn,
src//main/java/com/splicemachine/pipeline/callbuffer/PipingCallBuffer.java:        this.txn = txn;
src//main/java/com/splicemachine/pipeline/callbuffer/PipingCallBuffer.java:                        txn,
src//main/java/com/splicemachine/pipeline/callbuffer/RegionServerCallBuffer.java:    private final TxnView txn;
src//main/java/com/splicemachine/pipeline/callbuffer/RegionServerCallBuffer.java:                                  TxnView txn,
src//main/java/com/splicemachine/pipeline/callbuffer/RegionServerCallBuffer.java:        this.txn = txn;
src//main/java/com/splicemachine/pipeline/callbuffer/RegionServerCallBuffer.java:        return new BulkWrites(bws, this.txn, this.buffers.lastKey());
src//main/java/com/splicemachine/pipeline/constraint/Constraint.java:    Result validate(KVPair mutation, TxnView txn, RegionCoprocessorEnvironment rce, Set<ByteSlice> priorValues) throws IOException;
src//main/java/com/splicemachine/pipeline/constraint/UniqueConstraint.java:    public Result validate(KVPair mutation, TxnView txn, RegionCoprocessorEnvironment rce, Set<ByteSlice> priorValues) throws IOException {
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:    private TxnView txn;
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:    public DDLChange(TxnView txn) {
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        this(txn, null);
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:    public DDLChange(TxnView txn, DDLChangeType type) {
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        this.txn = txn;
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:    public DDLChange(TxnView txn, DDLChangeType type, TentativeDDLDesc tentativeDDLDesc) {
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        this(txn, type);
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:    public void setTxn(Txn txn) {
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        this.txn = txn;
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        return txn;
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        out.writeLong(txn.getTxnId());
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        long txnId = in.readLong();
src//main/java/com/splicemachine/pipeline/ddl/DDLChange.java:        txn = new LazyTxnView(txnId,TransactionStorage.getTxnSupplier());
src//main/java/com/splicemachine/pipeline/exception/ErrorState.java:            long txn1 = conflict.getFirstTransaction();
src//main/java/com/splicemachine/pipeline/exception/ErrorState.java:            long txn2 = conflict.getSecondTransaction();
src//main/java/com/splicemachine/pipeline/exception/ErrorState.java:            return StandardException.newException(getSqlState(),txn1,txn2);
src//main/java/com/splicemachine/pipeline/exception/ErrorState.java:            return StandardException.newException(getSqlState(), cce.getTxnId());
src//main/java/com/splicemachine/pipeline/impl/BulkWriteAction.java:                            addToRetryCallBuffer(currentBulkWrite.getMutations(),nextWrite.getTxn(),bulkWriteResult.getGlobalResult().refreshCache());
src//main/java/com/splicemachine/pipeline/impl/BulkWriteAction.java:                                    addToRetryCallBuffer(toRetry,nextWrite.getTxn(),true);
src//main/java/com/splicemachine/pipeline/impl/BulkWriteAction.java:                        TxnView nextTxn = nextWrite.getTxn();
src//main/java/com/splicemachine/pipeline/impl/BulkWriteAction.java:                            addToRetryCallBuffer(bw.getMutations(),nextTxn,first);
src//main/java/com/splicemachine/pipeline/impl/BulkWriteAction.java:		private void addToRetryCallBuffer(Collection<KVPair> retryBuffer, TxnView txn, boolean refreshCache) throws Exception {
src//main/java/com/splicemachine/pipeline/impl/BulkWriteAction.java:						retryPipingCallBuffer = new PipingCallBuffer(tableName,txn,null,regionCache,PipelineConstants.noOpFlushHook,writeConfiguration,null);
src//main/java/com/splicemachine/pipeline/impl/BulkWrites.java:		public BulkWrites(Collection<BulkWrite> bulkWrites,TxnView txn) {
src//main/java/com/splicemachine/pipeline/impl/BulkWrites.java:			this(bulkWrites,txn,null);
src//main/java/com/splicemachine/pipeline/impl/BulkWrites.java:		public BulkWrites(Collection<BulkWrite> bulkWrites,TxnView txn,byte[] regionKey) {
src//main/java/com/splicemachine/pipeline/impl/BulkWrites.java:				this.txn = txn;
src//main/java/com/splicemachine/pipeline/impl/BulkWrites.java:		public TxnView getTxn() {
src//main/java/com/splicemachine/pipeline/impl/BulkWrites.java:				return txn;
src//main/java/com/splicemachine/pipeline/impl/PipelineEncoding.java:        byte[] txnBytes = TransactionOperations.getOperationFactory().encode(bulkWrites.getTxn());
src//main/java/com/splicemachine/pipeline/impl/PipelineEncoding.java:        ExpandingEncoder buffer = new ExpandingEncoder(heapSize+txnBytes.length);
src//main/java/com/splicemachine/pipeline/impl/PipelineEncoding.java:        buffer.rawEncode(txnBytes);
src//main/java/com/splicemachine/pipeline/impl/PipelineEncoding.java:        byte[] txnBytes = decoder.rawBytes();
src//main/java/com/splicemachine/pipeline/impl/PipelineEncoding.java:        TxnView txn = TransactionOperations.getOperationFactory().decode(txnBytes,0,txnBytes.length);
src//main/java/com/splicemachine/pipeline/impl/PipelineEncoding.java:        return new BulkWrites(new BulkWriteCol(data,decoder.currentOffset(),stringNames),txn);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:    public RecordingCallBuffer<KVPair> writeBuffer(byte[] tableName, TxnView txn) {
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        return new MonitoredPipingCallBuffer(tableName, txn, asynchronousWriter, regionCache, noOpFlushHook, defaultWriteConfiguration, monitor);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:    public RecordingCallBuffer<KVPair> writeBuffer(byte[] tableName, TxnView txn, final MetricFactory metricFactory) {
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        return writeBuffer(tableName, txn, config);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:    public RecordingCallBuffer<KVPair> writeBuffer(byte[] tableName, TxnView txn, WriteConfiguration writeConfiguration) {
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        return writeBuffer(tableName, txn, noOpFlushHook, writeConfiguration);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:    public RecordingCallBuffer<KVPair> writeBuffer(byte[] tableName, TxnView txn,
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        return new MonitoredPipingCallBuffer(tableName, txn, asynchronousWriter, regionCache, flushHook, writeConfiguration, monitor);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:    public RecordingCallBuffer<KVPair> writeBuffer(byte[] tableName, TxnView txn, final int maxEntries) {
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        return new MonitoredPipingCallBuffer(tableName, txn, asynchronousWriter, regionCache, noOpFlushHook, defaultWriteConfiguration, config);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:                                                              TxnView txn, PreFlushHook flushHook,
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        return new MonitoredPipingCallBuffer(tableName, txn, synchronousWriter, regionCache, flushHook, writeConfiguration, monitor);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:                                                              TxnView txn,
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        return new MonitoredPipingCallBuffer(tableName, txn, synchronousWriter, regionCache, flushHook, writeConfiguration, config);
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:        public MonitoredPipingCallBuffer(byte[] tableName, TxnView txn, Writer writer, RegionCache regionCache, PreFlushHook preFlushHook, WriteConfiguration writeConfiguration, BufferConfiguration bufferConfiguration) {
src//main/java/com/splicemachine/pipeline/impl/WriteCoordinator.java:            super(tableName, txn, writer, regionCache, preFlushHook, writeConfiguration, bufferConfiguration);
src//main/java/com/splicemachine/pipeline/writeconfiguration/BaseWriteConfiguration.java:        } else if ((handler.canFinitelyRetry(t) || handler.canInfinitelyRetry(t)) && !handler.needsTransactionalRetry(t))
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:    private final TransactionalRegion rce;
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:    private final TxnView txn;
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:    public PipelineWriteContext(IndexCallBufferFactory indexSharedCallBuffer, TxnView txn, TransactionalRegion rce, RegionCoprocessorEnvironment env) {
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:        this(indexSharedCallBuffer, txn, rce, env, true);
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:    private PipelineWriteContext(IndexCallBufferFactory indexSharedCallBuffer, TxnView txn, TransactionalRegion rce, RegionCoprocessorEnvironment env, boolean keepState) {
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:        this.txn = txn;
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:                                                   int maxSize, boolean useAsyncWriteBuffers, TxnView txn) throws Exception {
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:        return indexSharedCallBuffer.getWriteBuffer(conglomBytes, this, indexToMainMutationMap, maxSize, useAsyncWriteBuffers, txn);
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:        return txn;
src//main/java/com/splicemachine/pipeline/writecontext/PipelineWriteContext.java:    public TransactionalRegion getTransactionalRegion() {
src//main/java/com/splicemachine/pipeline/writecontext/WriteNode.java:                                                   int maxSize, boolean useAsyncWriteBuffers, TxnView txn) throws Exception {
src//main/java/com/splicemachine/pipeline/writecontext/WriteNode.java:        return pipelineWriteContext.getSharedWriteBuffer(conglomBytes, indexToMainMutationMap, maxSize, useAsyncWriteBuffers, txn);
src//main/java/com/splicemachine/pipeline/writecontext/WriteNode.java:    public TxnView getTxn() {
src//main/java/com/splicemachine/pipeline/writecontext/WriteNode.java:        return pipelineWriteContext.getTxn();
src//main/java/com/splicemachine/pipeline/writecontextfactory/AlterTableWriteFactory.java:        DDLFilter ddlFilter = HTransactorFactory.getTransactionReadController().newDDLFilter(ddlChange.getTxn());
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:    public WriteContext create(IndexCallBufferFactory indexSharedCallBuffer, TxnView txn, T key, RegionCoprocessorEnvironment env) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:        return delegate.create(indexSharedCallBuffer, txn, key, env);
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:    public WriteContext create(IndexCallBufferFactory indexSharedCallBuffer, TxnView txn, T key, int expectedWrites, RegionCoprocessorEnvironment env) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:        return delegate.create(indexSharedCallBuffer, txn, key, expectedWrites, env);
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:    public WriteContext createPassThrough(IndexCallBufferFactory indexSharedCallBuffer, TxnView txn, T key, int expectedWrites, RegionCoprocessorEnvironment env) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:        return delegate.createPassThrough(indexSharedCallBuffer, txn, key, expectedWrites, env);
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:    public void dropIndex(long indexConglomId, TxnView txn) {
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:        delegate.dropIndex(indexConglomId, txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:    public boolean hasDependentWrite(TxnView txn) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/DiscardingWriteContextFactory.java:        return delegate.hasDependentWrite(txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/DropIndexFactory.java:    private TxnView txn;
src//main/java/com/splicemachine/pipeline/writecontextfactory/DropIndexFactory.java:    DropIndexFactory(TxnView txn, LocalWriteFactory delegate, long indexConglomId) {
src//main/java/com/splicemachine/pipeline/writecontextfactory/DropIndexFactory.java:        long commitTs = txn.getEffectiveCommitTimestamp();
src//main/java/com/splicemachine/pipeline/writecontextfactory/DropIndexFactory.java:        boolean shouldAdd = commitTs < 0 || ctx.getTxn().getBeginTimestamp() < commitTs;
src//main/java/com/splicemachine/pipeline/writecontextfactory/ForeignKeyChildCheckWriteFactory.java:        ctx.addLast(new ForeignKeyChildCheckWriteHandler(ctx.getTransactionalRegion(), ctx.getCoprocessorEnvironment(), fkConstraintInfo));
src//main/java/com/splicemachine/pipeline/writecontextfactory/ForeignKeyParentCheckWriteFactory.java:        ctx.addLast(new ForeignKeyParentCheckWriteHandler(ctx.getTransactionalRegion(), formatIds, parentTableVersion));
src//main/java/com/splicemachine/pipeline/writecontextfactory/IndexFactory.java:            DDLFilter ddlFilter = HTransactorFactory.getTransactionReadController()
src//main/java/com/splicemachine/pipeline/writecontextfactory/IndexFactory.java:                    .newDDLFilter(ddlChange.getTxn());
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:class LocalWriteContextFactory implements WriteContextFactory<TransactionalRegion> {
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                               TxnView txn, TransactionalRegion rce,
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:        PipelineWriteContext context = new PipelineWriteContext(indexSharedCallBuffer, txn, rce, env);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                               TxnView txn, TransactionalRegion region, int expectedWrites,
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:        PipelineWriteContext context = new PipelineWriteContext(indexSharedCallBuffer, txn, region, env);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:    private void isInitialized(TxnView txn) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                start(txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                start(txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:        isInitialized(context.getTxn());
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:    public WriteContext createPassThrough(IndexCallBufferFactory indexSharedCallBuffer, TxnView txn, TransactionalRegion region, int expectedWrites, RegionCoprocessorEnvironment env) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:        PipelineWriteContext context = new PipelineWriteContext(indexSharedCallBuffer, txn, region, env);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:    public void dropIndex(long indexConglomId, TxnView txn) {
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                            DropIndexFactory wrappedFactory = new DropIndexFactory(txn, factory, indexConglomId);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                    indexFactories.add(new DropIndexFactory(txn, null, indexConglomId));
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:    private void start(TxnView txn) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:        SpliceTransactionResourceImpl transactionResource;
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:            transactionResource = new SpliceTransactionResourceImpl();
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:            transactionResource.prepareContextManager();
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                transactionResource.marshallTransaction(txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                DataDictionary dataDictionary = transactionResource.getLcc().getDataDictionary();
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                transactionResource.resetContextManager();
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:            TxnView txn = ddlChange.getTxn();
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:            if (txn.getEffectiveState().isFinal()) {
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:                            dropIndex(ddlDesc.getConglomerateNumber(), txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:    public boolean hasDependentWrite(TxnView txn) throws IOException, InterruptedException {
src//main/java/com/splicemachine/pipeline/writecontextfactory/LocalWriteContextFactory.java:        isInitialized(txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactory.java:    void dropIndex(long indexConglomId, TxnView txn);
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactory.java:    boolean hasDependentWrite(TxnView txn) throws IOException, InterruptedException;
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactoryManager.java:    protected static final ConcurrentMap<Long, DiscardingWriteContextFactory<TransactionalRegion>> ctxMap = new ConcurrentHashMap<>();
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactoryManager.java:        DiscardingWriteContextFactory<TransactionalRegion> discardingWriteContextFactory
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactoryManager.java:    public static WriteContextFactory<TransactionalRegion> getWriteContext(long conglomerateId) {
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactoryManager.java:        DiscardingWriteContextFactory<TransactionalRegion> ctxFactory = ctxMap.get(conglomerateId);
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactoryManager.java:            DiscardingWriteContextFactory<TransactionalRegion> newFactory = new DiscardingWriteContextFactory<>(conglomerateId, localWriteContextFactory);
src//main/java/com/splicemachine/pipeline/writecontextfactory/WriteContextFactoryManager.java:            DiscardingWriteContextFactory<TransactionalRegion> oldFactory = ctxMap.putIfAbsent(conglomerateId, newFactory);
src//main/java/com/splicemachine/pipeline/writehandler/AbstractIndexWriteHandler.java:        return ctx.getSharedWriteBuffer(indexConglomBytes, indexToMainMutationMap, expectedSize * 2 + 10, true, ctx.getTxn()); //make sure we don't flush before we can
src//main/java/com/splicemachine/pipeline/writehandler/altertable/AlterTableInterceptWriteHandler.java:            recordingCallBuffer = writeCoordinator.writeBuffer(newTableName, ctx.getTxn());
src//main/java/com/splicemachine/pipeline/writehandler/ConstraintWriteHandler.java:            Constraint.Result validate = localConstraint.validate(mutation, ctx.getTxn(), ctx.getCoprocessorEnvironment(), visitedRows);
src//main/java/com/splicemachine/pipeline/writehandler/ForbidPastWritersHandler.java:            if (!ddlFilter.isVisibleBy(ctx.getTxn())) {
src//main/java/com/splicemachine/pipeline/writehandler/ForbidPastWritersHandler.java:                ctx.failed(mutation, WriteResult.failed("Writes forbidden by transaction " + ddlFilter.getTransaction()));
src//main/java/com/splicemachine/pipeline/writehandler/ForbidPastWritersHandler.java:            if (!ddlFilter.isVisibleBy(ctx.getTxn())) {
src//main/java/com/splicemachine/pipeline/writehandler/ForbidPastWritersHandler.java:                    ctx.failed(mutation, WriteResult.failed("Writes forbidden by transaction " + ddlFilter.getTransaction()));
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:    private final TransactionalRegion transactionalRegion;
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:    private final TxnOperationFactory txnOperationFactory;
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:    public ForeignKeyChildCheckWriteHandler(TransactionalRegion transactionalRegion, RegionCoprocessorEnvironment env, FKConstraintInfo fkConstraintInfo) {
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:        this.transactionalRegion = transactionalRegion;
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:        this.txnOperationFactory = TransactionOperations.getOperationFactory();
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:            if (!transactionalRegion.rowInRange(kvPair.getRowKey())) {
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:        TxnFilter txnFilter = transactionalRegion.unpackedFilter(ctx.getTxn());
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:        SIFilter siFilter = new SIFilter(txnFilter);
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildCheckWriteHandler.java:        Scan scan = txnOperationFactory.newScan(ctx.getTxn());
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyChildInterceptWriteHandler.java:            referencedTableCallBuffer = writeCoordinator.writeBuffer(hbaseTableBytes, ctx.getTxn());
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyParentCheckWriteHandler.java:    private final TransactionalRegion transactionalRegion;
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyParentCheckWriteHandler.java:    public ForeignKeyParentCheckWriteHandler(TransactionalRegion transactionalRegion, int[] formatIds, String parentTableVersion) {
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyParentCheckWriteHandler.java:        this.transactionalRegion = transactionalRegion;
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyParentCheckWriteHandler.java:        if (transactionalRegion.verifyForeignKeyReferenceExists(ctx.getTxn(), targetRowKey)) {
src//main/java/com/splicemachine/pipeline/writehandler/foreignkey/ForeignKeyParentInterceptWriteHandler.java:            RecordingCallBuffer<KVPair> callBuffer = writeCoordinator.writeBuffer(tableName, ctx.getTxn());
src//main/java/com/splicemachine/pipeline/writehandler/IndexCallBufferFactory.java:                                             TxnView txn) throws Exception {
src//main/java/com/splicemachine/pipeline/writehandler/IndexCallBufferFactory.java:            writeBuffer = createKvPairCallBuffer(conglomBytes, context, indexToMainMutationMap, maxSize, useAsyncWriteBuffers, txn);
src//main/java/com/splicemachine/pipeline/writehandler/IndexCallBufferFactory.java:                                                      TxnView txn) {
src//main/java/com/splicemachine/pipeline/writehandler/IndexCallBufferFactory.java:            writeBuffer = writerPool.writeBuffer(conglomBytes, txn, hook, wc);
src//main/java/com/splicemachine/pipeline/writehandler/IndexCallBufferFactory.java:            writeBuffer = writerPool.synchronousWriteBuffer(conglomBytes, txn, hook, wc, maxSize);
src//main/java/com/splicemachine/pipeline/writehandler/RegionWriteHandler.java:    protected final TransactionalRegion region;
src//main/java/com/splicemachine/pipeline/writehandler/RegionWriteHandler.java:    public RegionWriteHandler(TransactionalRegion region,
src//main/java/com/splicemachine/pipeline/writehandler/RegionWriteHandler.java:                ctx.getTxn(),
