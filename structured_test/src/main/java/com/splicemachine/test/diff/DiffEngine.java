package com.splicemachine.test.diff;

import com.splicemachine.test.nist.NistTestUtils;
import difflib.DiffUtils;
import difflib.Patch;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 * Static utility to determine and report file differences
 */
public class DiffEngine {

    /**
     * Calculate the differences of the output generated by all the given SQL scripts.
     * @param sqlFiles SQL script files that were executed against Derby and Splice
     *                 to produce output residing in <code>testOutputDir</code>
     * @param testOutputDir the directory in which to look for SQL script output
     * @param derbyFilter any optional output line filters to apply to Derby output.
     * @param spliceFilter any optional output line filters to apply to Splice output.
     * @return the list of {@link DiffReport}s
     */
    public static List<DiffReport> diffOutput(List<File> sqlFiles,
                                              String testOutputDir,
                                              List<String> derbyFilter,
                                              List<String> spliceFilter) {

        List<DiffReport> diffs = new ArrayList<DiffReport>();

        String inputDir = NistTestUtils.getBaseDirectory() + NistTestUtils.TARGET_NIST_DIR;
        if (testOutputDir != null && ! testOutputDir.isEmpty()) {
            inputDir = testOutputDir;
        }
        for (File sqlFile: sqlFiles) {
            // derby output
            String derbyFileName = inputDir + sqlFile.getName().replace(".sql", NistTestUtils.DERBY_OUTPUT_EXT);
            // NOTE: we need ALL lines, including "--" comments because
            // there are differencing directives in there
            List<String> derbyFileLines = NistTestUtils.fileToLines(derbyFileName, (String)null);
            // filter derby warnings, etc
            derbyFileLines = filterOutput(derbyFileLines, derbyFilter);

            // splice output
            String spliceFileName = inputDir + sqlFile.getName().replace(".sql", NistTestUtils.SPLICE_OUTPUT_EXT);
            // NOTE: we need ALL lines, including "--" comments because
            // there are differencing directives in there
            List<String> spliceFileLines = NistTestUtils.fileToLines(spliceFileName, (String)null);
            // filter splice warnings, etc
            spliceFileLines = filterOutput(spliceFileLines, spliceFilter);

            // Diff the output files using a custom Equalizer
            Patch<String> patch = DiffUtils.diff(derbyFileLines, spliceFileLines, new NistLineEqualizer());

            // Create a diff report for this SQL script output
            DiffReport diff = new DiffReport(derbyFileName, spliceFileName, patch.getDeltas());
            diffs.add(diff);
        }
        return diffs;
    }

    /**
     * Remove (filter) any lines in <code>fileLines</code> that contain any occurrences of
     * <code>lineFilters</code>
     * <p>
     *     This method is used to filter lines from one output file that are not in the
     *     other.  Lines in one file that ARE NOT in the other throw off diff comparison
     *     by one line.<br/>
     *     <b>NEVER</b> use this method to filter lines from one output file that are also
     *     in the other, unless you filter the same lines from the other.
     * </p>
     * @param fileLines the strings to consider
     * @param lineFilters patterns, occurrences of which, should be filtered.
     * @return the result of the <code>fileLines</code> filtering (lines with lineFilters
     * removed).
     */
    public static List<String> filterOutput(List<String> fileLines, List<String> lineFilters) {
        if (isEmpty(fileLines) || isEmpty(lineFilters)) {
            return fileLines;
        }
        List<String> copy = Collections.synchronizedList(new ArrayList<String>(fileLines));
        List<String> filteredLines = Collections.synchronizedList(new ArrayList<String>(fileLines.size()));
        for (String line : copy) {
            boolean filter = false;

            for (String warning : lineFilters) {
                if (line.contains(warning)) {
                    filter = true;
                    break;
                }
            }
            if (! filter) {
                filteredLines.add(line);
            }
        }
        return filteredLines;
    }

    public static boolean isEmpty(String string) {
        return (string == null || string.isEmpty());
    }

    public static boolean isEmpty(Collection<? extends Object> objects) {
        return (objects == null || objects.isEmpty());
    }

}
